version: 2.1

orbs:
  win: circleci/windows@2.4.0

executors:
  golang:
    docker:
      - image: cimg/go:1.17.2

  docker-amd64:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true

  docker-arm64:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    resource_class: arm.medium

commands:
  attach_to_workspace:
    steps:
      - attach_workspace:
          at: ~/

  save_module_cache:
    steps:
      - save_cache:
          key: cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod

  restore_module_cache:
    steps:
      - run:
          name: create modules dir
          command: mkdir -p ~/go/pkg/mod
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}

  install_pytest:
    description: Install pytest and dependencies with pyenv.
    parameters:
      python_version:
        type: string
        default: "3.8.5"
      requirements_path:
        type: string
        default: "internal/buildscripts/packaging/tests/requirements.txt"
    steps:
      - restore_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
      - run:
          name: Install pytest and dependencies
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            cd $PYENV_ROOT && git pull && cd -
            pyenv install --skip-existing << parameters.python_version >>
            pyenv global << parameters.python_version >>
            if which pip; then
                pip install --upgrade 'pip==20.2.4'
            else
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                python get-pip.py 'pip==20.2.4'
            fi
            pip install -r "<< parameters.requirements_path >>"
            pyenv rehash
      - save_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
          paths:
            - /opt/circleci/.pyenv

  save_pytest_results:
    description: Collect and archive pytest results from `dir`.
    parameters:
      dir:
        type: string
        default: ~/testresults
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

workflows:
  version: 2
  build-and-test:
    jobs:
      - setup-environment
      - cross-compile:
          requires:
            - setup-environment
      - docker-otelcol:
          requires:
            - cross-compile
          name: docker-otelcol-amd64
          os: docker-amd64
          arch: amd64
      - docker-otelcol:
          requires:
            - cross-compile
          name: docker-otelcol-arm64
          os: docker-arm64
          arch: arm64
      - docker-otelcol-windows:
          requires:
            - cross-compile

jobs:
  setup-environment:
    executor: golang
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths: project
      - restore_module_cache
      - persist_to_workspace:
          root: ~/
          paths: go/pkg/mod
      - run:
          name: Install tools
          command: make install-tools
      - persist_to_workspace:
          root: ~/
          paths: go/bin

  cross-compile:
    executor: golang
    parallelism: 4
    steps:
      - attach_to_workspace
      - run:
          name: Build collector for all archs
          command: grep ^binaries-all-sys Makefile|fmt -w 1|tail -n +2|circleci tests split|xargs make
      - persist_to_workspace:
          root: ~/
          paths: project/bin
      - store_artifacts:
          path: bin

  docker-otelcol:
    parameters:
      os:
        type: executor
      arch:
        type: string
    executor: << parameters.os >>
    environment:
      ARCH: << parameters.arch >>
    steps:
      - attach_to_workspace
      - run:
          name: Build docker image
          command: make docker-otelcol SKIP_COMPILE=true ARCH=${ARCH}
      - run:
          name: Run docker image
          command: |
            # ensure that the arch in the image manifest is correct
            [ "$( docker inspect --format='{{.Architecture}}' otelcol:${ARCH} )" = "$ARCH" ] || exit 1
            docker run -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol:${ARCH}
            sleep 10
            if [ -z "$( docker ps --filter=status=running --filter=name=otelcol -q )" ]; then
              docker logs otelcol
              exit 1
            fi
      - run:
          name: Save docker image
          command: |
            mkdir -p dist
            docker save -o dist/otelcol-${ARCH}.tar otelcol:${ARCH}
      - store_artifacts:
          path: dist/otelcol-*.tar

  docker-otelcol-windows:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - attach_to_workspace
      - run:
          name: Build docker image
          command: |
            $ErrorActionPreference = 'Stop'
            Copy-Item .\bin\otelcol_windows_amd64.exe .\cmd\otelcol\otelcol.exe
            Copy-Item .\bin\translatesfx_windows_amd64.exe .\cmd\otelcol\translatesfx.exe
            docker build -t otelcol-windows --build-arg SMART_AGENT_RELEASE=$((Get-Content internal\buildscripts\packaging\smart-agent-release.txt).TrimStart("v")) -f .\cmd\otelcol\Dockerfile.windows .\cmd\otelcol\
            Remove-Item .\cmd\otelcol\otelcol.exe
            Remove-Item .\cmd\otelcol\translatesfx.exe
      - run:
          name: Run docker image
          command: |
            $ErrorActionPreference = 'Stop'
            docker run -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol-windows:latest
            Start-Sleep 10
            $DockerOutput=$(docker ps --filter=status=running --filter=name=otelcol -q)
            if ( $DockerOutput -eq $null )
            {
              docker logs otelcol
              exit 1
            }
      - run:
          name: Save docker image
          command: |
            $ErrorActionPreference = 'Stop'
            New-Item -ItemType Directory -Force -Path dist
            docker save -o dist\otelcol-windows.tar otelcol-windows:latest
      - store_artifacts:
          path: dist/otelcol-windows.tar
