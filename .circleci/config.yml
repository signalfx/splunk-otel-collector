version: 2.1

orbs:
  win: circleci/windows@2.4.0

executors:
  golang:
    docker:
      - image: cimg/go:1.15

commands:
  verify_dist_files_exist:
    parameters:
      files:
        type: string
        default: |
          bin/otelcol_darwin_amd64
          bin/otelcol_linux_arm64
          bin/otelcol_linux_amd64
          bin/otelcol_windows_amd64.exe
          dist/splunk-otel-collector_*_amd64.deb
          dist/splunk-otel-collector_*_arm64.deb
          dist/splunk-otel-collector-*.aarch64.rpm
          dist/splunk-otel-collector-*.x86_64.rpm
          dist/splunk-otel-collector-*-amd64.msi
    steps:
      - run:
          name: Check if files exist
          command: |
            files="<< parameters.files >>"
            for f in $files; do
              if [[ ! -f $f ]]
              then
                  echo "$f does not exist."
                  exit 1
              fi
            done

  attach_to_workspace:
    steps:
      - attach_workspace:
          at: ~/

  save_module_cache:
    steps:
      - save_cache:
          key: cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod

  restore_module_cache:
    steps:
      - run:
          name: create modules dir
          command: mkdir -p ~/go/pkg/mod
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}

  publish_docker_images:
    parameters:
      repo:
        type: string
      tag:
        type: string

    steps:
      - run:
          name: Build image
          command: |
            make docker-otelcol
            docker tag otelcol:latest quay.io/signalfx/<< parameters.repo >>:<< parameters.tag >>
            docker tag otelcol:latest quay.io/signalfx/<< parameters.repo >>:latest
      - run:
          name: Login to Docker Hub
          command: docker login -u $CIRCLECI_QUAY_USERNAME -p $CIRCLECI_QUAY_PASSWORD quay.io
      - run:
          name: Push image
          command: |
            docker push quay.io/signalfx/<< parameters.repo >>:<< parameters.tag >>
            docker push quay.io/signalfx/<< parameters.repo >>:latest

  install_fluentbit:
    steps:
      - run: |
          sudo chmod 0777 -R /opt
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - "cimg-fluentbit-{{ arch }}-1.5.3"
      - run: |
          sudo ln -s /opt/td-agent-bit/bin/td-agent-bit /usr/local/bin/fluent-bit

          if [[ -f /opt/td-agent-bit/bin/td-agent-bit ]]; then
            exit 0
          fi

          wget https://packages.fluentbit.io/ubuntu/bionic/pool/main/t/td-agent-bit/td-agent-bit_1.5.3_amd64.deb
          sudo dpkg -i ./td-agent-bit*.deb
      - save_cache:
          key: cimg-fluentbit-{{ arch }}-1.5.3
          paths:
            - /opt/td-agent-bit

  install_pytest:
    description: Install pytest and dependencies with pyenv.
    parameters:
      python_version:
        type: string
        default: "3.8.5"
      requirements_path:
        type: string
        default: "internal/buildscripts/packaging/tests/requirements.txt"
    steps:
      - restore_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
      - run:
          name: Install pytest and dependencies
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            cd $PYENV_ROOT && git pull && cd -
            pyenv install --skip-existing << parameters.python_version >>
            pyenv global << parameters.python_version >>
            if which pip; then
                pip install --upgrade 'pip==20.2.4'
            else
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                python get-pip.py 'pip==20.2.4'
            fi
            pip install -r "<< parameters.requirements_path >>"
            pyenv rehash
      - save_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
          paths:
            - /opt/circleci/.pyenv

  save_pytest_results:
    description: Collect and archive pytest results from `dir`.
    parameters:
      dir:
        type: string
        default: ~/testresults
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

workflows:
  version: 2
  build-and-test:
    jobs:
      - windows-test:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - setup-environment:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - lint:
          requires:
            - setup-environment
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - cross-compile:
          requires:
            - setup-environment
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - test:
          requires:
            - setup-environment
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - coverage:
          requires:
            - setup-environment
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - publish-stable:
          requires:
            - cross-compile
            - lint
            - test
            - coverage
            - windows-test
            - deb-package
            - rpm-package
            - windows-msi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - publish-dev:
          requires:
            - cross-compile
            - lint
            - test
            - coverage
            - windows-test
            - deb-package
            - rpm-package
            - windows-msi
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - build-package:
          name: deb-package
          package_type: deb
          requires:
            - cross-compile
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - build-package:
          name: rpm-package
          package_type: rpm
          requires:
            - cross-compile
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - installer-script-test:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - windows-msi:
          requires:
            - cross-compile
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - windows-msi-validation:
          requires:
            - windows-msi
          name: windows-msi-agent-test
          mode: agent
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      - windows-msi-validation:
          requires:
            - windows-msi
          name: windows-msi-gateway-test
          mode: gateway
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/

jobs:
  setup-environment:
    executor: golang
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths: project
      - restore_module_cache
      - persist_to_workspace:
          root: ~/
          paths: go/pkg/mod
      - run:
          name: Install tools
          command: make install-tools
      - persist_to_workspace:
          root: ~/
          paths: go/bin

  lint:
    executor: golang
    steps:
      - attach_to_workspace
      - run:
          name: Lint
          command: make -j4 checklicense impi lint misspell
      - run:
          name: Golang Security Checker
          command: make lint-gosec

  cross-compile:
    executor: golang
    parallelism: 4
    steps:
      - attach_to_workspace
      - run:
          name: Build collector for all archs
          command: grep ^binaries-all-sys Makefile|fmt -w 1|tail -n +2|circleci tests split|xargs make
      - persist_to_workspace:
          root: ~/
          paths: project/bin

  test:
    executor: golang
    environment:
      TEST_RESULTS: unit-test-results/junit/results.xml
    steps:
      - attach_to_workspace
      - run:
          name: Unit tests
          command: |
            mkdir -p unit-test-results/junit
            trap "go-junit-report  -set-exit-code < unit-test-results/go-unit-tests.out > unit-test-results/junit/results.xml" EXIT
            make test | tee unit-test-results/go-unit-tests.out
      - store_artifacts:
          path: unit-test-results
      - store_test_results:
          path: unit-test-results/junit
      - save_module_cache

  coverage:
    executor: golang
    steps:
      - attach_to_workspace
      - run:
          name: Install packages.
          command: sudo apt update && sudo apt-get install bzr time
      - run:
          name: Coverage tests
          command: make test-with-cover
      - run:
          name: Code coverage
          command: bash <(curl -s https://codecov.io/bash)

  publish-stable:
    docker:
      - image: cimg/go:1.15
    steps:
      - attach_to_workspace
      - verify_dist_files_exist
      - setup_remote_docker
      - publish_docker_images:
          repo: splunk-otel-collector
          tag: ${CIRCLE_TAG:1}
      - run:
          name: Prepare release artifacts
          command: |
            cp bin/* dist/
            # exclude the otelcol symlink from the release
            [ -e dist/otelcol ] && rm -f dist/otelcol
      - run:
          name: Calculate checksums
          command: cd dist && shasum -a 256 * > checksums.txt
      - run:
          name: Create Github pre-release and upload artifacts
          command: ghr --prerelease -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace $CIRCLE_TAG dist/

  publish-dev:
    docker:
      - image: cimg/go:1.15
    steps:
      - attach_to_workspace
      - verify_dist_files_exist
      - setup_remote_docker
      - publish_docker_images:
          repo: splunk-otel-collector-dev
          tag: ${CIRCLE_SHA1}

  windows-test:
    executor:
      name: win/default
      shell: powershell.exe
    environment:
      GOPATH=~/go
    steps:
      - checkout
      - restore_module_cache
      - run:
          name: Upgrade golang
          command: |
            choco upgrade golang --version=1.15
            refreshenv
            go env -w CGO_ENABLED=0
      - run:
          name: Unit tests
          command: go test ./...
      - save_module_cache

  build-package:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    parameters:
      package_type:
        type: enum
        enum: ["deb", "rpm"]
    steps:
      - attach_to_workspace
      - run:
          name: Build fpm image
          command: docker build -t otelcol-fpm internal/buildscripts/packaging/fpm
      - run:
          name: Build << parameters.package_type >> amd64 package
          command: docker run --rm -v $(pwd):/repo -e PACKAGE="<< parameters.package_type >>" -e VERSION="${CIRCLE_TAG:-}" -e ARCH="amd64" otelcol-fpm
      - run:
          name: Build << parameters.package_type >> arm64 package
          command: docker run --rm -v $(pwd):/repo -e PACKAGE="<< parameters.package_type >>" -e VERSION="${CIRCLE_TAG:-}" -e ARCH="arm64" otelcol-fpm
      - install_pytest
      - run:
          name: Test << parameters.package_type >> package installation
          command: |
            mkdir -p ~/testresults
            pytest -n2 --verbose -m << parameters.package_type >> \
              --junitxml=~/testresults/results.xml\
              --html=~/testresults/results.html\
              --self-contained-html \
              internal/buildscripts/packaging/tests/package_test.py
      - persist_to_workspace:
          root: ~/
          paths: project/dist/*.<< parameters.package_type >>
      - store_artifacts:
          path: dist
      - save_pytest_results

  installer-script-test:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Check for relevant changes
          command: |
            # Only run installer tests for main branch, tags, or if the branch has relevant changes
            if [[ "$CIRCLE_BRANCH" != "main" ]] && [[ -z "${CIRCLE_TAG:-}" ]] && ! .circleci/scripts/changes-include internal/buildscripts/packaging; then
              echo "SKIP_TESTS=yes" >> $BASH_ENV
            fi
      - install_pytest
      - run:
          name: Test installer script
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            mkdir -p ~/testresults
            if [[ $CIRCLE_NODE_INDEX -eq 0 ]]; then
              PACKAGE_TYPE=deb
            else
              PACKAGE_TYPE=rpm
            fi
            pytest -n2 --verbose -m $PACKAGE_TYPE \
              --junitxml=~/testresults/results.xml \
              --html=~/testresults/results.html \
              --self-contained-html \
              internal/buildscripts/packaging/tests/installer_test.py
      - save_pytest_results

  windows-msi:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    steps:
      - attach_to_workspace
      - run:
          name: Build msi-builder image
          command: docker build -t msi-builder internal/buildscripts/packaging/msi/msi-builder
      - run:
          name: Build MSI
          command: |
            mkdir dist
            export VERSION_TAG="${CIRCLE_TAG/v/}"
            docker run --rm -v $(pwd):/project -u 0 msi-builder "${VERSION_TAG:-0.0.1.$CIRCLE_BUILD_NUM}"
      - persist_to_workspace:
          root: ~/
          paths: project/dist/*.msi
      - store_artifacts:
          path: dist

  windows-msi-validation:
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      mode:
        type: enum
        enum: ["agent", "gateway"]
    steps:
      - attach_to_workspace
      - run:
          name: Installation test
          command: |
            Set-PSDebug -Trace 1
            $msi_path = Resolve-Path .\dist\splunk-otel-collector*.msi
            $env:VERIFY_ACCESS_TOKEN = "false"
            .\internal\buildscripts\packaging\installer\install.ps1 -access_token "testing123" -msi_path "$msi_path" -mode "<< parameters.mode >>"
