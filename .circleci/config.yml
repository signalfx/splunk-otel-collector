version: 2.1

orbs:
  win: circleci/windows@2.4.0

executors:
  golang:
    docker:
      - image: cimg/go:1.17.2

commands:
  attach_to_workspace:
    steps:
      - attach_workspace:
          at: ~/

  save_module_cache:
    steps:
      - save_cache:
          key: cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod

  restore_module_cache:
    steps:
      - run:
          name: create modules dir
          command: mkdir -p ~/go/pkg/mod
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - cimg-go-pkg-mod-{{ arch }}-{{ checksum "go.sum" }}

  install_pytest:
    description: Install pytest and dependencies with pyenv.
    parameters:
      python_version:
        type: string
        default: "3.8.5"
      requirements_path:
        type: string
        default: "internal/buildscripts/packaging/tests/requirements.txt"
    steps:
      - restore_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
      - run:
          name: Install pytest and dependencies
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            cd $PYENV_ROOT && git pull && cd -
            pyenv install --skip-existing << parameters.python_version >>
            pyenv global << parameters.python_version >>
            if which pip; then
                pip install --upgrade 'pip==20.2.4'
            else
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                python get-pip.py 'pip==20.2.4'
            fi
            pip install -r "<< parameters.requirements_path >>"
            pyenv rehash
      - save_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "<< parameters.requirements_path >>" }}
          paths:
            - /opt/circleci/.pyenv

  save_pytest_results:
    description: Collect and archive pytest results from `dir`.
    parameters:
      dir:
        type: string
        default: ~/testresults
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

workflows:
  version: 2
  build-and-test:
    jobs:
      - windows-test
      - setup-environment
      - lint:
          requires:
            - setup-environment
      - cross-compile:
          requires:
            - setup-environment
      - docker-otelcol:
          requires:
            - cross-compile
      - windows-docker-otelcol:
          requires:
            - cross-compile
      - test:
          requires:
            - setup-environment
      - coverage:
          requires:
            - setup-environment
      - build-package:
          name: deb-package
          package_type: deb
          requires:
            - cross-compile
      - build-package:
          name: rpm-package
          package_type: rpm
          requires:
            - cross-compile
      - installer-script-test
      - windows-msi:
          requires:
            - cross-compile
      - windows-msi-validation:
          requires:
            - windows-msi
          name: windows-msi-agent-test
          mode: agent
      - windows-msi-validation:
          requires:
            - windows-msi
          name: windows-msi-gateway-test
          mode: gateway
      - windows-choco-validation:
          requires:
            - windows-msi
          name: windows-choco-agent-test
          mode: agent
      - windows-choco-validation:
          requires:
            - windows-msi
          name: windows-choco-gateway-test
          mode: gateway
      - puppet-test

jobs:
  setup-environment:
    executor: golang
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths: project
      - restore_module_cache
      - persist_to_workspace:
          root: ~/
          paths: go/pkg/mod
      - run:
          name: Install tools
          command: make install-tools
      - persist_to_workspace:
          root: ~/
          paths: go/bin

  lint:
    executor: golang
    steps:
      - attach_to_workspace
      - run:
          name: Lint
          command: make -j4 checklicense impi lint misspell

  cross-compile:
    executor: golang
    parallelism: 4
    steps:
      - attach_to_workspace
      - run:
          name: Build collector for all archs
          command: grep ^binaries-all-sys Makefile|fmt -w 1|tail -n +2|circleci tests split|xargs make
      - persist_to_workspace:
          root: ~/
          paths: project/bin
      - store_artifacts:
          path: bin

  test:
    executor: golang
    environment:
      TEST_RESULTS: unit-test-results/junit/results.xml
    steps:
      - attach_to_workspace
      - run:
          name: Unit tests
          command: |
            mkdir -p unit-test-results/junit
            trap "go-junit-report  -set-exit-code < unit-test-results/go-unit-tests.out > unit-test-results/junit/results.xml" EXIT
            make test | tee unit-test-results/go-unit-tests.out
      - store_artifacts:
          path: unit-test-results
      - store_test_results:
          path: unit-test-results/junit
      - save_module_cache

  coverage:
    executor: golang
    steps:
      - attach_to_workspace
      - run:
          name: Install packages.
          command: sudo apt update && sudo apt-get install bzr time
      - run:
          name: Coverage tests
          command: make test-with-cover
# DISABLE CODECOV UNTIL THE SCRIPT IS AUDITED AND WE ARE CERTAIN IT IS OK TO TO EXECUTE IT.
#      - run:
#          name: Code coverage
#          command: bash <(curl -s https://codecov.io/bash)

  docker-otelcol:
    docker:
      - image: cimg/go:1.17
    steps:
      - attach_to_workspace
      - setup_remote_docker
      - run:
          name: Build docker image
          command: make docker-otelcol SKIP_COMPILE=true
      - run:
          name: Run docker image
          command: |
            docker run -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol:latest
            sleep 10
            if [ -z "$( docker ps --filter=status=running --filter=name=otelcol -q )" ]; then
              docker logs otelcol
              exit 1
            fi
      - run:
          name: Save docker image
          command: |
            mkdir -p dist
            docker save -o dist/otelcol.tar otelcol:latest
      - store_artifacts:
          path: dist/otelcol.tar

  windows-docker-otelcol:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - attach_to_workspace
      - run:
          name: Build docker image
          command: |
            $ErrorActionPreference = 'Stop'
            Copy-Item .\bin\otelcol_windows_amd64.exe .\cmd\otelcol\otelcol.exe
            Copy-Item .\bin\translatesfx_windows_amd64.exe .\cmd\otelcol\translatesfx.exe
            docker build -t otelcol-windows --build-arg SMART_AGENT_RELEASE=$((Get-Content internal\buildscripts\packaging\smart-agent-release.txt).TrimStart("v")) -f .\cmd\otelcol\Dockerfile.windows .\cmd\otelcol\
            Remove-Item .\cmd\otelcol\otelcol.exe
            Remove-Item .\cmd\otelcol\translatesfx.exe
      - run:
          name: Run docker image
          command: |
            $ErrorActionPreference = 'Stop'
            docker run -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol-windows:latest
            Start-Sleep 10
            $DockerOutput=$(docker ps --filter=status=running --filter=name=otelcol -q)
            if ( $DockerOutput -eq $null )
            {
              docker logs otelcol
              exit 1
            }
      - run:
          name: Save docker image
          command: |
            $ErrorActionPreference = 'Stop'
            New-Item -ItemType Directory -Force -Path dist
            docker save -o dist\otelcol-windows.tar otelcol-windows:latest
      - store_artifacts:
          path: dist/otelcol-windows.tar

  windows-test:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - restore_module_cache
      - run:
          name: Upgrade golang
          command: |
            $ErrorActionPreference = 'Stop'
            $env:GOPATH = "${env:USERPROFILE}\go"
            choco upgrade golang --version=1.17.2
            refreshenv
            go env -w CGO_ENABLED=0
            go install github.com/ory/go-acc@v0.2.6
# DISABLE CODECOV UNTIL THE SCRIPT IS AUDITED AND WE ARE CERTAIN IT IS OK TO TO EXECUTE IT.
#            (New-Object System.Net.WebClient).DownloadFile("https://codecov.io/bash", "C:\Users\circleci\project\codecov.sh")
      - run:
          name: Unit tests with coverage
          command: |
            $ErrorActionPreference = 'Stop'
            $env:GOPATH = "${env:USERPROFILE}\go"
            $env:PATH = "$env:PATH;${env:GOPATH}\bin"
            go-acc ./...
#      - run:
#          name: Upload coverage
#          command: bash codecov.sh -f coverage.txt
      - save_module_cache

  build-package:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    parameters:
      package_type:
        type: enum
        enum: ["deb", "rpm"]
    steps:
      - attach_to_workspace
      - run:
          name: Build << parameters.package_type >> amd64 package
          command: make << parameters.package_type>>-package SKIP_COMPILE=true VERSION="${CIRCLE_TAG:-}" ARCH="amd64"
      - run:
          name: Build << parameters.package_type >> arm64 package
          command: make << parameters.package_type>>-package SKIP_COMPILE=true VERSION="${CIRCLE_TAG:-}" ARCH="arm64"
      - install_pytest
      - run:
          name: Test << parameters.package_type >> package installation
          command: |
            mkdir -p ~/testresults
            pytest -n2 --verbose -m << parameters.package_type >> \
              --junitxml=~/testresults/results.xml\
              --html=~/testresults/results.html\
              --self-contained-html \
              internal/buildscripts/packaging/tests/package_test.py
      - store_artifacts:
          path: dist
      - save_pytest_results

  installer-script-test:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Check for relevant changes
          command: |
            # Only run installer tests for main branch, tags, or if the branch has relevant changes
            if [[ "$CIRCLE_BRANCH" != "main" ]] && [[ -z "${CIRCLE_TAG:-}" ]] && ! .circleci/scripts/changes-include internal/buildscripts/packaging/installer internal/buildscripts/packaging/tests; then
              echo "SKIP_TESTS=yes" >> $BASH_ENV
            fi
      - install_pytest
      - run:
          name: Test installer script
          no_output_timeout: 30m
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            mkdir -p ~/testresults
            if [[ $CIRCLE_NODE_INDEX -eq 0 ]]; then
              PACKAGE_TYPE=deb
            else
              PACKAGE_TYPE=rpm
            fi
            pytest -n2 --verbose -m $PACKAGE_TYPE \
              --junitxml=~/testresults/results.xml \
              --html=~/testresults/results.html \
              --self-contained-html \
              internal/buildscripts/packaging/tests/installer_test.py
      - save_pytest_results

  windows-msi:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    steps:
      - attach_to_workspace
      - run:
          name: Build MSI
          command: |
            mkdir -p dist
            export VERSION_TAG="${CIRCLE_TAG#v}"
            make msi SKIP_COMPILE=true VERSION="${VERSION_TAG:-0.0.1.$CIRCLE_BUILD_NUM}"
      - persist_to_workspace:
          root: ~/
          paths: project/dist/*.msi
      - store_artifacts:
          path: dist

  windows-msi-validation:
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      mode:
        type: enum
        enum: ["agent", "gateway"]
    steps:
      - attach_to_workspace
      - run:
          name: Installation test
          command: |
            $ErrorActionPreference = 'Stop'
            Set-PSDebug -Trace 1
            $msi_path = Resolve-Path .\dist\splunk-otel-collector*.msi
            $env:VERIFY_ACCESS_TOKEN = "false"
            .\internal\buildscripts\packaging\installer\install.ps1 -access_token "testing123" -msi_path "$msi_path" -mode "<< parameters.mode >>"
            Start-Sleep -s 30
            Set-Location -Path "\Program Files\Splunk\OpenTelemetry Collector"
            Test-Path -Path ".\splunk-support-bundle.ps1"
            Start-Process ".\otelcol.exe" -WindowStyle Hidden
            powershell.exe -File "\Program Files\Splunk\OpenTelemetry Collector\splunk-support-bundle.ps1" -t \tmp\splunk-support-bundle
            Test-Path -Path ".\splunk-support-bundle.zip"
            Test-Path -Path "\tmp\splunk-support-bundle\logs\splunk-otel-collector.log"
            Test-Path -Path "\tmp\splunk-support-bundle\logs\splunk-otel-collector.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\logs\td-agent.log"
            Test-Path -Path "\tmp\splunk-support-bundle\logs\td-agent.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\metrics\collector-metrics.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\metrics\df.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\metrics\free.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\metrics\top.txt"
            Test-Path -Path "\tmp\splunk-support-bundle\zpages\tracez.html"
            if ( "<< parameters.mode >>" -eq "agent" ) {
              Test-Path -Path "\tmp\splunk-support-bundle\config\td-agent\td-agent.conf"
              Test-Path -Path "\tmp\splunk-support-bundle\config\agent_config.yaml"
            }
            if ( "<< parameters.mode >>" -eq "gateway" ) {
              Test-Path -Path "\tmp\splunk-support-bundle\config\gateway_config.yaml"
            }

  windows-choco-validation:
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      mode:
        type: enum
        enum: ["agent", "gateway"]
    steps:
      - attach_to_workspace
      - run:
          name: Chocolatey test
          command: |
            $ErrorActionPreference = 'Stop'
            Set-PSDebug -Trace 1
            $msi_file_name = Resolve-Path .\dist\splunk-otel-collector*.msi | Split-Path -leaf
            if ($msi_file_name -match '(\d+\.)(\d+\.)+(\d*)') { $version = $matches[0] }
            write-host "Building choco package..."
            .\internal\buildscripts\packaging\choco\make.ps1 build_choco -Version $version | Tee-Object -file .\dist\build_logs.log
            Test-Path -Path ".\dist\splunk-otel-collector.$version.nupkg"
            write-host "Installing choco package..."
            choco install splunk-otel-collector -s=".\dist\splunk-otel-collector.$version.nupkg" --params="'/SPLUNK_ACCESS_TOKEN=12345 /MODE:<< parameters.mode >>'" -y | Tee-Object -file .\dist\installation_logs.log
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { throw "Failed to install splunk-otel-collector using chocolatey." } else { write-host "splunk-otel-collector service is running." }
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { throw "Failed to install fluentdwinsvc using chocolatey." } else { write-host "fluentdwinsvc service is running." }
            write-host "Reinstalling choco package..."
            choco install splunk-otel-collector -s=".\dist\splunk-otel-collector.$version.nupkg" --params="'/MODE:<< parameters.mode >>'" --force -y | Tee-Object -file .\dist\reinstallation_logs.log
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { throw "Failed to install splunk-otel-collector using chocolatey." } else { write-host "splunk-otel-collector service is running." }
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { throw "Failed to install fluentdwinsvc using chocolatey." } else { write-host "fluentdwinsvc service is running." }
            write-host "Uninstalling choco package..."
            choco uninstall -y splunk-otel-collector | Tee-Object -file .\dist\uninstallation_logs.log
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { write-host "splunk-otel-collector has been successfully uninstalled and service is not running." } else { throw "Failed to uninstall splunk-otel-collector chocolatey package." }
            if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { write-host "fluentdwinsvc has been successfully uninstalled and service is not running." } else { throw "Failed to uninstall fluentdwinsvc chocolatey package." }
      - store_artifacts:
          path: dist

  puppet-test:
    machine:
      image: ubuntu-1604:202007-01
      docker_layer_caching: true
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Lint
          command: |
            # Only run lint for main branch, tags, or if the branch has relevant changes
            if [[ "$CIRCLE_BRANCH" = "main" ]] || [[ -n "${CIRCLE_TAG:-}" ]] || .circleci/scripts/changes-include deployments/puppet; then
              make -C deployments/puppet lint
            fi
      - run:
          name: Rake spec
          command: |
            # Only run rake-spec for main branch, tags, or if the branch has relevant changes
            if [[ "$CIRCLE_BRANCH" = "main" ]] || [[ -n "${CIRCLE_TAG:-}" ]] || .circleci/scripts/changes-include deployments/puppet; then
              make -C deployments/puppet rake-spec
            fi
      - run:
          name: Check for relevant changes
          command: |
            # Only run puppet tests for main branch, tags, or if the branch has relevant changes
            if [[ "$CIRCLE_BRANCH" != "main" ]] && [[ -z "${CIRCLE_TAG:-}" ]] && ! .circleci/scripts/changes-include deployments/puppet internal/buildscripts/packaging/tests; then
              echo "SKIP_TESTS=yes" >> $BASH_ENV
            fi
      - install_pytest
      - run:
          name: Test puppet module
          no_output_timeout: 30m
          command: |
            [[ "$SKIP_TESTS" = "yes" ]] && exit 0
            mkdir -p ~/testresults
            if [[ $CIRCLE_NODE_INDEX -eq 0 ]]; then
              PACKAGE_TYPE=deb
            else
              PACKAGE_TYPE=rpm
            fi
            pytest -n2 --verbose -m $PACKAGE_TYPE \
              --junitxml=~/testresults/results.xml \
              --html=~/testresults/results.html \
              --self-contained-html \
              internal/buildscripts/packaging/tests/deployments/puppet/puppet_test.py
      - save_pytest_results
