name: build-and-test

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - '.github/workflows/build-and-test.yml'
      - '.github/workflows/scripts/**'
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'tests/**'
      - 'Makefile'
      - 'go.mod'
      - 'go.sum'
      - '!**.md'
      - '!internal/buildscripts/packaging/tests/deployments/**'
      - '!internal/buildscripts/packaging/release/**'

concurrency:
  group: build-and-test-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  PIP_VERSION: '22.0.4'
  REQUIREMENTS_PATH: "internal/buildscripts/packaging/tests/requirements.txt"
  RESULT_PATH: "~/testresults"
  GO_VERSION: 1.19.0

jobs:
  setup-environment:
    name: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Installing dependency
        run: |
          make install-tools

  gofmt:
    name: gofmt
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: gofmt
        run: |
          make install-tools
          gofmt -s -w .
          if ! git diff --exit-code; then
            echo "One or more Go files are not formatted correctly. Run 'gofmt -s -w .' and push the changes."
            exit 1
          fi

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Lint
        run: |
          make install-tools
          make -j4 checklicense impi lint misspell
  
  test:
    name: test
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Unit tests
        run: |
          make install-tools
          mkdir -p unit-test-results/junit
          trap "go-junit-report  -set-exit-code < unit-test-results/go-unit-tests.out > unit-test-results/junit/results.xml" EXIT
          make test | tee unit-test-results/go-unit-tests.out
      
      - name: Uploading artifacts
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: ./unit-test-results

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      
      - name: Coverage tests
        run: |
          make install-tools
          make test-with-cover
      
      - name: Uploading artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results
          path: ./coverage.html

      # DISABLE CODECOV UNTIL THE SCRIPT IS AUDITED AND WE ARE CERTAIN IT IS OK TO TO EXECUTE IT.
      # - name: Code coverage
      #   run: |
      #     bash <(curl -s https://codecov.io/bash)

  cross-compile:
    name: cross-compile
    runs-on: ubuntu-latest
    needs: [setup-environment]
    strategy:
      matrix:
        SYS_BINARIES: [ "binaries-darwin_amd64", "binaries-linux_amd64", "binaries-linux_arm64", "binaries-windows_amd64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build Collector
        run: |
          make ${{ matrix.SYS_BINARIES }}
      
      - name: Uploading binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.SYS_BINARIES }}
          path: |
            ./bin/*
  
  build-package:
    name: build-package
    runs-on: ubuntu-latest
    needs: [cross-compile]
    strategy:
      matrix:
        SYS_PACKAGE: [ "deb", "rpm", "tar" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Downloading binaries-linux_amd64
        uses: actions/download-artifact@v3
        with:
          name: binaries-linux_amd64
          path: ./bin

      - name: Downloading binaries-linux_arm64
        uses: actions/download-artifact@v3
        with:
          name: binaries-linux_arm64
          path: ./bin

      - name: Build ${{ matrix.SYS_PACKAGE }} amd64 package
        run: |
          gitRef=(${GITHUB_REF//// })
          if [[ "${gitRef[1]}" = "tags" ]] ;
          then
            echo "TAG_NAME=${gitRef[2]}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=" >> $GITHUB_ENV
          fi
          make ${{ matrix.SYS_PACKAGE }}-package SKIP_COMPILE=true VERSION="${TAG_NAME:-}" ARCH="amd64"
      
      - name: Build ${{ matrix.SYS_PACKAGE }} arm64 package
        run: |
          make ${{ matrix.SYS_PACKAGE }}-package SKIP_COMPILE=true VERSION="${TAG_NAME:-}" ARCH="arm64"
      
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: v1-pytest-${{ env.PYTHON_VERSION }}-${{ hashFiles(env.REQUIREMENTS_PATH) }}

      - name: Install pytest
        run: |
          if which pip; then
              pip install --upgrade 'pip==${{ env.PIP_VERSION }}'
          else
              curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
              python get-pip.py 'pip==${{ env.PIP_VERSION }}'
          fi
          pip install -r "${{ env.REQUIREMENTS_PATH }}"
      
      - name: Test ${{ matrix.SYS_PACKAGE }} package installation
        timeout-minutes: 30
        run: |
          mkdir -p ${{ env.RESULT_PATH }}
          pytest -n2 --verbose -m ${{ matrix.SYS_PACKAGE }} \
            --junitxml=${{ env.RESULT_PATH }}/results.xml \
            --html=${{ env.RESULT_PATH }}/results.html \
            --self-contained-html \
            internal/buildscripts/packaging/tests/package_test.py
      
      - name: Uploading ${{ matrix.SYS_PACKAGE }} package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.SYS_PACKAGE }}-package
          path: ./dist

      - name: Uploading test result artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.SYS_PACKAGE }}-package-installation-test-result
          path: ${{ env.RESULT_PATH }}

  windows-msi:
    name: windows-msi
    runs-on: ubuntu-latest
    needs: [cross-compile]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Downloading binaries-windows_amd64
        uses: actions/download-artifact@v3
        with:
          name: binaries-windows_amd64
          path: ./bin

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build MSI
        run: |
          mkdir -p dist
          gitRef=(${GITHUB_REF//// })
          if [[ "${gitRef[1]}" = "tags" ]] ;
          then
            echo "TAG_NAME=${gitRef[2]}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=" >> $GITHUB_ENV
          fi
          export VERSION_TAG="${TAG_NAME#v}"
          make msi SKIP_COMPILE=true VERSION="${VERSION_TAG:-0.0.1.${{ github.run_number }}}"
      
      - name: Uploading msi build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: msi-build
          path: ./dist/*.msi

  windows-msi-validation:
    name: windows-msi-validation
    runs-on: ${{ matrix.OS }}
    needs: [windows-msi]
    strategy:
      matrix:
        OS: [ "windows-2019", "windows-2022" ]
        MODE: [ "agent", "gateway" ]
        WITH_FLUENTD: [ "true", "false" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Downloading msi build
        uses: actions/download-artifact@v3
        with:
          name: msi-build
          path: ./dist

      - name: Installation test
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSDebug -Trace 1
          $msi_path = Resolve-Path .\dist\splunk-otel-collector*.msi
          $env:VERIFY_ACCESS_TOKEN = "false"
          .\internal\buildscripts\packaging\installer\install.ps1 -access_token "testing123" -realm "test" -msi_path "$msi_path" -mode "${{ matrix.MODE }}" -with_fluentd $${{ matrix.WITH_FLUENTD }}
          Start-Sleep -s 30
          powershell.exe -File .github\workflows\scripts\win-test-services.ps1 -mode "${{ matrix.MODE }}" -with_fluentd "${{ matrix.WITH_FLUENTD }}"
          powershell.exe -File .github\workflows\scripts\win-test-support-bundle.ps1 -mode "${{ matrix.MODE }}" -with_fluentd "${{ matrix.WITH_FLUENTD }}"

  windows-choco:
    name: windows-choco
    runs-on: windows-2019
    needs: [windows-msi]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Downloading msi build
        uses: actions/download-artifact@v3
        with:
          name: msi-build
          path: ./dist

      - name: Build Chocolatey
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSDebug -Trace 1
          $msi_file_name = Resolve-Path .\dist\splunk-otel-collector*.msi | Split-Path -leaf
          if ($msi_file_name -match '(\d+\.)(\d+\.)+(\d*)') { $version = $matches[0] }
          write-host "Building choco package..."
          .\internal\buildscripts\packaging\choco\make.ps1 build_choco -Version $version | Tee-Object -file .\dist\build_logs.log
          Test-Path -Path ".\dist\splunk-otel-collector.$version.nupkg"

      - name: Uploading choco build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: choco-build
          path: ./dist/*.nupkg

  windows-choco-validation:
    name: windows-choco-validation
    runs-on: ${{ matrix.OS }}
    needs: [windows-choco]
    strategy:
      matrix:
        OS: [ "windows-2019", "windows-2022" ]
        MODE: [ "agent", "gateway" ]
        WITH_FLUENTD: [ "true", "false" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Downloading choco build
        uses: actions/download-artifact@v3
        with:
          name: choco-build
          path: ./dist

      - name: Chocolatey test
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSDebug -Trace 1
          $choco_file_name = Resolve-Path .\dist\splunk-otel-collector*.nupkg
          write-host "Installing $choco_file_name..."
          choco install splunk-otel-collector -s="$choco_file_name" --params="'/SPLUNK_ACCESS_TOKEN=12345 /SPLUNK_REALM=test /MODE:${{ matrix.MODE }} /WITH_FLUENTD:${{ matrix.WITH_FLUENTD }}'" -y
          Start-Sleep -s 30
          powershell.exe -File .github\workflows\scripts\win-test-services.ps1 -mode "${{ matrix.MODE }}" -with_fluentd "${{ matrix.WITH_FLUENTD }}"
          powershell.exe -File .github\workflows\scripts\win-test-support-bundle.ps1 -mode "${{ matrix.MODE }}" -with_fluentd "${{ matrix.WITH_FLUENTD }}"
          write-host "Reinstalling choco package..."
          choco install splunk-otel-collector -s="$choco_file_name" --params="'/MODE:${{ matrix.MODE }} /WITH_FLUENTD:${{ matrix.WITH_FLUENTD }}'" --force -y
          Start-Sleep -s 30
          powershell.exe -File .github\workflows\scripts\win-test-services.ps1 -mode "${{ matrix.MODE }}" -with_fluentd "${{ matrix.WITH_FLUENTD }}"
          write-host "Uninstalling choco package..."
          choco uninstall -y splunk-otel-collector
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) {
            write-host "splunk-otel-collector has been successfully uninstalled and service is not running."
          } else {
            throw "Failed to uninstall splunk-otel-collector chocolatey package."
          }
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) {
            write-host "fluentdwinsvc has been successfully uninstalled and service is not running."
          } else {
            throw "Failed to uninstall fluentdwinsvc."
          }

  docker-otelcol:
    name: docker-otelcol
    runs-on: ubuntu-latest
    needs: [cross-compile]
    strategy:
      matrix:
        ARCH: [ "amd64", "arm64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Set up QEMU
        if: ${{ matrix.ARCH == 'arm64'}}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Downloading binaries-linux_${{ matrix.ARCH }}
        uses: actions/download-artifact@v3
        with:
          name: binaries-linux_${{ matrix.ARCH }}
          path: ./bin
      
      - name: Build ${{ matrix.ARCH }} docker image
        run: |
          make docker-otelcol SKIP_COMPILE=true ARCH=${{ matrix.ARCH }}

      - name: Check image arch
        run: |
          # ensure that the arch in the image manifest is correct
          [ "$( docker inspect --format='{{.Architecture}}' otelcol:${{ matrix.ARCH }} )" = "${{ matrix.ARCH }}" ] || exit 1

      - name: Run docker image
        run: |
          # ensure the collector can start with the default config file
          docker run --platform linux/${{ matrix.ARCH }} -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol:${{ matrix.ARCH }}
          sleep 10
          if [ -z "$( docker ps --filter=status=running --filter=name=otelcol -q )" ]; then
            docker logs otelcol
            echo "Failing job execution: fail to start otelcol docker container with the default config in 10 seconds."
            exit 1
          fi

          # get all provided config files from the container
          tmpdir=$(mktemp -d)
          docker cp otelcol:/etc/otel/collector $tmpdir
          docker rm -f otelcol

          # ensure the collector can start with all provided config files
          configs=$(ls ${tmpdir}/collector/ 2>/dev/null)
          if [ -z "$configs" ]; then
            echo "failed to get config files from otelcol:/etc/otel/collector"
            exit 1
          fi
          for config in $configs; do
            docker run --platform linux/${{ matrix.ARCH }} -d -e SPLUNK_CONFIG=/etc/otel/collector/${config} -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol:${{ matrix.ARCH }}
            sleep 10
            if [ -z "$( docker ps --filter=status=running --filter=name=otelcol -q )" ]; then
              docker logs otelcol
              echo "Failing job execution: fail to start otelcol docker container with ${config} in 10 seconds."
              exit 1
            fi
            docker rm -f otelcol
          done

      - name: Check journalctl
        run: |
          # ensure journalctl can run with the collected libraries
          docker run --platform linux/${{ matrix.ARCH }} -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol:${{ matrix.ARCH }}
          docker exec otelcol /bin/journalctl

  docker-otelcol-windows:
    name: docker-otelcol-windows
    runs-on: windows-2019
    needs: [cross-compile]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Downloading binaries-windows_amd64
        uses: actions/download-artifact@v3
        with:
          name: binaries-windows_amd64
          path: ./bin

      - name: Build docker image
        run: |
          $ErrorActionPreference = 'Stop'
          Copy-Item .\bin\otelcol_windows_amd64.exe .\cmd\otelcol\otelcol.exe
          Copy-Item .\bin\translatesfx_windows_amd64.exe .\cmd\otelcol\translatesfx.exe
          docker build -t otelcol-windows --build-arg SMART_AGENT_RELEASE=$((Get-Content internal\buildscripts\packaging\smart-agent-release.txt).TrimStart("v")) -f .\cmd\otelcol\Dockerfile.windows .\cmd\otelcol\
          Remove-Item .\cmd\otelcol\otelcol.exe
          Remove-Item .\cmd\otelcol\translatesfx.exe
      
      - name: Run docker image
        run: |
          $ErrorActionPreference = 'Stop'
          docker run -d -e SPLUNK_ACCESS_TOKEN=12345 -e SPLUNK_REALM=fake-realm --name otelcol otelcol-windows:latest
          Start-Sleep 10
          $DockerOutput=$(docker ps --filter=status=running --filter=name=otelcol -q)
          if ( $DockerOutput -eq $null ) {
            docker logs otelcol
            echo "Failing job execution: fail to start otelcol docker container in 10 seconds."
            exit 1
          }
