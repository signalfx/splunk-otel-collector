name: build-and-test

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: build-and-test-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: 3.8.5
  PIP_VERSION: 20.2.4
  REQUIREMENTS_PATH: "internal/buildscripts/packaging/tests/requirements.txt"
  RESULT_PATH: "~/testresults"
  GO_VERSION: 1.17.2

jobs:
  setup-environment:
    name: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Installing dependency
        run: |
          make install-tools
  
  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Lint
        run: |
          make -j4 checklicense impi lint misspell
  
  test:
    name: test
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Unit tests
        run: |
          mkdir -p unit-test-results/junit
          trap "go-junit-report  -set-exit-code < unit-test-results/go-unit-tests.out > unit-test-results/junit/results.xml" EXIT
          make test | tee unit-test-results/go-unit-tests.out
      
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-results
          path: ./unit-test-results

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs: [setup-environment]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      
      - name: Coverage tests
        run: |
          make test-with-cover
      
      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: ./coverage.html

      # DISABLE CODECOV UNTIL THE SCRIPT IS AUDITED AND WE ARE CERTAIN IT IS OK TO TO EXECUTE IT.
      # - name: Code coverage
      #   run: |
      #     bash <(curl -s https://codecov.io/bash)

  cross-compile:
    name: cross-compile
    runs-on: ubuntu-latest
    needs: [setup-environment]
    strategy:
      matrix:
        SYS_BINARIES: [ "binaries-darwin_amd64", "binaries-linux_amd64", "binaries-linux_arm64", "binaries-windows_amd64" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build Collector
        run: |
          make ${{ matrix.SYS_BINARIES }}
      
      - name: Updating binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.SYS_BINARIES }}
          path: |
            ./bin/*

  windows-msi:
    name: windows-msi
    runs-on: ubuntu-latest
    needs: [cross-compile]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading binaries-windows_amd64
        uses: actions/download-artifact@v2
        with:
          name: binaries-windows_amd64
          path: ./bin

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build MSI
        run: |
          mkdir -p dist
          gitRef=(${GITHUB_REF//// })
          if [[ "${gitRef[1]}" = "tags" ]] ;
          then
            echo "TAG_NAME=${gitRef[2]}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=" >> $GITHUB_ENV
          fi
          export VERSION_TAG="${TAG_NAME#v}"
          make msi SKIP_COMPILE=true VERSION="${VERSION_TAG:-0.0.1.${{ github.run_number }}}"
      
      - name: Uploading msi build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: msi-build
          path: ./dist/*.msi

  windows-msi-validation:
    name: windows-msi-validation
    runs-on: windows-latest
    needs: [windows-msi]
    strategy:
      matrix:
        MODE: [ "agent", "gateway" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading msi build
        uses: actions/download-artifact@v2
        with:
          name: msi-build
          path: ./dist

      - name: Installation test
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSDebug -Trace 1
          $msi_path = Resolve-Path .\dist\splunk-otel-collector*.msi
          $env:VERIFY_ACCESS_TOKEN = "false"
          .\internal\buildscripts\packaging\installer\install.ps1 -access_token "testing123" -msi_path "$msi_path" -mode "${{ matrix.MODE }}"
          Start-Sleep -s 30
          Set-Location -Path "$env:ProgramFiles\Splunk\OpenTelemetry Collector"
          Test-Path -Path ".\splunk-support-bundle.ps1"
          Start-Process ".\otelcol.exe" -WindowStyle Hidden
          powershell.exe -File "$env:ProgramFiles\Splunk\OpenTelemetry Collector\splunk-support-bundle.ps1" -t \tmp\splunk-support-bundle
          Test-Path -Path ".\splunk-support-bundle.zip"
          Test-Path -Path "\tmp\splunk-support-bundle\logs\splunk-otel-collector.log"
          Test-Path -Path "\tmp\splunk-support-bundle\logs\splunk-otel-collector.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\logs\td-agent.log"
          Test-Path -Path "\tmp\splunk-support-bundle\logs\td-agent.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\metrics\collector-metrics.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\metrics\df.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\metrics\free.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\metrics\top.txt"
          Test-Path -Path "\tmp\splunk-support-bundle\zpages\tracez.html"
          if ( "${{ matrix.MODE }}" -eq "agent" ) {
            Test-Path -Path "\tmp\splunk-support-bundle\config\td-agent\td-agent.conf"
            Test-Path -Path "\tmp\splunk-support-bundle\config\agent_config.yaml"
          }
          if ( "${{ matrix.MODE }}" -eq "gateway" ) {
            Test-Path -Path "\tmp\splunk-support-bundle\config\gateway_config.yaml"
          }

  windows-choco-validation:
    name: windows-choco-validation
    runs-on: windows-latest
    needs: [windows-msi]
    strategy:
      matrix:
        MODE: [ "agent", "gateway" ]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading msi build
        uses: actions/download-artifact@v2
        with:
          name: msi-build
          path: ./dist

      - name: Chocolatey test
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSDebug -Trace 1
          $msi_file_name = Resolve-Path .\dist\splunk-otel-collector*.msi | Split-Path -leaf
          if ($msi_file_name -match '(\d+\.)(\d+\.)+(\d*)') { $version = $matches[0] }
          write-host "Building choco package..."
          .\internal\buildscripts\packaging\choco\make.ps1 build_choco -Version $version | Tee-Object -file .\dist\build_logs.log
          Test-Path -Path ".\dist\splunk-otel-collector.$version.nupkg"
          write-host "Installing choco package..."
          choco install splunk-otel-collector -s=".\dist\splunk-otel-collector.$version.nupkg" --params="'/SPLUNK_ACCESS_TOKEN=12345 /MODE:${{ matrix.MODE }}'" -y | Tee-Object -file .\dist\installation_logs.log
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { throw "Failed to install splunk-otel-collector using chocolatey." } else { write-host "splunk-otel-collector service is running." }
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { throw "Failed to install fluentdwinsvc using chocolatey." } else { write-host "fluentdwinsvc service is running." }
          write-host "Reinstalling choco package..."
          choco install splunk-otel-collector -s=".\dist\splunk-otel-collector.$version.nupkg" --params="'/MODE:${{ matrix.MODE }}'" --force -y | Tee-Object -file .\dist\reinstallation_logs.log
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { throw "Failed to install splunk-otel-collector using chocolatey." } else { write-host "splunk-otel-collector service is running." }
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { throw "Failed to install fluentdwinsvc using chocolatey." } else { write-host "fluentdwinsvc service is running." }
          write-host "Uninstalling choco package..."
          choco uninstall -y splunk-otel-collector | Tee-Object -file .\dist\uninstallation_logs.log
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'splunk-otel-collector'" | Select Name, State).State -Eq "Running")) { write-host "splunk-otel-collector has been successfully uninstalled and service is not running." } else { throw "Failed to uninstall splunk-otel-collector chocolatey package." }
          if (!((Get-CimInstance -ClassName win32_service -Filter "Name = 'fluentdwinsvc'" | Select Name, State).State -Eq "Running")) { write-host "fluentdwinsvc has been successfully uninstalled and service is not running." } else { throw "Failed to uninstall fluentdwinsvc chocolatey package." }
