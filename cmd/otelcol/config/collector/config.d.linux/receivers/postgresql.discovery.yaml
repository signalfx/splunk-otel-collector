#####################################################################################
# This file is generated by the Splunk Distribution of the OpenTelemetry Collector. #
#                                                                                   #
# It reflects the default configuration bundled in the Collector executable for use #
# in discovery mode (--discovery) and is provided for reference or customization.   #
# Please note that any changes made to this file will need to be reconciled during  #
# upgrades of the Collector.                                                        #
#####################################################################################
# postgresql:
#   enabled: true
#   rule:
#     docker_observer: type == "container" and any([name, image, command], {# matches "(?i)postgres"}) and not (command matches "splunk.discovery")
#     host_observer: type == "hostport" and command matches "(?i)postgres" and not (command matches "splunk.discovery")
#     k8s_observer: type == "port" and pod.name matches "(?i)postgres"
#   config:
#     default:
#         username: splunk.discovery.default
#         password: splunk.discovery.default
#   status:
#     metrics:
#       successful:
#         - strict: postgresql.commits
#           first_only: true
#           log_record:
#             severity_text: info
#             body: PostgreSQL receiver is working!
#     statements:
#       failed:
#         - regexp: 'connect: network is unreachable'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: The container cannot be reached by the Collector. Make sure they're in the same network.
#         - regexp: 'connect: connection refused'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: The container is refusing PostgreSQL connections.
#       partial:
#         - regexp: 'pq: password authentication failed for user'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: >-
#               Please ensure your user credentials are correctly specified with
#               `--set splunk.discovery.receivers.postgresql.config.username="<username>"` and
#               `--set splunk.discovery.receivers.postgresql.config.password="<password>"` or
#               `SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_username="<username>"` and
#               `SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_password="<password>"` environment variables.
#         - regexp: 'pq: database .* does not exist'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: >-
#               Make sure the target database is correctly specified using the
#               `--set splunk.discovery.receivers.postgresql.config.databases="[<db>]"` command or the
#               `SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_databases="[<db>]"` environment variable.
#         - regexp: 'pq: SSL is not enabled on the server'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: >-
#               Make sure the target database has SSL enabled or set insecure using the
#               `--set splunk.discovery.receivers.postgresql.config.tls::insecure="<boolean>"` command or the
#               `SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_tls_x3a__x3a_insecure="<boolean>"` environment variable.
#         - regexp: 'pq: pg_stat_statements must be loaded via shared_preload_libraries'
#           first_only: true
#           log_record:
#             severity_text: info
#             append_pattern: true
#             body: >-
#               Make sure your PostgreSQL database has
#               `shared_preload_libraries = 'pg_stat_statements'`
#               in the postgresql.conf file and that
#               `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
#               has been run for each database you would like to monitor.
#               For example:
#               `psql --dbname "<db-name>" -c "CREATE EXTENSION pg_stat_statements;"`
