#####################################################################################
# This file is generated by the Splunk Distribution of the OpenTelemetry Collector. #
#                                                                                   #
# It reflects the default configuration bundled in the Collector executable for use #
# in discovery mode (--discovery) and is provided for reference or customization.   #
# Please note that any changes made to this file will need to be reconciled during  #
# upgrades of the Collector.                                                        #
#####################################################################################
# smartagent/postgresql:
#   enabled: false
#   rule:
#     docker_observer: type == "container" and any([name, image, command], {# matches "(?i)postgres"}) and not (command matches "splunk.discovery")
#     host_observer: type == "hostport" and command matches "(?i)postgres" and not (command matches "splunk.discovery")
#     k8s_observer: type == "port" and pod.name matches "(?i)postgres"
#   config:
#     default:
#       type: postgresql
#       connectionString: 'sslmode=disable user={{.username}} password={{.password}}'
#       params:
#         username: splunk.discovery.default
#         password: splunk.discovery.default
#       masterDBName: splunk.discovery.default
#   status:
#     metrics:
#       - status: successful
#         strict: postgres_query_count
#         log_record:
#           body: PostgreSQL receiver is working!
#       - status: partial
#         strict: postgres_rows_inserted
#         log_record:
#           body: >-
#             Make sure that
#             `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
#             has been run for each database you would like to monitor.
#             For example:
#             `psql --dbname "<db-name>" -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"`
#     statements:
#       - status: failed
#         regexp: 'connect: network is unreachable'
#         log_record:
#           append_pattern: true
#           body: The container cannot be reached by the Collector. Make sure they're in the same network.
#       - status: failed
#         regexp: 'connect: connection refused'
#         log_record:
#           append_pattern: true
#           body: The container is refusing PostgreSQL connections.
#       - status: partial
#         regexp: 'pq: password authentication failed for user'
#         log_record:
#           append_pattern: true
#           body: >-
#             Please ensure your user credentials are correctly specified with
#             `--set splunk.discovery.receivers.smartagent/postgresql.config.params::username="<username>"` and
#             `--set splunk.discovery.receivers.smartagent/postgresql.config.params::password="<password>"` or
#             `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_params_x3a__x3a_username="<username>"` and
#             `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_params_x3a__x3a_password="<password>"` environment variables.
#       - status: partial
#         regexp: 'pq: database .* does not exist'
#         log_record:
#           append_pattern: true
#           body: >-
#             Make sure the target database is correctly specified using the
#             `--set splunk.discovery.receivers.smartagent/postgresql.config.masterDBName="<db>"` command or the
#             `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_masterDBName="<db>"` environment variable.
#       - status: partial
#         regexp: 'pq: pg_stat_statements must be loaded via shared_preload_libraries'
#         log_record:
#           append_pattern: true
#           body: >-
#             Make sure your PostgreSQL database has
#             `shared_preload_libraries = 'pg_stat_statements'`
#             in the postgresql.conf file and that
#             `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
#             has been run for each database you would like to monitor.
#             For example:
#             `psql --dbname "<db-name>" -c "CREATE EXTENSION pg_stat_statements;"`
