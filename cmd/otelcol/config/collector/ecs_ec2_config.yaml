# This collector config file is designed for use within an ECS task.
# The collector should run in a sidecar container within an ECS task.
config_sources:
  env:
    defaults:
      METRICS_TO_EXCLUDE: []
      ECS_METADATA_EXCLUDED_IMAGES: []

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  http_forwarder:
    ingress:
      endpoint: 0.0.0.0:6060
    egress:
      endpoint: "https://api.${SPLUNK_REALM}.signalfx.com"
  zpages:
    endpoint: 0.0.0.0:55679
  memory_ballast:
    # In general, the ballast should be set to 1/3 of the collector's memory, the limit
    # should be 90% of the collector's memory.
    # The simplest way to specify the ballast size is set the value of SPLUNK_BALLAST_SIZE_MIB env variable.
    size_mib: ${SPLUNK_BALLAST_SIZE_MIB}

receivers:
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      filesystem:
      memory:
      network:
      # System load average metrics https://en.wikipedia.org/wiki/Load_(computing)
      load:
      # Paging/Swap space utilization and I/O metrics
      paging:
      # Aggregated system process count metrics
      processes:
      # System processes metrics, disabled by default
      # process:
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:55681
  # This section is used to collect the OpenTelemetry Collector metrics
  # Even if just a Splunk APM customer, these metrics are included
  prometheus/internal:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '.*grpc_io.*'
              action: drop
  signalfx:
    endpoint: 0.0.0.0:9943
    # Whether to preserve incoming access token and use instead of exporter token
    # default = false
    #access_token_passthrough: true
  zipkin:
    endpoint: 0.0.0.0:9411
  smartagent/signalfx-forwarder:
    type: signalfx-forwarder
    listenAddress: 0.0.0.0:9080
  smartagent/ecs-metadata:
    type: ecs-metadata
    metadataEndpoint: "${ECS_TASK_METADATA_ENDPOINT}"
    statsEndpoint: "${ECS_TASK_STATS_ENDPOINT}"
    excludedImages: $${env:ECS_METADATA_EXCLUDED_IMAGES}

processors:
  batch:
  # Enabling the memory_limiter is strongly recommended for every pipeline.
  # Configuration is based on the amount of memory allocated to the collector.
  # For more information about memory limiter, see
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiter/README.md
  memory_limiter:
    check_interval: 2s
    limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
  # detect if the collector is running on a cloud system
  # important for creating unique cloud provider dimensions
  resourcedetection:
    detectors: [ecs]
    override: false
  # Same as above but overrides resource attributes set by receivers
  resourcedetection/internal:
    detectors: [ecs]
    override: true
  # Enables the filter processor with example settings
  # Full configuration here: https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/filterprocessor
  # NOTE: These settings need to be change when using this processor
  filter/1:
    metrics:
      exclude:
        match_type: regexp
        metric_names: $${env:METRICS_TO_EXCLUDE}
#  # Optional: The following processor can be used to add a default "deployment.environment" attribute to the logs and
#  # traces when it's not populated by instrumentation libraries.
#  # If enabled, make sure to enable this processor in the pipeline below.
#  resource/add_environment:
#    attributes:
#      - action: insert
#        value: staging/production/...
#        key: deployment.environment

exporters:
  # Traces
  sapm:
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    endpoint: "https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace"
  # Metrics + Events
  signalfx:
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    realm: "${SPLUNK_REALM}"
    correlation:
#  # Logs
#  splunk_hec:
#    token: "${SPLUNK_HEC_TOKEN}"
#    endpoint: "${SPLUNK_HEC_URL}"
#    source: "otel"
#    sourcetype: "otel"

service:
  extensions: [health_check, http_forwarder, zpages, memory_ballast]
  pipelines:
    traces:
      receivers: [jaeger, otlp, zipkin, smartagent/signalfx-forwarder]
      processors:
        - memory_limiter
        - batch
        - resourcedetection
      #        - resource/add_environment
      exporters: [sapm, signalfx]
    metrics:
      receivers: [hostmetrics, signalfx, smartagent/signalfx-forwarder, smartagent/ecs-metadata]
      processors: [memory_limiter, batch, resourcedetection]
      exporters: [signalfx]
    metrics/internal:
      receivers: [prometheus/internal]
      processors: [memory_limiter, batch, resourcedetection/internal]
      exporters: [signalfx]
#    logs:
#      receivers: [otlp]
#      processors:
#        - memory_limiter
#        - batch
#        - resourcedetection
#      #- resource/add_environment
#      exporters: [splunk_hec]
#      # Use instead when sending to gateway
#      #exporters: [otlp]


