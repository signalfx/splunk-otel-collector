// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package translatesfx

import (
	"fmt"
	"log"
	"os"

	"gopkg.in/yaml.v2"
)

const header = `# Generated by 'translatesfx'. This tool is currently experimental. Please
# verify config before attempting to use in production.
`

// CLI is the entry point for the translatecfg command.
func CLI(args []string) {
	config, warnings := translateConfig(paths(args))
	fmt.Print(warningsToString(warnings))
	fmt.Print(config)
}

func warningsToString(warnings []error) string {
	if warnings == nil {
		return ""
	}
	out := "# The following issues were found while translating the Smart Agent config:\n"
	for _, warning := range warnings {
		out += fmt.Sprintf("# %s\n", warning)
	}
	return out
}

// paths returns two arguments from the command line args: cfgFname is the path
// to the Smart Agent config that is being translated and wd is the working
// directory used to evaluate file paths found in the Smart Agent config
func paths(args []string) (cfgFname string, wd string) {
	switch len(args) {
	case 2:
		wd, err := os.Getwd()
		if err != nil {
			log.Fatalf("error getting working directory: %v", err)
		}
		return args[1], wd
	case 3:
		return args[1], args[2]
	default:
		log.Fatal("usage: translatesacfg <path/to/smart/agent/config.yaml>")
	}
	return
}

// translateConfig takes a Smart Agent config file path and a working directory,
// then prints a translated Otel configuration to stdout.
func translateConfig(fname, wd string) (configYaml string, warnings []error) {
	orig, err := loadCfg(fname)
	if err != nil {
		log.Fatalf("error loading config %q: %v", fname, err)
	}
	saExpanded, vaultPaths, err := expandSA(orig, wd)
	if err != nil {
		log.Fatalf("error expanding Smart Agent config: %v", err)
	}
	saInfo := saExpandedToCfgInfo(saExpanded)
	oc, warnings := saInfoToOtelConfig(saInfo, vaultPaths)

	bytes, err := yaml.Marshal(oc)
	if err != nil {
		log.Fatalf("error marshaling config: %v", err)
	}

	return header + string(bytes), warnings
}

func loadCfg(fname string) (interface{}, error) {
	bytes, err := os.ReadFile(fname)
	if err != nil {
		return nil, err
	}
	var orig interface{}
	err = yaml.UnmarshalStrict(bytes, &orig)
	return orig, err
}
