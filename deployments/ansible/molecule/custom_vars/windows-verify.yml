---
- name: Verify scenario with custom variables
  hosts: all
  gather_facts: true
  become: no
  vars:
    reg_values:
      SPLUNK_CONFIG: '{{ ansible_env.ProgramData }}\Splunk\OpenTelemetry Collector\custom_config.yml'
      SPLUNK_INGEST_URL: https://fake-splunk-ingest.com
      SPLUNK_API_URL: https://fake-splunk-api.com
      SPLUNK_TRACE_URL: https://fake-splunk-ingest.com/v2/trace
      SPLUNK_HEC_URL: https://fake-splunk-hec.com
      SPLUNK_HEC_TOKEN: fake-hec-token
      SPLUNK_MEMORY_TOTAL_MIB: "256"
      SPLUNK_BALLAST_SIZE_MIB: "100"
      MY_CUSTOM_VAR1: value1
      MY_CUSTOM_VAR2: value2
      SIGNALFX_DOTNET_TRACER_HOME: '{{ ansible_env.ProgramFiles }}\SignalFx\.NET Tracing\'
    dotnet_reg_values:
      COR_ENABLE_PROFILING: "true"
      COR_PROFILER: "{B4C89B0F-9908-4F73-9F59-0D77C5A06874}"
      CORECLR_ENABLE_PROFILING: "true"
      CORECLR_PROFILER: "{B4C89B0F-9908-4F73-9F59-0D77C5A06874}"
      SIGNALFX_ENV: test-environment
      SIGNALFX_SERVICE_NAME: test-service-name
      SIGNALFX_PROFILER_ENABLED: "true"
      SIGNALFX_PROFILER_MEMORY_ENABLED: "true"
      SIGNALFX_DOTNET_VAR1: dotnet-value1
      SIGNALFX_DOTNET_VAR2: dotnet-value2
  tasks:
    - name: Check splunk-otel-collector service
      ansible.windows.win_service:
        name: splunk-otel-collector
        state: started
      check_mode: yes
      register: service_status

    - name: Assert splunk-otel-collector service status
      assert:
        that: not service_status.changed

    - name: Check fluentdwinsvc service
      ansible.windows.win_service:
        name: fluentdwinsvc
        state: started
      check_mode: yes
      register: service_status

    - name: Assert fluentdwinsvc service status
      assert:
        that: not service_status.changed

    - name: Download splunk-otel-collector 0.48.0 MSI
      ansible.windows.win_get_url:
        url: https://dl.signalfx.com/splunk-otel-collector/msi/release/splunk-otel-collector-0.48.0-amd64.msi
        dest: "{{ansible_env.TEMP}}"
      register: otel_msi_package

    - name: Install splunk-otel-collector 0.48.0 MSI
      ansible.windows.win_package:
        path: "{{otel_msi_package.dest}}"
        state: present
      check_mode: yes
      register: msi_installed

    - name: Assert splunk-otel-collector 0.48.0 MSI is already installed
      assert:
        that: not msi_installed.changed

    - name: Check custom_config.yml
      ansible.windows.win_stat:
        path: '{{ansible_env.ProgramData}}\Splunk\OpenTelemetry Collector\custom_config.yml'
      register: custom_collector_config

    - name: Assert custom_config.yml exists
      assert:
        that: custom_collector_config.stat.exists

    - name: Check fluentd custom_config.conf
      ansible.windows.win_stat:
        path: '{{ansible_env.ProgramFiles}}\Splunk\OpenTelemetry Collector\fluentd\custom_config.conf'
        get_checksum: yes
      register: custom_fluentd_config

    - name: Assert fluentd custom_config.conf exists
      assert:
        that: custom_fluentd_config.stat.exists

    - name: Check td-agent.conf exists
      ansible.windows.win_stat:
        path: '{{ansible_env.SystemDrive}}\opt\td-agent\etc\td-agent\td-agent.conf'
        get_checksum: yes
      register: td_agent_config

    - name: Assert fluentd custom_config.conf is used
      assert:
        that: custom_fluentd_config.stat.checksum == td_agent_config.stat.checksum

    - name: Download signalfx-dotnet-tracing-1.0.0-x64.msi
      ansible.windows.win_get_url:
        url: "https://github.com/signalfx/signalfx-dotnet-tracing/releases/download/\
              v1.0.0/signalfx-dotnet-tracing-1.0.0-x64.msi"
        dest: "{{ansible_env.TEMP}}"
      register: dotnet_msi_package

    - name: Install signalfx-dotnet-tracing-1.0.0-x64.msi
      ansible.windows.win_package:
        path: "{{dotnet_msi_package.dest}}"
        state: present
      check_mode: yes
      register: msi_installed

    - name: Assert signalfx-dotnet-tracing-1.0.0-x64.msi is already installed
      assert:
        that: not msi_installed.changed

    - name: Get IIS env vars
      ansible.windows.win_reg_stat:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\W3SVC
        name: Environment
      register: iis_env

    - name: Verify IIS env vars
      assert:
        that: (item.key + '=' + item.value) in iis_env.value
      loop: "{{ dotnet_reg_values | dict2items }}"

    - name: Verify env vars
      include_tasks: ../shared/verify_registry_key.yml
      vars:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment
        name: "{{ item.key }}"
        value: "{{ item.value }}"
      loop: "{{ reg_values | combine(dotnet_reg_values) | dict2items }}"
