# Copyright Splunk Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/bin/bash

set -euo pipefail
set -x

# This script is used to create a Bosh release of the Splunk distribution of the OpenTelemetry Collector.
# This is intended to be run by the Pivotal Cloud Foundry (PCF) tile. The PCF tile should specify
# proper variables as described below.

# Variables:
# - OTEL_VERSION: Version of the Splunk OpenTelemetry Collector to deploy as a part of this release.
#   Default: "latest". Valid version must be >=0.48.0.

# - BOSH_RELEASE_VERSION: Version of the Bosh release being created. Defaults to 0 if not specified, so any release
#   except the first should have a pre-set value.

# - IS_DEV_RELEASE: Boolean (int), creates the release locally if true, allows this script to be used
#   in development. Default: 0.

# - UPLOAD_RELEASE: Boolean (int), uploads release to bosh director if true. This is mainly used by
#   GitHub's workflow for testing. Default: 1.

OTEL_VERSION=${OTEL_VERSION:-latest}
BOSH_RELEASE_VERSION=${BOSH_RELEASE_VERSION:-0}
IS_DEV_RELEASE=${IS_DEV_RELEASE:-0}
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
UPLOAD_RELEASE=${UPLOAD_RELEASE:-1}

# OS should match CF environment
OS="linux_amd64"
OTEL_BINARY="splunk_otel_collector"

if [ $OTEL_VERSION = "latest" ]; then
        OTEL_VERSION=$( curl "https://api.github.com/repos/signalfx/splunk-otel-collector/tags" | jq -r '[.[].name | select(test("v[0-9]+\\.[0-9]+\\.[0-9]+$")) | sub("^v"; "")] | sort_by(split(".") | map(tonumber)) | last | "v" + .' )
        if [ -z "$OTEL_VERSION" ]; then
            echo "Failed to get tag_name for latest release from $OTEL_VERSION/latest" >&2
            exit 1
        fi
fi

OTEL_BINARY_DOWNLOAD_URL=https://github.com/signalfx/splunk-otel-collector/releases/download/${OTEL_VERSION}/otelcol_${OS}

# Download Splunk's distribution of the OpenTelemetry Collector
wget -nv -O "$SCRIPT_DIR/$OTEL_BINARY" $OTEL_BINARY_DOWNLOAD_URL

bosh init-release
# blobs are the way Bosh releases handle external dependencies.
bosh add-blob ${SCRIPT_DIR}/${OTEL_BINARY} ${OTEL_BINARY}/${OTEL_BINARY}

if (( IS_DEV_RELEASE ))
then
  # Release name will be "bosh" in development, so the deployment.yaml file will need to reference this.
  bosh create-release --force
  if (( UPLOAD_RELEASE ))
  then
    bosh upload-release
  fi
else
  # If we're doing an official release we want to delete dev releases, and create a tarball of the release
  # to be used by the tile.
  rm -rf $SCRIPT_DIR/.dev_builds $SCRIPT_DIR/dev_releases
  bosh create-release --force --version ${OTEL_VERSION}-${BOSH_RELEASE_VERSION} --tarball ./latest-release.tgz --name splunk-otel-collector
  rm -rf $SCRIPT_DIR/splunk_otel_collector
fi
