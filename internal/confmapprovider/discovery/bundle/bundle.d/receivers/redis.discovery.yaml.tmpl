{{ receiver "oracledb" }}:
  enabled: true
  rule:
    docker_observer: type == "container" and any([name, image, command], {# matches "(?i)redis"}) and not (command matches "splunk.discovery")
    host_observer: type == "hostport" and command matches "(?i)redis" and not (command matches "splunk.discovery")
    k8s_observer: type == "port" and pod.name matches "(?i)redis"
  config:
    default:
      endpoint: {{ defaultValue }}
  status:
    metrics:
      successful:
        - strict: redis.uptime
          first_only: true
          log_record:
            severity_text: info
            body: redis receiver is working!
    statements:
      failed:
        - regexp: "connection refused"
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: The container is not serving http connections.
        - regexp: "received goaway and there are no active streams"
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: Unable to connect and scrape metrics.
        - regexp: "dial tcp: lookup"
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: Unable to resolve oracledb tcp endpoint
      partial:
        - regexp: "listener does not currently know of service requested"
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: >-
              Make sure your oracledb service is correctly specified using the
              `--set {{ configProperty "service" "<service>" }}` command or the
              `{{ configPropertyEnvVar "service" "<service>" }}` environment variable. 
        - regexp: 'invalid username/password'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: >-
              Make sure your user credentials are correctly specified using the
              `--set {{ configProperty "username" "<username>" }}` and
              `--set {{ configProperty "password" "<password>" }}` command or the
              `{{ configPropertyEnvVar "username" "<username>" }}` and
              `{{ configPropertyEnvVar "password" "<password>" }}` environment variables.
              