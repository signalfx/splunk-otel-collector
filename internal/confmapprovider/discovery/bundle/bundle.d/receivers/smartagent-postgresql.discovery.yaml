#####################################################################################
#                               Do not edit manually!                               #
# All changes must be made to associated .tmpl file before running 'make bundle.d'. #
#####################################################################################
smartagent/postgresql:
  enabled: true
  rule:
    docker_observer: type == "container" and any([name, image, command], {# matches "(?i)postgres"}) and not (command matches "splunk.discovery")
    host_observer: type == "hostport" and command matches "(?i)postgres" and not (command matches "splunk.discovery")
    k8s_observer: type == "port" and pod.name matches "(?i)postgres"
  config:
    default:
      type: postgresql
      connectionString: 'sslmode=disable user={{.username}} password={{.password}}'
      params:
        username: splunk.discovery.default
        password: splunk.discovery.default
      masterDBName: splunk.discovery.default
  status:
    metrics:
      successful:
        - strict: postgres_query_count
          first_only: true
          log_record:
            severity_text: info
            body: PostgreSQL receiver is working!
      partial:
        - strict: postgres_rows_inserted
          first_only: true
          log_record:
            severity_text: info
            body: >-
              Make sure that
              `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
              has been run for each database you would like to monitor.
              For example:
              `psql --dbname "<db-name>" -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"`
    statements:
      failed:
        - regexp: 'connect: network is unreachable'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: The container cannot be reached by the Collector. Make sure they're in the same network.
        - regexp: 'connect: connection refused'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: The container is refusing PostgreSQL connections.
      partial:
        - regexp: 'pq: password authentication failed for user'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: >-
              Please ensure your user credentials are correctly specified with
              `--set splunk.discovery.receivers.smartagent/postgresql.config.params::username="<username>"` and
              `--set splunk.discovery.receivers.smartagent/postgresql.config.params::password="<password>"` or
              `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_params_x3a__x3a_username="<username>"` and
              `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_params_x3a__x3a_password="<password>"` environment variables.
        - regexp: 'pq: database .* does not exist'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: >-
              Make sure the target database is correctly specified using the
              `--set splunk.discovery.receivers.smartagent/postgresql.config.masterDBName="<db>"` command or the
              `SPLUNK_DISCOVERY_RECEIVERS_smartagent_x2f_postgresql_CONFIG_masterDBName="<db>"` environment variable.
        - regexp: 'pq: pg_stat_statements must be loaded via shared_preload_libraries'
          first_only: true
          log_record:
            severity_text: info
            append_pattern: true
            body: >-
              Make sure your PostgreSQL database has
              `shared_preload_libraries = 'pg_stat_statements'`
              in the postgresql.conf file and that
              `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
              has been run for each database you would like to monitor.
              For example:
              `psql --dbname "<db-name>" -c "CREATE EXTENSION pg_stat_statements;"`
