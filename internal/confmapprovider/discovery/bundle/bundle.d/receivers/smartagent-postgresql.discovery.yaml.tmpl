{{ receiver "smartagent/postgresql" }}:
  enabled: false
  rule:
    docker_observer: type == "container" and any([name, image, command], {# matches "(?i)postgres"}) and not (command matches "splunk.discovery")
    host_observer: type == "hostport" and command matches "(?i)postgres" and not (command matches "splunk.discovery")
    k8s_observer: type == "port" and pod.name matches "(?i)postgres"
  config:
    default:
      type: postgresql
      connectionString: 'sslmode=disable user={{ "{{.username}}" }} password={{ "{{.password}}" }}'
      params:
        username: {{ defaultValue }}
        password: {{ defaultValue }}
      masterDBName: {{ defaultValue }}
  status:
    metrics:
      - status: successful
        strict: postgres_query_count
        message: PostgreSQL receiver is working!
      - status: partial
        strict: postgres_rows_inserted
        message: >-
          Make sure that
          `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
          has been run for each database you would like to monitor.
          For example:
          `psql --dbname "<db-name>" -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"`
    statements:
      - status: failed
        regexp: 'connect: network is unreachable'
        message: The container cannot be reached by the Collector. Make sure they're in the same network.
      - status: failed
        regexp: 'connect: connection refused'
        message: The container is refusing PostgreSQL connections.
      - status: partial
        regexp: 'pq: password authentication failed for user'
        message: >-
          Please ensure your user credentials are correctly specified with
          `{{ configPropertyEnvVar "params" "username" "<username>" }}` and
          `{{ configPropertyEnvVar "params" "password" "<password>" }}` environment variables.
      - status: partial
        regexp: 'pq: database .* does not exist'
        message: >-
          Make sure the target database is correctly specified using the
          `{{ configPropertyEnvVar "masterDBName" "<db>" }}` environment variable.
      - status: partial
        regexp: 'pq: pg_stat_statements must be loaded via shared_preload_libraries'
        message: >-
          Make sure your PostgreSQL database has
          `shared_preload_libraries = 'pg_stat_statements'`
          in the postgresql.conf file and that
          `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;`
          has been run for each database you would like to monitor.
          For example:
          `psql --dbname "<db-name>" -c "CREATE EXTENSION pg_stat_statements;"`
