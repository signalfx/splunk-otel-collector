// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "databricksreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	DatabricksJobsActiveTotal     MetricIntf
	DatabricksJobsRunDuration     MetricIntf
	DatabricksJobsScheduleStatus  MetricIntf
	DatabricksJobsTotal           MetricIntf
	DatabricksTasksRunDuration    MetricIntf
	DatabricksTasksScheduleStatus MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"databricks.jobs.active.total",
		"databricks.jobs.run.duration",
		"databricks.jobs.schedule.status",
		"databricks.jobs.total",
		"databricks.tasks.run.duration",
		"databricks.tasks.schedule.status",
	}
}

var metricsByName = map[string]MetricIntf{
	"databricks.jobs.active.total":     Metrics.DatabricksJobsActiveTotal,
	"databricks.jobs.run.duration":     Metrics.DatabricksJobsRunDuration,
	"databricks.jobs.schedule.status":  Metrics.DatabricksJobsScheduleStatus,
	"databricks.jobs.total":            Metrics.DatabricksJobsTotal,
	"databricks.tasks.run.duration":    Metrics.DatabricksTasksRunDuration,
	"databricks.tasks.schedule.status": Metrics.DatabricksTasksScheduleStatus,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"databricks.jobs.active.total",
		func(metric pdata.Metric) {
			metric.SetName("databricks.jobs.active.total")
			metric.SetDescription("A snapshot of the number of active jobs taken at each scrape")
			metric.SetUnit("{jobs}")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"databricks.jobs.run.duration",
		func(metric pdata.Metric) {
			metric.SetName("databricks.jobs.run.duration")
			metric.SetDescription("The execution duration in milliseconds per completed job")
			metric.SetUnit("ms")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"databricks.jobs.schedule.status",
		func(metric pdata.Metric) {
			metric.SetName("databricks.jobs.schedule.status")
			metric.SetDescription("A snapshot of the pause/run status per job taken at each scrape")
			metric.SetUnit("{status}")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"databricks.jobs.total",
		func(metric pdata.Metric) {
			metric.SetName("databricks.jobs.total")
			metric.SetDescription("A snapshot of the total number of jobs registered in the Databricks instance taken at each scrape")
			metric.SetUnit("{jobs}")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"databricks.tasks.run.duration",
		func(metric pdata.Metric) {
			metric.SetName("databricks.tasks.run.duration")
			metric.SetDescription("The execution duration in milliseconds per completed task")
			metric.SetUnit("ms")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
	&metricImpl{
		"databricks.tasks.schedule.status",
		func(metric pdata.Metric) {
			metric.SetName("databricks.tasks.schedule.status")
			metric.SetDescription("A snapshot of the pause/run status per task taken at each scrape")
			metric.SetUnit("{status}")
			metric.SetDataType(pdata.MetricDataTypeGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// DatabricksInstanceName (The name of the Databricks instance as defined by the value of the "instance_name" field in the config)
	DatabricksInstanceName string
	// JobID (The numeric ID of the Databricks job)
	JobID string
	// TaskID (The name of the Databricks task)
	TaskID string
	// TaskType (The type of the Databricks task)
	TaskType string
}{
	"databricks.instance.name",
	"job_id",
	"task_id",
	"task_type",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeTaskType are the possible values that the attribute "task_type" can have.
var AttributeTaskType = struct {
	NotebookTask    string
	SparkJarTask    string
	SparkPythonTask string
	PipelineTask    string
	PythonWheelTask string
	SparkSubmitTask string
}{
	"NotebookTask",
	"SparkJarTask",
	"SparkPythonTask",
	"PipelineTask",
	"PythonWheelTask",
	"SparkSubmitTask",
}
