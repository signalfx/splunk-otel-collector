// Copyright Splunk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by discoverybundler. DO NOT EDIT.

package discoveryreceiver

// receiverMetaMap contains the metadata for all receivers
var receiverMetaMap = map[string]ReceiverMeta{
	"apache": {
		ServiceType: "apache",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "apache.uptime",
					Message: "apachereceiver receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The container cannot be reached by the Collector. Make sure they're in the same network.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The container is refusing apache webserver connections.",
				},
			},
		},
	},
	"prometheus": {
		ServiceType: "envoy",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "envoy_cluster_upstream_cx_active",
					Message: "envoy prometheus receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connection refused",
					Message: "The container is not serving http connections.",
				},
				{
					Status:  "failed",
					Regexp:  "dial tcp: lookup",
					Message: "Unable to resolve envoy prometheus tcp endpoint",
				},
			},
		},
	},
	"prometheus/istio": {
		ServiceType: "istio",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "envoy_server_uptime",
					Message: "istio prometheus receiver is working for istio-proxy!",
				},
				{
					Status:  "successful",
					Strict:  "pilot_services",
					Message: "istio prometheus receiver is working for istiod!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connection refused",
					Message: "The container is not serving http connections.",
				},
				{
					Status:  "failed",
					Regexp:  "dial tcp: lookup",
					Message: "Unable to resolve istio prometheus tcp endpoint",
				},
			},
		},
	},
	"jmx/cassandra": {
		ServiceType: "cassandra",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "cassandra.client.request.count",
					Message: "jmx/cassandra receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The container cannot be reached by the Collector. Make sure they're in the same network.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The container is refusing cassandra server connections.",
				},
			},
		},
	},
	"kafkametrics": {
		ServiceType: "kafka",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "kafka.brokers",
					Message: "kafkametrics receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The container cannot be reached by the Collector. Make sure they're in the same network.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The container is refusing kafka server connections.",
				},
			},
		},
	},
	"mongodb": {
		ServiceType: "mongodb",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "mongodb.database.count",
					Message: "mongodb receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The container cannot be reached by the Collector. Make sure they're in the same network.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The container is refusing mongodb connections.",
				},
				{
					Status: "partial",
					Regexp: ".* unable to authenticate using mechanism .*",
					Message: "Make sure your user credentials are correctly specified as environment variables." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_mongodb_CONFIG_username=\"<username>\"" +
						"SPLUNK_DISCOVERY_RECEIVERS_mongodb_CONFIG_password=\"<password>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: ".* failed to fetch index stats metrics: (Unauthorized) not authorized on admin to execute command .*",
					Message: "Make sure the account used to access Mongodb has been given a clusterMonitor role in order to collect metrics." +
						"```" +
						"db.grantRolesToUser('someUser', [{ role: 'clusterMonitor', db: 'admin' }])" +
						"```",
				},
			},
		},
	},
	"mysql": {
		ServiceType: "mysql",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "mysql.locks",
					Message: "Mysql receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "Can't connect to MySQL server on .* [(]111[)]",
					Message: "The container cannot be reached by the Collector. The container is refusing MySQL connections.",
				},
				{
					Status: "partial",
					Regexp: "Access denied for user",
					Message: "Make sure your user credentials are correctly specified as environment variables." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_mysql_CONFIG_username=\"<username>\"" +
						"SPLUNK_DISCOVERY_RECEIVERS_mysql_CONFIG_password=\"<password>\"" +
						"```",
				},
			},
		},
	},
	"nginx": {
		ServiceType: "nginx",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "nginx.connections_accepted",
					Message: "nginx receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "Failed to fetch nginx stats",
					Message: "Failed to retrieve metrics from NGINX stub_status endpoint.",
				},
			},
		},
	},
	"oracledb": {
		ServiceType: "oracledb",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "oracledb.cpu_time",
					Message: "oracledb receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connection refused",
					Message: "The container is not serving http connections.",
				},
				{
					Status:  "failed",
					Regexp:  "received goaway and there are no active streams",
					Message: "Unable to connect and scrape metrics.",
				},
				{
					Status:  "failed",
					Regexp:  "dial tcp: lookup",
					Message: "Unable to resolve oracledb tcp endpoint",
				},
				{
					Status:  "failed",
					Regexp:  "error executing select .*: EOF",
					Message: "Unable to execute select from oracledb. Verify endpoint and user permissions.",
				},
				{
					Status: "partial",
					Regexp: "listener does not currently know of service requested",
					Message: "Make sure your oracledb service is correctly specified using an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_oracledb_CONFIG_service=\"<service>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "invalid username/password",
					Message: "Make sure your user credentials are correctly specified as environment variables." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_oracledb_CONFIG_username=\"<username>\"" +
						"SPLUNK_DISCOVERY_RECEIVERS_oracledb_CONFIG_password=\"<password>\"" +
						"```",
				},
			},
		},
	},
	"postgresql": {
		ServiceType: "postgresql",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "postgresql.commits",
					Message: "PostgreSQL receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The container cannot be reached by the Collector. Make sure they're in the same network.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The container is refusing PostgreSQL connections.",
				},
				{
					Status: "partial",
					Regexp: "pq: password authentication failed for user",
					Message: "Make sure your user credentials are correctly specified as environment variables." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_username=\"<username>\"" +
						"SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_password=\"<password>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "pq: database .* does not exist",
					Message: "Make sure the target database is correctly specified as an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_databases=\"[<db>]\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "pq: SSL is not enabled on the server",
					Message: "Make sure the target database has SSL enabled or set insecure as an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_postgresql_CONFIG_tls_x3a__x3a_insecure=\"<boolean>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "pq: pg_stat_statements must be loaded via shared_preload_libraries",
					Message: "Make sure your PostgreSQL database has `shared_preload_libraries = 'pg_stat_statements'` in the postgresql.conf file and that `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;` has been run for each database you would like to monitor. For example:" +
						"```" +
						"psql --dbname \"<db-name>\" -c \"CREATE EXTENSION pg_stat_statements;\"" +
						"```",
				},
			},
		},
	},
	"rabbitmq": {
		ServiceType: "rabbitmq",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "rabbitmq.consumer.count",
					Message: "RabbitMQ receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connect: network is unreachable",
					Message: "The endpoint is refusing RabbitMQ server connections.",
				},
				{
					Status:  "failed",
					Regexp:  "connect: connection refused",
					Message: "The endpoint is refusing RabbitMQ server connections.",
				},
			},
		},
	},
	"redis": {
		ServiceType: "redis",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "redis.uptime",
					Message: "redis receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connection refused",
					Message: "The container is not serving http connections.",
				},
				{
					Status:  "failed",
					Regexp:  "received goaway and there are no active streams",
					Message: "Unable to connect and scrape metrics.",
				},
				{
					Status:  "failed",
					Regexp:  "dial tcp: lookup",
					Message: "Unable to resolve redis tcp endpoint",
				},
				{
					Status: "partial",
					Regexp: "NOAUTH Authentication required.",
					Message: "Make sure your user credentials are correctly specified as an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_redis_CONFIG_password=\"<password>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "called without any password configured for the default user",
					Message: "Make sure your user credentials are correctly specified as an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_redis_CONFIG_password=\"<password>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "WRONGPASS invalid username-password pair or user is disabled",
					Message: "Make sure your user credentials are correctly specified as an environment variable." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_redis_CONFIG_password=\"<password>\"" +
						"```",
				},
			},
		},
	},
	"sqlserver": {
		ServiceType: "sqlserver",
		Status: Status{
			Metrics: []Match{
				{
					Status:  "successful",
					Strict:  "sqlserver.database.io",
					Message: "sqlserver receiver is working!",
				},
			},
			Statements: []Match{
				{
					Status:  "failed",
					Regexp:  "connection refused",
					Message: "The container is not serving http connections.",
				},
				{
					Status:  "failed",
					Regexp:  "unable to open tcp connection",
					Message: "Unable to resolve sql server tcp endpoint",
				},
				{
					Status: "partial",
					Regexp: "Login failed for user",
					Message: "Make sure your user credentials are correctly specified as environment variables." +
						"```" +
						"SPLUNK_DISCOVERY_RECEIVERS_sqlserver_CONFIG_username=\"<username>\"" +
						"SPLUNK_DISCOVERY_RECEIVERS_sqlserver_CONFIG_password=\"<password>\"" +
						"```",
				},
				{
					Status: "partial",
					Regexp: "The user does not have permission",
					Message: "Specified user does not have proper permissions. User must have view `SERVER STATE` permissions. This can be accomplished by:" +
						"```" +
						"GRANT VIEW SERVER STATE TO [username]" +
						"```",
				},
			},
		},
	},
}
