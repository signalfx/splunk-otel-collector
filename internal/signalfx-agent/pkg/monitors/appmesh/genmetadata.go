// Code generated by monitor-code-gen. DO NOT EDIT.

package appmesh

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "appmesh"

var groupSet = map[string]bool{}

const (
	circuitBreakersPriorityCxOpen           = "circuit_breakers.&lt;priority&gt;.cx_open"
	circuitBreakersPriorityCxPoolOpen       = "circuit_breakers.&lt;priority&gt;.cx_pool_open"
	circuitBreakersPriorityRemainingCx      = "circuit_breakers.&lt;priority&gt;.remaining_cx"
	circuitBreakersPriorityRemainingPending = "circuit_breakers.&lt;priority&gt;.remaining_pending"
	circuitBreakersPriorityRemainingRetries = "circuit_breakers.&lt;priority&gt;.remaining_retries"
	circuitBreakersPriorityRemainingRq      = "circuit_breakers.&lt;priority&gt;.remaining_rq"
	circuitBreakersPriorityRqOpen           = "circuit_breakers.&lt;priority&gt;.rq_open"
	circuitBreakersPriorityRqPendingOpen    = "circuit_breakers.&lt;priority&gt;.rq_pending_open"
	circuitBreakersPriorityRqRetryOpen      = "circuit_breakers.&lt;priority&gt;.rq_retry_open"
	externalUpstreamRq                      = "external.upstream_rq_&lt;_&gt;"
	externalUpstreamRqXx                    = "external.upstream_rq_&lt;_xx&gt;"
	externalUpstreamRqCompleted             = "external.upstream_rq_completed"
	externalUpstreamRqTime                  = "external.upstream_rq_time"
	internalUpstreamRq                      = "internal.upstream_rq_&lt;_&gt;"
	internalUpstreamRqXx                    = "internal.upstream_rq_&lt;_xx&gt;"
	internalUpstreamRqCompleted             = "internal.upstream_rq_completed"
	internalUpstreamRqTime                  = "internal.upstream_rq_time"
	membershipChange                        = "membership_change"
	membershipDegraded                      = "membership_degraded"
	membershipHealthy                       = "membership_healthy"
	membershipTotal                         = "membership_total"
	upstreamCxActive                        = "upstream_cx_active"
	upstreamCxCloseNotify                   = "upstream_cx_close_notify"
	upstreamCxConnectAttemptsExceeded       = "upstream_cx_connect_attempts_exceeded"
	upstreamCxConnectFail                   = "upstream_cx_connect_fail"
	upstreamCxConnectMs                     = "upstream_cx_connect_ms"
	upstreamCxConnectTimeout                = "upstream_cx_connect_timeout"
	upstreamCxDestroy                       = "upstream_cx_destroy"
	upstreamCxDestroyLocal                  = "upstream_cx_destroy_local"
	upstreamCxDestroyLocalWithActiveRq      = "upstream_cx_destroy_local_with_active_rq"
	upstreamCxDestroyRemote                 = "upstream_cx_destroy_remote"
	upstreamCxDestroyRemoteWithActiveRq     = "upstream_cx_destroy_remote_with_active_rq"
	upstreamCxDestroyWithActiveRq           = "upstream_cx_destroy_with_active_rq"
	upstreamCxHTTP1Total                    = "upstream_cx_http1_total"
	upstreamCxHTTP2Total                    = "upstream_cx_http2_total"
	upstreamCxIdleTimeout                   = "upstream_cx_idle_timeout"
	upstreamCxLengthMs                      = "upstream_cx_length_ms"
	upstreamCxMaxRequests                   = "upstream_cx_max_requests"
	upstreamCxNoneHealthy                   = "upstream_cx_none_healthy"
	upstreamCxOverflow                      = "upstream_cx_overflow"
	upstreamCxPoolOverflow                  = "upstream_cx_pool_overflow"
	upstreamCxProtocolError                 = "upstream_cx_protocol_error"
	upstreamCxRxBytesBuffered               = "upstream_cx_rx_bytes_buffered"
	upstreamCxRxBytesTotal                  = "upstream_cx_rx_bytes_total"
	upstreamCxTotal                         = "upstream_cx_total"
	upstreamCxTxBytesBuffered               = "upstream_cx_tx_bytes_buffered"
	upstreamCxTxBytesTotal                  = "upstream_cx_tx_bytes_total"
	upstreamRq2xx                           = "upstream_rq_2xx"
	upstreamRq3xx                           = "upstream_rq_3xx"
	upstreamRq4xx                           = "upstream_rq_4xx"
	upstreamRq5xx                           = "upstream_rq_5xx"
	upstreamRq                              = "upstream_rq_&lt;___&gt;"
	upstreamRqActive                        = "upstream_rq_active"
	upstreamRqCancelled                     = "upstream_rq_cancelled"
	upstreamRqCompleted                     = "upstream_rq_completed"
	upstreamRqMaintenanceMode               = "upstream_rq_maintenance_mode"
	upstreamRqPendingActive                 = "upstream_rq_pending_active"
	upstreamRqPendingFailureEject           = "upstream_rq_pending_failure_eject"
	upstreamRqPendingOverflow               = "upstream_rq_pending_overflow"
	upstreamRqPendingTotal                  = "upstream_rq_pending_total"
	upstreamRqPerTryTimeout                 = "upstream_rq_per_try_timeout"
	upstreamRqRetry                         = "upstream_rq_retry"
	upstreamRqRetryOverflow                 = "upstream_rq_retry_overflow"
	upstreamRqRetrySuccess                  = "upstream_rq_retry_success"
	upstreamRqRxReset                       = "upstream_rq_rx_reset"
	upstreamRqTime                          = "upstream_rq_time"
	upstreamRqTimeout                       = "upstream_rq_timeout"
	upstreamRqTotal                         = "upstream_rq_total"
	upstreamRqTxReset                       = "upstream_rq_tx_reset"
)

var metricSet = map[string]monitors.MetricInfo{
	circuitBreakersPriorityCxOpen:           {Type: datapoint.Gauge},
	circuitBreakersPriorityCxPoolOpen:       {Type: datapoint.Gauge},
	circuitBreakersPriorityRemainingCx:      {Type: datapoint.Gauge},
	circuitBreakersPriorityRemainingPending: {Type: datapoint.Gauge},
	circuitBreakersPriorityRemainingRetries: {Type: datapoint.Gauge},
	circuitBreakersPriorityRemainingRq:      {Type: datapoint.Gauge},
	circuitBreakersPriorityRqOpen:           {Type: datapoint.Gauge},
	circuitBreakersPriorityRqPendingOpen:    {Type: datapoint.Gauge},
	circuitBreakersPriorityRqRetryOpen:      {Type: datapoint.Gauge},
	externalUpstreamRq:                      {Type: datapoint.Counter},
	externalUpstreamRqXx:                    {Type: datapoint.Counter},
	externalUpstreamRqCompleted:             {Type: datapoint.Counter},
	externalUpstreamRqTime:                  {Type: datapoint.Gauge},
	internalUpstreamRq:                      {Type: datapoint.Counter},
	internalUpstreamRqXx:                    {Type: datapoint.Counter},
	internalUpstreamRqCompleted:             {Type: datapoint.Counter},
	internalUpstreamRqTime:                  {Type: datapoint.Gauge},
	membershipChange:                        {Type: datapoint.Counter},
	membershipDegraded:                      {Type: datapoint.Gauge},
	membershipHealthy:                       {Type: datapoint.Gauge},
	membershipTotal:                         {Type: datapoint.Gauge},
	upstreamCxActive:                        {Type: datapoint.Gauge},
	upstreamCxCloseNotify:                   {Type: datapoint.Counter},
	upstreamCxConnectAttemptsExceeded:       {Type: datapoint.Counter},
	upstreamCxConnectFail:                   {Type: datapoint.Counter},
	upstreamCxConnectMs:                     {Type: datapoint.Gauge},
	upstreamCxConnectTimeout:                {Type: datapoint.Counter},
	upstreamCxDestroy:                       {Type: datapoint.Counter},
	upstreamCxDestroyLocal:                  {Type: datapoint.Counter},
	upstreamCxDestroyLocalWithActiveRq:      {Type: datapoint.Counter},
	upstreamCxDestroyRemote:                 {Type: datapoint.Counter},
	upstreamCxDestroyRemoteWithActiveRq:     {Type: datapoint.Counter},
	upstreamCxDestroyWithActiveRq:           {Type: datapoint.Counter},
	upstreamCxHTTP1Total:                    {Type: datapoint.Counter},
	upstreamCxHTTP2Total:                    {Type: datapoint.Counter},
	upstreamCxIdleTimeout:                   {Type: datapoint.Counter},
	upstreamCxLengthMs:                      {Type: datapoint.Gauge},
	upstreamCxMaxRequests:                   {Type: datapoint.Counter},
	upstreamCxNoneHealthy:                   {Type: datapoint.Counter},
	upstreamCxOverflow:                      {Type: datapoint.Counter},
	upstreamCxPoolOverflow:                  {Type: datapoint.Counter},
	upstreamCxProtocolError:                 {Type: datapoint.Counter},
	upstreamCxRxBytesBuffered:               {Type: datapoint.Gauge},
	upstreamCxRxBytesTotal:                  {Type: datapoint.Counter},
	upstreamCxTotal:                         {Type: datapoint.Counter},
	upstreamCxTxBytesBuffered:               {Type: datapoint.Gauge},
	upstreamCxTxBytesTotal:                  {Type: datapoint.Counter},
	upstreamRq2xx:                           {Type: datapoint.Counter},
	upstreamRq3xx:                           {Type: datapoint.Counter},
	upstreamRq4xx:                           {Type: datapoint.Counter},
	upstreamRq5xx:                           {Type: datapoint.Counter},
	upstreamRq:                              {Type: datapoint.Counter},
	upstreamRqActive:                        {Type: datapoint.Gauge},
	upstreamRqCancelled:                     {Type: datapoint.Counter},
	upstreamRqCompleted:                     {Type: datapoint.Counter},
	upstreamRqMaintenanceMode:               {Type: datapoint.Counter},
	upstreamRqPendingActive:                 {Type: datapoint.Gauge},
	upstreamRqPendingFailureEject:           {Type: datapoint.Counter},
	upstreamRqPendingOverflow:               {Type: datapoint.Counter},
	upstreamRqPendingTotal:                  {Type: datapoint.Counter},
	upstreamRqPerTryTimeout:                 {Type: datapoint.Counter},
	upstreamRqRetry:                         {Type: datapoint.Counter},
	upstreamRqRetryOverflow:                 {Type: datapoint.Counter},
	upstreamRqRetrySuccess:                  {Type: datapoint.Counter},
	upstreamRqRxReset:                       {Type: datapoint.Counter},
	upstreamRqTime:                          {Type: datapoint.Gauge},
	upstreamRqTimeout:                       {Type: datapoint.Counter},
	upstreamRqTotal:                         {Type: datapoint.Counter},
	upstreamRqTxReset:                       {Type: datapoint.Counter},
}

var defaultMetrics = map[string]bool{
	membershipHealthy:      true,
	membershipTotal:        true,
	upstreamCxRxBytesTotal: true,
	upstreamRq4xx:          true,
	upstreamRq5xx:          true,
	upstreamRqCompleted:    true,
	upstreamRqRetry:        true,
	upstreamRqTime:         true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "appmesh",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
