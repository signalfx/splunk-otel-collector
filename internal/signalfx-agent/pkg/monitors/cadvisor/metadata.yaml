monitors:
- &cadvisor
  dimensions:
    container_id:
      description: The ID of the running container
    container_image:
      description: The container image name
    container_name:
      description: The container's name as it appears in the pod spec, the same as
        container_spec_name but retained for backwards compatibility.
    container_spec_name:
      description: The container's name as it appears in the pod spec
    kubernetes_namespace:
      description: The K8s namespace the container is part of
    kubernetes_pod_name:
      description: The pod instance under which this container runs
    kubernetes_pod_uid:
      description: The UID of the pod instance under which this container runs
  doc: |
    This monitor pulls metrics directly from cadvisor, which
    conventionally runs on port 4194, but can be configured to anything.  If you
    are running on Kubernetes, consider the [kubelet-stats](./kubelet-stats.md)
    monitor because many K8s nodes do not expose cAdvisor on a network port,
    even though they are running it within Kubelet.

    If you are running containers with Docker, there is a fair amount of
    duplication with the `docker-container-stats` monitor in terms of the
    metrics sent (under distinct metric names) so you may want to consider not
    enabling the Docker monitor in a K8s environment, or else use filtering to
    allow only certain metrics.  Note that this will cause the built-in
    Docker dashboards to be blank, but container metrics will be available on
    the Kubernetes dashboards instead.

  metrics:
    container_cpu_cfs_periods:
      description: Total number of elapsed CFS enforcement intervals
      default: false
      type: cumulative
    container_cpu_cfs_throttled_periods:
      description: Total number of times tasks in the cgroup have been throttled
      default: false
      type: cumulative
    container_cpu_cfs_throttled_time:
      description: Total time duration, in nanoseconds, for which tasks in the cgroup
        have been throttled
      default: false
      type: cumulative
    container_cpu_percent:
      description: Cumulative cpu utilization as a percentage of the total host CPU
        available.  This metric is equivalent to `container_cpu_utilization` / <#
        of CPUs/cores on host>.
      default: true
      type: cumulative
    container_cpu_utilization_per_core:
      description: Cumulative cpu utilization in percentages per core
      default: false
      type: cumulative
    container_cpu_system_seconds_total:
      description: Cumulative system cpu time consumed in nanoseconds
      default: false
      type: cumulative
    container_cpu_usage_seconds_total:
      description: Cumulative cpu time consumed per cpu in nanoseconds
      default: false
      type: cumulative
    container_cpu_user_seconds_total:
      description: Cumulative user cpu time consumed in nanoseconds
      default: false
      type: cumulative
    container_cpu_utilization:
      description: 'Cumulative cpu utilization in percentages.  This is equivalent
        to "centicores", or hundreths of CPU cores consumed.  This metric is **NOT**
        normalized by the total # of cores on the system.'
      default: true
      type: cumulative
    container_fs_io_current:
      description: Number of I/Os currently in progress
      default: false
      type: gauge
    container_fs_io_time_seconds_total:
      description: Cumulative count of seconds spent doing I/Os
      default: false
      type: cumulative
    container_fs_io_time_weighted_seconds_total:
      description: Cumulative weighted I/O time in seconds
      default: false
      type: cumulative
    container_fs_limit_bytes:
      description: Number of bytes that the container may occupy on this filesystem
      default: false
      type: gauge
    container_fs_read_seconds_total:
      description: Cumulative count of seconds spent reading
      default: true
      type: cumulative
    container_fs_reads_merged_total:
      description: Cumulative count of reads merged
      default: false
      type: cumulative
    container_fs_reads_total:
      description: Cumulative count of reads completed
      default: true
      type: cumulative
    container_fs_sector_reads_total:
      description: Cumulative count of sector reads completed
      default: false
      type: cumulative
    container_fs_sector_writes_total:
      description: Cumulative count of sector writes completed
      default: false
      type: cumulative
    container_fs_usage_bytes:
      description: Number of bytes that are consumed by the container on this filesystem
      default: true
      type: gauge
    container_fs_write_seconds_total:
      description: Cumulative count of seconds spent writing
      default: true
      type: cumulative
    container_fs_writes_merged_total:
      description: Cumulative count of writes merged
      default: false
      type: cumulative
    container_fs_writes_total:
      description: Cumulative count of writes completed
      default: true
      type: cumulative
    container_last_seen:
      description: Last time a container was seen by the exporter
      default: false
      type: gauge
    container_memory_rss:
      type: gauge
      default: false
      description: Current RSS memory usage in bytes
    container_memory_failcnt:
      description: Number of memory usage hits limits
      default: false
      type: cumulative
    container_memory_failures_total:
      description: Cumulative count of memory allocation failures
      default: true
      type: cumulative
    container_memory_usage_bytes:
      description: Current memory usage in bytes
      default: true
      type: gauge
    container_memory_working_set_bytes:
      description: Current working set in bytes
      default: false
      type: gauge
    container_spec_cpu_period:
      description: The number of microseconds that the [CFS scheduler](https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt)
        uses as a window when limiting container processes
      default: true
      type: gauge
    container_spec_cpu_quota:
      description: In CPU quota for the CFS process scheduler. In K8s this is equal
        to the containers's CPU limit as a fraction of 1 core and multiplied by the
        `container_spec_cpu_period`.  So if the CPU limit is `500m` (500 millicores)
        for a container and the `container_spec_cpu_period` is set to 100,000, this
        value will be 50,000.
      default: true
      type: gauge
    container_spec_cpu_shares:
      description: CPU share of the container
      default: false
      type: gauge
    container_spec_memory_limit_bytes:
      description: Memory limit for the container.
      default: true
      type: gauge
    container_spec_memory_swap_limit_bytes:
      description: Memory swap limit for the container.
      default: false
      type: gauge
    container_start_time_seconds:
      description: Start time of the container since unix epoch in seconds.
      default: false
      type: gauge
    container_tasks_state:
      description: Number of tasks in given state
      default: false
      type: gauge
    machine_cpu_cores:
      description: Number of CPU cores on the node.
      default: true
      type: gauge
    machine_cpu_frequency_khz:
      description: Node's CPU frequency.
      default: false
      type: gauge
    machine_memory_bytes:
      description: Amount of memory installed on the node.
      default: true
      type: gauge
    pod_network_receive_bytes_total:
      description: Cumulative count of bytes received. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: true
      type: cumulative
    pod_network_receive_errors_total:
      description: Cumulative count of errors encountered while receiving. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: true
      type: cumulative
    pod_network_receive_packets_dropped_total:
      description: Cumulative count of packets dropped while receiving. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: false
      type: cumulative
    pod_network_receive_packets_total:
      description: Cumulative count of packets received. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: false
      type: cumulative
    pod_network_transmit_bytes_total:
      description: Cumulative count of bytes transmitted. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: true
      type: cumulative
    pod_network_transmit_errors_total:
      description: Cumulative count of errors encountered while transmitting. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: true
      type: cumulative
    pod_network_transmit_packets_dropped_total:
      description: Cumulative count of packets dropped while transmitting. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: false
      type: cumulative
    pod_network_transmit_packets_total:
      description: Cumulative count of packets transmitted. **Note that this metric is not emitted when using the cri-o container runtime.**
      default: false
      type: cumulative
  monitorType: cadvisor
  properties:
- <<: *cadvisor
  doc: |
    **As of Kubernetes 1.18 the `/spec` and `/stats/containers` endpoint that
    this monitor uses have been deprecated.  Therefore, this monitor is
    deprecated in favor of the kubelet-metrics` monitor, which uses the
    non-deprecated `/stats/summary` endpoint.**

    This monitor pulls cadvisor metrics through a
    Kubernetes kubelet instance via the `/stats/container` endpoint.

    ### Pause Containers
    Network stats for a Kubernetes pod are traditionally accounted for on the
    "pause" container, which is the container responsible for "owning" the
    network namespace that the other containers in the pod will use, among
    other things.  Therefore, the network stats are usually zero for all
    non-pause containers and accounted for in an aggregated way via the pause
    container.
    
    Since the only generally useful stats of the pause container are network
    stats, this montior will omit non-network metrics for any containers named
    `POD`. This is the standard name for the "pause" container in Kubernetes
    when using the Docker runtime, but the pause container has no name under
    other runtimes. Therefore, you need to explicitly filter out non-network
    metrics from pause containers when using non-Docker runtimes.  The following
    configuration will do that:

    ```yaml
    monitors:
    - type: kubelet-stats
      datapointsToExclude:
      - dimensions:
          container_image:
           - '*pause-amd64*'
           - 'k8s.gcr.io/pause*'
        metricNames:
          - '*'
          - '!*network*'
    ```

    If your K8s deployment using an image name for the pause container that
    does not fit the given patterns, you should tweak it as needed.

  monitorType: kubelet-stats
  metrics:
    pod_ephemeral_storage_capacity_bytes:
      description: Represents the storage space available (bytes) for the filesystem.
        This value is a combination of total filesystem usage for the containers and
        emptyDir-backed volumes in the measured Pod. See more about emptyDir-backed
        volumes https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
      default: false
      type: gauge
      group: podEphemeralStats
    pod_ephemeral_storage_used_bytes:
      description: Represents the bytes used on the filesystem. This value is a total
        filesystem usage for the containers and emptyDir-backed volumes in the measured Pod.
        See more about emptyDir-backed volumes
        https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
      default: false
      type: gauge
      group: podEphemeralStats
  properties:
