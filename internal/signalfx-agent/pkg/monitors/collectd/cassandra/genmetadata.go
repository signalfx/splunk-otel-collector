// Code generated by monitor-code-gen. DO NOT EDIT.

package cassandra

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/cassandra"

const (
	groupJvm = "jvm"
)

var groupSet = map[string]bool{
	groupJvm: true,
}

const (
	counterCassandraClientRequestCASReadLatencyCount           = "counter.cassandra.ClientRequest.CASRead.Latency.Count"
	counterCassandraClientRequestCASReadTotalLatencyCount      = "counter.cassandra.ClientRequest.CASRead.TotalLatency.Count"
	counterCassandraClientRequestCASWriteLatencyCount          = "counter.cassandra.ClientRequest.CASWrite.Latency.Count"
	counterCassandraClientRequestCASWriteTotalLatencyCount     = "counter.cassandra.ClientRequest.CASWrite.TotalLatency.Count"
	counterCassandraClientRequestRangeSliceLatencyCount        = "counter.cassandra.ClientRequest.RangeSlice.Latency.Count"
	counterCassandraClientRequestRangeSliceTimeoutsCount       = "counter.cassandra.ClientRequest.RangeSlice.Timeouts.Count"
	counterCassandraClientRequestRangeSliceTotalLatencyCount   = "counter.cassandra.ClientRequest.RangeSlice.TotalLatency.Count"
	counterCassandraClientRequestRangeSliceUnavailablesCount   = "counter.cassandra.ClientRequest.RangeSlice.Unavailables.Count"
	counterCassandraClientRequestReadLatencyCount              = "counter.cassandra.ClientRequest.Read.Latency.Count"
	counterCassandraClientRequestReadTimeoutsCount             = "counter.cassandra.ClientRequest.Read.Timeouts.Count"
	counterCassandraClientRequestReadTotalLatencyCount         = "counter.cassandra.ClientRequest.Read.TotalLatency.Count"
	counterCassandraClientRequestReadUnavailablesCount         = "counter.cassandra.ClientRequest.Read.Unavailables.Count"
	counterCassandraClientRequestWriteLatencyCount             = "counter.cassandra.ClientRequest.Write.Latency.Count"
	counterCassandraClientRequestWriteTimeoutsCount            = "counter.cassandra.ClientRequest.Write.Timeouts.Count"
	counterCassandraClientRequestWriteTotalLatencyCount        = "counter.cassandra.ClientRequest.Write.TotalLatency.Count"
	counterCassandraClientRequestWriteUnavailablesCount        = "counter.cassandra.ClientRequest.Write.Unavailables.Count"
	counterCassandraCompactionTotalCompactionsCompletedCount   = "counter.cassandra.Compaction.TotalCompactionsCompleted.Count"
	counterCassandraStorageExceptionsCount                     = "counter.cassandra.Storage.Exceptions.Count"
	counterCassandraStorageLoadCount                           = "counter.cassandra.Storage.Load.Count"
	counterCassandraStorageTotalHintsCount                     = "counter.cassandra.Storage.TotalHints.Count"
	counterCassandraStorageTotalHintsInProgressCount           = "counter.cassandra.Storage.TotalHintsInProgress.Count"
	gaugeCassandraClientRequestCASReadLatency50thPercentile    = "gauge.cassandra.ClientRequest.CASRead.Latency.50thPercentile"
	gaugeCassandraClientRequestCASReadLatency99thPercentile    = "gauge.cassandra.ClientRequest.CASRead.Latency.99thPercentile"
	gaugeCassandraClientRequestCASReadLatencyMax               = "gauge.cassandra.ClientRequest.CASRead.Latency.Max"
	gaugeCassandraClientRequestCASWriteLatency50thPercentile   = "gauge.cassandra.ClientRequest.CASWrite.Latency.50thPercentile"
	gaugeCassandraClientRequestCASWriteLatency99thPercentile   = "gauge.cassandra.ClientRequest.CASWrite.Latency.99thPercentile"
	gaugeCassandraClientRequestCASWriteLatencyMax              = "gauge.cassandra.ClientRequest.CASWrite.Latency.Max"
	gaugeCassandraClientRequestRangeSliceLatency50thPercentile = "gauge.cassandra.ClientRequest.RangeSlice.Latency.50thPercentile"
	gaugeCassandraClientRequestRangeSliceLatency99thPercentile = "gauge.cassandra.ClientRequest.RangeSlice.Latency.99thPercentile"
	gaugeCassandraClientRequestRangeSliceLatencyMax            = "gauge.cassandra.ClientRequest.RangeSlice.Latency.Max"
	gaugeCassandraClientRequestReadLatency50thPercentile       = "gauge.cassandra.ClientRequest.Read.Latency.50thPercentile"
	gaugeCassandraClientRequestReadLatency99thPercentile       = "gauge.cassandra.ClientRequest.Read.Latency.99thPercentile"
	gaugeCassandraClientRequestReadLatencyMax                  = "gauge.cassandra.ClientRequest.Read.Latency.Max"
	gaugeCassandraClientRequestWriteLatency50thPercentile      = "gauge.cassandra.ClientRequest.Write.Latency.50thPercentile"
	gaugeCassandraClientRequestWriteLatency99thPercentile      = "gauge.cassandra.ClientRequest.Write.Latency.99thPercentile"
	gaugeCassandraClientRequestWriteLatencyMax                 = "gauge.cassandra.ClientRequest.Write.Latency.Max"
	gaugeCassandraCompactionPendingTasksValue                  = "gauge.cassandra.Compaction.PendingTasks.Value"
	gaugeJvmThreadsCount                                       = "gauge.jvm.threads.count"
	gaugeLoadedClasses                                         = "gauge.loaded_classes"
	invocations                                                = "invocations"
	jmxMemoryCommitted                                         = "jmx_memory.committed"
	jmxMemoryInit                                              = "jmx_memory.init"
	jmxMemoryMax                                               = "jmx_memory.max"
	jmxMemoryUsed                                              = "jmx_memory.used"
	totalTimeInMsCollectionTime                                = "total_time_in_ms.collection_time"
)

var metricSet = map[string]monitors.MetricInfo{
	counterCassandraClientRequestCASReadLatencyCount:           {Type: datapoint.Counter},
	counterCassandraClientRequestCASReadTotalLatencyCount:      {Type: datapoint.Counter},
	counterCassandraClientRequestCASWriteLatencyCount:          {Type: datapoint.Counter},
	counterCassandraClientRequestCASWriteTotalLatencyCount:     {Type: datapoint.Counter},
	counterCassandraClientRequestRangeSliceLatencyCount:        {Type: datapoint.Counter},
	counterCassandraClientRequestRangeSliceTimeoutsCount:       {Type: datapoint.Counter},
	counterCassandraClientRequestRangeSliceTotalLatencyCount:   {Type: datapoint.Counter},
	counterCassandraClientRequestRangeSliceUnavailablesCount:   {Type: datapoint.Counter},
	counterCassandraClientRequestReadLatencyCount:              {Type: datapoint.Counter},
	counterCassandraClientRequestReadTimeoutsCount:             {Type: datapoint.Counter},
	counterCassandraClientRequestReadTotalLatencyCount:         {Type: datapoint.Counter},
	counterCassandraClientRequestReadUnavailablesCount:         {Type: datapoint.Counter},
	counterCassandraClientRequestWriteLatencyCount:             {Type: datapoint.Counter},
	counterCassandraClientRequestWriteTimeoutsCount:            {Type: datapoint.Counter},
	counterCassandraClientRequestWriteTotalLatencyCount:        {Type: datapoint.Counter},
	counterCassandraClientRequestWriteUnavailablesCount:        {Type: datapoint.Counter},
	counterCassandraCompactionTotalCompactionsCompletedCount:   {Type: datapoint.Counter},
	counterCassandraStorageExceptionsCount:                     {Type: datapoint.Counter},
	counterCassandraStorageLoadCount:                           {Type: datapoint.Counter},
	counterCassandraStorageTotalHintsCount:                     {Type: datapoint.Counter},
	counterCassandraStorageTotalHintsInProgressCount:           {Type: datapoint.Counter},
	gaugeCassandraClientRequestCASReadLatency50thPercentile:    {Type: datapoint.Gauge},
	gaugeCassandraClientRequestCASReadLatency99thPercentile:    {Type: datapoint.Gauge},
	gaugeCassandraClientRequestCASReadLatencyMax:               {Type: datapoint.Gauge},
	gaugeCassandraClientRequestCASWriteLatency50thPercentile:   {Type: datapoint.Gauge},
	gaugeCassandraClientRequestCASWriteLatency99thPercentile:   {Type: datapoint.Gauge},
	gaugeCassandraClientRequestCASWriteLatencyMax:              {Type: datapoint.Gauge},
	gaugeCassandraClientRequestRangeSliceLatency50thPercentile: {Type: datapoint.Gauge},
	gaugeCassandraClientRequestRangeSliceLatency99thPercentile: {Type: datapoint.Gauge},
	gaugeCassandraClientRequestRangeSliceLatencyMax:            {Type: datapoint.Gauge},
	gaugeCassandraClientRequestReadLatency50thPercentile:       {Type: datapoint.Gauge},
	gaugeCassandraClientRequestReadLatency99thPercentile:       {Type: datapoint.Gauge},
	gaugeCassandraClientRequestReadLatencyMax:                  {Type: datapoint.Gauge},
	gaugeCassandraClientRequestWriteLatency50thPercentile:      {Type: datapoint.Gauge},
	gaugeCassandraClientRequestWriteLatency99thPercentile:      {Type: datapoint.Gauge},
	gaugeCassandraClientRequestWriteLatencyMax:                 {Type: datapoint.Gauge},
	gaugeCassandraCompactionPendingTasksValue:                  {Type: datapoint.Gauge},
	gaugeJvmThreadsCount:                                       {Type: datapoint.Gauge, Group: groupJvm},
	gaugeLoadedClasses:                                         {Type: datapoint.Gauge, Group: groupJvm},
	invocations:                                                {Type: datapoint.Counter, Group: groupJvm},
	jmxMemoryCommitted:                                         {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryInit:                                              {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryMax:                                               {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryUsed:                                              {Type: datapoint.Gauge, Group: groupJvm},
	totalTimeInMsCollectionTime:                                {Type: datapoint.Counter, Group: groupJvm},
}

var defaultMetrics = map[string]bool{
	counterCassandraClientRequestRangeSliceLatencyCount:        true,
	counterCassandraClientRequestRangeSliceTimeoutsCount:       true,
	counterCassandraClientRequestRangeSliceUnavailablesCount:   true,
	counterCassandraClientRequestReadLatencyCount:              true,
	counterCassandraClientRequestReadTimeoutsCount:             true,
	counterCassandraClientRequestReadUnavailablesCount:         true,
	counterCassandraClientRequestWriteLatencyCount:             true,
	counterCassandraClientRequestWriteTimeoutsCount:            true,
	counterCassandraClientRequestWriteUnavailablesCount:        true,
	counterCassandraStorageLoadCount:                           true,
	counterCassandraStorageTotalHintsInProgressCount:           true,
	gaugeCassandraClientRequestRangeSliceLatency99thPercentile: true,
	gaugeCassandraClientRequestReadLatency50thPercentile:       true,
	gaugeCassandraClientRequestReadLatency99thPercentile:       true,
	gaugeCassandraClientRequestReadLatencyMax:                  true,
	gaugeCassandraClientRequestWriteLatency50thPercentile:      true,
	gaugeCassandraClientRequestWriteLatency99thPercentile:      true,
	gaugeCassandraClientRequestWriteLatencyMax:                 true,
	gaugeCassandraCompactionPendingTasksValue:                  true,
	gaugeJvmThreadsCount:                                       true,
	gaugeLoadedClasses:                                         true,
	invocations:                                                true,
	jmxMemoryCommitted:                                         true,
	jmxMemoryInit:                                              true,
	jmxMemoryMax:                                               true,
	jmxMemoryUsed:                                              true,
	totalTimeInMsCollectionTime:                                true,
}

var groupMetricsMap = map[string][]string{
	groupJvm: {
		gaugeJvmThreadsCount,
		gaugeLoadedClasses,
		invocations,
		jmxMemoryCommitted,
		jmxMemoryInit,
		jmxMemoryMax,
		jmxMemoryUsed,
		totalTimeInMsCollectionTime,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/cassandra",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     true,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
