// Code generated by monitor-code-gen. DO NOT EDIT.

package etcd

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/etcd"

var groupSet = map[string]bool{}

const (
	counterEtcdLeaderCountsFail             = "counter.etcd.leader.counts.fail"
	counterEtcdLeaderCountsSuccess          = "counter.etcd.leader.counts.success"
	counterEtcdSelfRecvappendreqCnt         = "counter.etcd.self.recvappendreq.cnt"
	counterEtcdSelfSendappendreqCnt         = "counter.etcd.self.sendappendreq.cnt"
	counterEtcdStoreCompareanddeleteFail    = "counter.etcd.store.compareanddelete.fail"
	counterEtcdStoreCompareanddeleteSuccess = "counter.etcd.store.compareanddelete.success"
	counterEtcdStoreCompareandswapFail      = "counter.etcd.store.compareandswap.fail"
	counterEtcdStoreCompareandswapSuccess   = "counter.etcd.store.compareandswap.success"
	counterEtcdStoreCreateFail              = "counter.etcd.store.create.fail"
	counterEtcdStoreCreateSuccess           = "counter.etcd.store.create.success"
	counterEtcdStoreDeleteFail              = "counter.etcd.store.delete.fail"
	counterEtcdStoreDeleteSuccess           = "counter.etcd.store.delete.success"
	counterEtcdStoreExpireCount             = "counter.etcd.store.expire.count"
	counterEtcdStoreGetsFail                = "counter.etcd.store.gets.fail"
	counterEtcdStoreGetsSuccess             = "counter.etcd.store.gets.success"
	counterEtcdStoreSetsFail                = "counter.etcd.store.sets.fail"
	counterEtcdStoreSetsSuccess             = "counter.etcd.store.sets.success"
	counterEtcdStoreUpdateFail              = "counter.etcd.store.update.fail"
	counterEtcdStoreUpdateSuccess           = "counter.etcd.store.update.success"
	gaugeEtcdLeaderLatencyAverage           = "gauge.etcd.leader.latency.average"
	gaugeEtcdLeaderLatencyCurrent           = "gauge.etcd.leader.latency.current"
	gaugeEtcdLeaderLatencyMax               = "gauge.etcd.leader.latency.max"
	gaugeEtcdLeaderLatencyMin               = "gauge.etcd.leader.latency.min"
	gaugeEtcdLeaderLatencyStddev            = "gauge.etcd.leader.latency.stddev"
	gaugeEtcdSelfRecvbandwidthRate          = "gauge.etcd.self.recvbandwidth.rate"
	gaugeEtcdSelfRecvpkgRate                = "gauge.etcd.self.recvpkg.rate"
	gaugeEtcdSelfSendbandwidthRate          = "gauge.etcd.self.sendbandwidth.rate"
	gaugeEtcdSelfSendpkgRate                = "gauge.etcd.self.sendpkg.rate"
	gaugeEtcdStoreWatchers                  = "gauge.etcd.store.watchers"
)

var metricSet = map[string]monitors.MetricInfo{
	counterEtcdLeaderCountsFail:             {Type: datapoint.Count},
	counterEtcdLeaderCountsSuccess:          {Type: datapoint.Count},
	counterEtcdSelfRecvappendreqCnt:         {Type: datapoint.Count},
	counterEtcdSelfSendappendreqCnt:         {Type: datapoint.Count},
	counterEtcdStoreCompareanddeleteFail:    {Type: datapoint.Count},
	counterEtcdStoreCompareanddeleteSuccess: {Type: datapoint.Count},
	counterEtcdStoreCompareandswapFail:      {Type: datapoint.Count},
	counterEtcdStoreCompareandswapSuccess:   {Type: datapoint.Count},
	counterEtcdStoreCreateFail:              {Type: datapoint.Count},
	counterEtcdStoreCreateSuccess:           {Type: datapoint.Count},
	counterEtcdStoreDeleteFail:              {Type: datapoint.Count},
	counterEtcdStoreDeleteSuccess:           {Type: datapoint.Count},
	counterEtcdStoreExpireCount:             {Type: datapoint.Count},
	counterEtcdStoreGetsFail:                {Type: datapoint.Count},
	counterEtcdStoreGetsSuccess:             {Type: datapoint.Count},
	counterEtcdStoreSetsFail:                {Type: datapoint.Count},
	counterEtcdStoreSetsSuccess:             {Type: datapoint.Count},
	counterEtcdStoreUpdateFail:              {Type: datapoint.Count},
	counterEtcdStoreUpdateSuccess:           {Type: datapoint.Count},
	gaugeEtcdLeaderLatencyAverage:           {Type: datapoint.Gauge},
	gaugeEtcdLeaderLatencyCurrent:           {Type: datapoint.Gauge},
	gaugeEtcdLeaderLatencyMax:               {Type: datapoint.Gauge},
	gaugeEtcdLeaderLatencyMin:               {Type: datapoint.Gauge},
	gaugeEtcdLeaderLatencyStddev:            {Type: datapoint.Gauge},
	gaugeEtcdSelfRecvbandwidthRate:          {Type: datapoint.Gauge},
	gaugeEtcdSelfRecvpkgRate:                {Type: datapoint.Gauge},
	gaugeEtcdSelfSendbandwidthRate:          {Type: datapoint.Gauge},
	gaugeEtcdSelfSendpkgRate:                {Type: datapoint.Gauge},
	gaugeEtcdStoreWatchers:                  {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	counterEtcdLeaderCountsFail:             true,
	counterEtcdLeaderCountsSuccess:          true,
	counterEtcdSelfRecvappendreqCnt:         true,
	counterEtcdSelfSendappendreqCnt:         true,
	counterEtcdStoreCompareanddeleteFail:    true,
	counterEtcdStoreCompareanddeleteSuccess: true,
	counterEtcdStoreCompareandswapFail:      true,
	counterEtcdStoreCompareandswapSuccess:   true,
	counterEtcdStoreCreateFail:              true,
	counterEtcdStoreCreateSuccess:           true,
	counterEtcdStoreDeleteFail:              true,
	counterEtcdStoreDeleteSuccess:           true,
	counterEtcdStoreExpireCount:             true,
	counterEtcdStoreGetsFail:                true,
	counterEtcdStoreGetsSuccess:             true,
	counterEtcdStoreSetsFail:                true,
	counterEtcdStoreSetsSuccess:             true,
	counterEtcdStoreUpdateFail:              true,
	counterEtcdStoreUpdateSuccess:           true,
	gaugeEtcdLeaderLatencyCurrent:           true,
	gaugeEtcdSelfRecvbandwidthRate:          true,
	gaugeEtcdSelfRecvpkgRate:                true,
	gaugeEtcdSelfSendbandwidthRate:          true,
	gaugeEtcdSelfSendpkgRate:                true,
	gaugeEtcdStoreWatchers:                  true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/etcd",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
