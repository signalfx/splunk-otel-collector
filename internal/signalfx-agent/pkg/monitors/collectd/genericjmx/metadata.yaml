monitors:
- dimensions:
  doc: |
    Monitors Java services that expose metrics on JMX using collectd's
    GenericJMX plugin. The GenericJMX plugin reads Managed Beans (MBeans) from
    an MBeanServer using JMX. The monitor uses an embedded Java runtime in
    collectd via the [Java
    plugin](https://collectd.org/wiki/index.php/Plugin:Java) of collectd.

    The Java Management Extensions (JMX) is a generic framework to provide and
    query various management information. The interface is used by the Java
    Virtual Machine (JVM) to provide information about the memory used, threads
    and so on. These basic performance values can therefore be collected for
    every Java process without any support in the Java process itself.

    Advanced Java processes can use the JMX interface to provide performance
    information themselves. The Apache Tomcat application server, for example,
    provides information on the number of requests processed, the number of
    bytes sent, processing time, and thread counts.

    See the following for more information
    - https://collectd.org/documentation/manpages/collectd-java.5.shtml
    - https://collectd.org/wiki/index.php/Plugin:GenericJMX

    <!--- SETUP --->
    ### Config Example
    Example (gets the thread count from a standard JMX MBean available on all
    Java JMX-enabled apps):

    ```yaml

    monitors:
     - type: collectd/genericjmx
       host: my-java-app
       port: 7099
       mBeanDefinitions:
         threading:
           objectName: java.lang:type=Threading
           values:
           - type: gauge
             table: false
             instancePrefix: jvm.threads.count
             attribute: ThreadCount
    ```

    <!--- SETUP --->
    ## Troubleshooting

    Exposing JMX in your Java application can be a tricky process.  Oracle has a
    [helpful guide for Java
    8](https://docs.oracle.com/javase/8/docs/technotes/guides/management/agent.html)
    that explains how to expose JMX metrics automatically by setting Java
    properties on your application.  Here are a set of Java properties that are
    known to work with Java 7+:

    ```
    java \
      -Dcom.sun.management.jmxremote.port=5000 \
      -Dcom.sun.management.jmxremote.authenticate=false \
      -Dcom.sun.management.jmxremote.ssl=false \
      -Dcom.sun.management.jmxremote.rmi.port=5000 \
      ...
    ```

    This should work as long as the agent is allowed to access port 5000 on the
    Java app's host (i.e. there is no firewall blocking it).  Note that this
    does not enable authentication or encryption, but these can be added if
    desired.

    Assuming you have the `host` config set to `172.17.0.3` and the port set to
    `5000` (this is a totally arbitrary port and your JMX app will probably be
    something different), here are some errors you might receive and their
    meanings:

    ### Connection Refused
    ```
    Creating MBean server connection failed: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: 172.17.0.3; nested exception is:
         java.net.ConnectException: Connection refused (Connection refused)]
    ```

    This error indicates that the JMX connect port is not open on the specified
    host.  Confirm (via netstat/ss or some other tool) that this port
    is indeed open on the configured host, and is listening on an appropriate
    address (i.e. if the agent is running on a remote server then JMX should not
    be listening on localhost only).

    ### RMI Connection Issues

    ```
    Creating MBean server connection failed: java.rmi.ConnectException: Connection refused to host: 172.17.0.3; nested exception is:
         java.net.ConnectException: Connection timed out (Connection timed out)
    ```

    This indicates that the JMX connect port was reached successfully, but the
    RMI port that it was directed to is being blocked, probably by a firewall.
    The easiest thing to do here is to make sure the
    `com.sun.management.jmxremote.rmi.port` property in your Java app is set to
    the same port as the JMX connect port.  There may be other variations of
    this that say `Connection reset` or `Connection refused` but they all
    generally indicate a similar cause.

  metrics:
    gauge.jvm.threads.count:
      description: Number of JVM threads
      group: jvm
      default: true
      type: gauge
    gauge.loaded_classes:
      description: Number of classes loaded in the JVM
      group: jvm
      default: true
      type: gauge
    invocations:
      description: Total number of garbage collection events
      group: jvm
      default: true
      type: cumulative
    jmx_memory.committed:
      description: Amount of memory guaranteed to be available in bytes
      group: jvm
      default: true
      type: gauge
    jmx_memory.max:
      description: Maximum amount of memory that can be used in bytes
      group: jvm
      default: true
      type: gauge
    jmx_memory.used:
      description: Current memory usage in bytes
      group: jvm
      default: true
      type: gauge
    total_time_in_ms.collection_time:
      description: Amount of time spent garbage collecting in milliseconds
      group: jvm
      default: true
      type: cumulative
    jmx_memory.init:
      description: Amount of initial memory at startup in bytes
      group: jvm
      default: true
      type: gauge
  monitorType: collectd/genericjmx
  sendUnknown: true
  properties:
