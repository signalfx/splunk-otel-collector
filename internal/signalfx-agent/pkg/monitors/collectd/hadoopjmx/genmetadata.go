// Code generated by monitor-code-gen. DO NOT EDIT.

package hadoopjmx

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/hadoopjmx"

const (
	groupDataNode        = "data-node"
	groupJvm             = "jvm"
	groupNameNode        = "name-node"
	groupNodeManager     = "node-manager"
	groupResourceManager = "resource-manager"
)

var groupSet = map[string]bool{
	groupDataNode:        true,
	groupJvm:             true,
	groupNameNode:        true,
	groupNodeManager:     true,
	groupResourceManager: true,
}

const (
	counterHadoopDatanodeBlocksRead               = "counter.hadoop-datanode-blocks-read"
	counterHadoopDatanodeBlocksWritten            = "counter.hadoop-datanode-blocks-written"
	counterHadoopDatanodeBytesRead                = "counter.hadoop-datanode-bytes-read"
	counterHadoopDatanodeBytesWritten             = "counter.hadoop-datanode-bytes-written"
	counterHadoopNamenodeFilesTotal               = "counter.hadoop-namenode-files-total"
	counterHadoopNamenodeGcCount                  = "counter.hadoop-namenode-gc-count"
	counterHadoopNamenodeGcTime                   = "counter.hadoop-namenode-gc-time"
	counterHadoopNamenodeRPCTotalCalls            = "counter.hadoop-namenode-rpc-total-calls"
	counterHadoopNamenodeTotalLoad                = "counter.hadoop-namenode-total-load"
	counterHadoopNamenodeVolumeFailures           = "counter.hadoop-namenode-volume-failures"
	counterHadoopNodeManagerContainersFailed      = "counter.hadoop-nodeManager-containers-failed"
	counterHadoopNodeManagerContainersLaunched    = "counter.hadoop-nodeManager-containers-launched"
	gaugeHadoopDatanodeFsCapacity                 = "gauge.hadoop-datanode-fs-capacity"
	gaugeHadoopDatanodeFsDfsRemaining             = "gauge.hadoop-datanode-fs-dfs-remaining"
	gaugeHadoopDatanodeFsDfsUsed                  = "gauge.hadoop-datanode-fs-dfs-used"
	gaugeHadoopDatanodeInfoXceiver                = "gauge.hadoop-datanode-info-xceiver"
	gaugeHadoopDatanodeJvmHeapUsed                = "gauge.hadoop-datanode-jvm-heap-used"
	gaugeHadoopDatanodeJvmNonHeapUsed             = "gauge.hadoop-datanode-jvm-non-heap-used"
	gaugeHadoopDatanodeRPCCallQueueLength         = "gauge.hadoop-datanode-rpc-call-queue-length"
	gaugeHadoopDatanodeRPCOpenConnections         = "gauge.hadoop-datanode-rpc-open-connections"
	gaugeHadoopDatanodeRPCProcessingAvg           = "gauge.hadoop-datanode-rpc-processing-avg"
	gaugeHadoopDatanodeRPCQueueTimeAvg            = "gauge.hadoop-datanode-rpc-queue-time-avg"
	gaugeHadoopNamenodeBlocksWithCorruptReplicas  = "gauge.hadoop-namenode-blocks-with-corrupt-replicas"
	gaugeHadoopNamenodeCapacityRemaining          = "gauge.hadoop-namenode-capacity-remaining"
	gaugeHadoopNamenodeCapacityTotal              = "gauge.hadoop-namenode-capacity-total"
	gaugeHadoopNamenodeCapacityUsed               = "gauge.hadoop-namenode-capacity-used"
	gaugeHadoopNamenodeCorruptBlocks              = "gauge.hadoop-namenode-corrupt-blocks"
	gaugeHadoopNamenodeCurrentHeapUsed            = "gauge.hadoop-namenode-current-heap-used"
	gaugeHadoopNamenodeDeadDatanodes              = "gauge.hadoop-namenode-dead-datanodes"
	gaugeHadoopNamenodeDfsFree                    = "gauge.hadoop-namenode-dfs-free"
	gaugeHadoopNamenodeLiveDatanodes              = "gauge.hadoop-namenode-live-datanodes"
	gaugeHadoopNamenodeMaxHeap                    = "gauge.hadoop-namenode-max-heap"
	gaugeHadoopNamenodeMissingBlocks              = "gauge.hadoop-namenode-missing-blocks"
	gaugeHadoopNamenodePercentDfsUsed             = "gauge.hadoop-namenode-percent-dfs-used"
	gaugeHadoopNamenodePercentRemaining           = "gauge.hadoop-namenode-percent-remaining"
	gaugeHadoopNamenodeRPCAvgProcessTime          = "gauge.hadoop-namenode-rpc-avg-process-time"
	gaugeHadoopNamenodeRPCAvgQueue                = "gauge.hadoop-namenode-rpc-avg-queue"
	gaugeHadoopNamenodeStaleDatanodes             = "gauge.hadoop-namenode-stale-datanodes"
	gaugeHadoopNamenodeUnderReplicatedBlocks      = "gauge.hadoop-namenode-under-replicated-blocks"
	gaugeHadoopNodeManagerAllocatedMemory         = "gauge.hadoop-nodeManager-allocated-memory"
	gaugeHadoopNodeManagerAllocatedVcores         = "gauge.hadoop-nodeManager-allocated-vcores"
	gaugeHadoopNodeManagerAvailableMemory         = "gauge.hadoop-nodeManager-available-memory"
	gaugeHadoopNodeManagerAvailableVcores         = "gauge.hadoop-nodeManager-available-vcores"
	gaugeHadoopResourceManagerActiveApps          = "gauge.hadoop-resourceManager-active-apps"
	gaugeHadoopResourceManagerActiveNms           = "gauge.hadoop-resourceManager-active-nms"
	gaugeHadoopResourceManagerActiveUsers         = "gauge.hadoop-resourceManager-active-users"
	gaugeHadoopResourceManagerAllocatedContainers = "gauge.hadoop-resourceManager-allocated-containers"
	gaugeHadoopResourceManagerAllocatedMemory     = "gauge.hadoop-resourceManager-allocated-memory"
	gaugeHadoopResourceManagerAllocatedVcores     = "gauge.hadoop-resourceManager-allocated-vcores"
	gaugeHadoopResourceManagerAvailableMemory     = "gauge.hadoop-resourceManager-available-memory"
	gaugeHadoopResourceManagerAvailableVcores     = "gauge.hadoop-resourceManager-available-vcores"
	gaugeHadoopResourceManagerHeapMax             = "gauge.hadoop-resourceManager-heap-max"
	gaugeHadoopResourceManagerHeapUsed            = "gauge.hadoop-resourceManager-heap-used"
	gaugeJvmThreadsCount                          = "gauge.jvm.threads.count"
	gaugeLoadedClasses                            = "gauge.loaded_classes"
	invocations                                   = "invocations"
	jmxMemoryCommitted                            = "jmx_memory.committed"
	jmxMemoryInit                                 = "jmx_memory.init"
	jmxMemoryMax                                  = "jmx_memory.max"
	jmxMemoryUsed                                 = "jmx_memory.used"
	totalTimeInMsCollectionTime                   = "total_time_in_ms.collection_time"
)

var metricSet = map[string]monitors.MetricInfo{
	counterHadoopDatanodeBlocksRead:               {Type: datapoint.Counter, Group: groupDataNode},
	counterHadoopDatanodeBlocksWritten:            {Type: datapoint.Counter, Group: groupDataNode},
	counterHadoopDatanodeBytesRead:                {Type: datapoint.Counter, Group: groupDataNode},
	counterHadoopDatanodeBytesWritten:             {Type: datapoint.Counter, Group: groupDataNode},
	counterHadoopNamenodeFilesTotal:               {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNamenodeGcCount:                  {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNamenodeGcTime:                   {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNamenodeRPCTotalCalls:            {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNamenodeTotalLoad:                {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNamenodeVolumeFailures:           {Type: datapoint.Counter, Group: groupNameNode},
	counterHadoopNodeManagerContainersFailed:      {Type: datapoint.Counter, Group: groupNodeManager},
	counterHadoopNodeManagerContainersLaunched:    {Type: datapoint.Counter, Group: groupNodeManager},
	gaugeHadoopDatanodeFsCapacity:                 {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeFsDfsRemaining:             {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeFsDfsUsed:                  {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeInfoXceiver:                {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeJvmHeapUsed:                {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeJvmNonHeapUsed:             {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeRPCCallQueueLength:         {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeRPCOpenConnections:         {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeRPCProcessingAvg:           {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopDatanodeRPCQueueTimeAvg:            {Type: datapoint.Gauge, Group: groupDataNode},
	gaugeHadoopNamenodeBlocksWithCorruptReplicas:  {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeCapacityRemaining:          {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeCapacityTotal:              {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeCapacityUsed:               {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeCorruptBlocks:              {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeCurrentHeapUsed:            {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeDeadDatanodes:              {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeDfsFree:                    {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeLiveDatanodes:              {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeMaxHeap:                    {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeMissingBlocks:              {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodePercentDfsUsed:             {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodePercentRemaining:           {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeRPCAvgProcessTime:          {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeRPCAvgQueue:                {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeStaleDatanodes:             {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNamenodeUnderReplicatedBlocks:      {Type: datapoint.Gauge, Group: groupNameNode},
	gaugeHadoopNodeManagerAllocatedMemory:         {Type: datapoint.Gauge, Group: groupNodeManager},
	gaugeHadoopNodeManagerAllocatedVcores:         {Type: datapoint.Gauge, Group: groupNodeManager},
	gaugeHadoopNodeManagerAvailableMemory:         {Type: datapoint.Gauge, Group: groupNodeManager},
	gaugeHadoopNodeManagerAvailableVcores:         {Type: datapoint.Gauge, Group: groupNodeManager},
	gaugeHadoopResourceManagerActiveApps:          {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerActiveNms:           {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerActiveUsers:         {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerAllocatedContainers: {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerAllocatedMemory:     {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerAllocatedVcores:     {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerAvailableMemory:     {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerAvailableVcores:     {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerHeapMax:             {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeHadoopResourceManagerHeapUsed:            {Type: datapoint.Gauge, Group: groupResourceManager},
	gaugeJvmThreadsCount:                          {Type: datapoint.Gauge, Group: groupJvm},
	gaugeLoadedClasses:                            {Type: datapoint.Gauge, Group: groupJvm},
	invocations:                                   {Type: datapoint.Counter, Group: groupJvm},
	jmxMemoryCommitted:                            {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryInit:                                 {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryMax:                                  {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryUsed:                                 {Type: datapoint.Gauge, Group: groupJvm},
	totalTimeInMsCollectionTime:                   {Type: datapoint.Counter, Group: groupJvm},
}

var defaultMetrics = map[string]bool{
	counterHadoopNamenodeGcCount:              true,
	counterHadoopNamenodeGcTime:               true,
	counterHadoopNamenodeRPCTotalCalls:        true,
	counterHadoopNamenodeTotalLoad:            true,
	counterHadoopNamenodeVolumeFailures:       true,
	gaugeHadoopDatanodeFsCapacity:             true,
	gaugeHadoopDatanodeFsDfsRemaining:         true,
	gaugeHadoopDatanodeFsDfsUsed:              true,
	gaugeHadoopDatanodeJvmHeapUsed:            true,
	gaugeHadoopDatanodeRPCCallQueueLength:     true,
	gaugeHadoopDatanodeRPCOpenConnections:     true,
	gaugeHadoopDatanodeRPCProcessingAvg:       true,
	gaugeHadoopDatanodeRPCQueueTimeAvg:        true,
	gaugeHadoopNamenodeCapacityTotal:          true,
	gaugeHadoopNamenodeCapacityUsed:           true,
	gaugeHadoopNamenodeCurrentHeapUsed:        true,
	gaugeHadoopNamenodeDeadDatanodes:          true,
	gaugeHadoopNamenodeDfsFree:                true,
	gaugeHadoopNamenodeLiveDatanodes:          true,
	gaugeHadoopNamenodeMaxHeap:                true,
	gaugeHadoopNamenodePercentRemaining:       true,
	gaugeHadoopNamenodeRPCAvgProcessTime:      true,
	gaugeHadoopNamenodeRPCAvgQueue:            true,
	gaugeHadoopNamenodeUnderReplicatedBlocks:  true,
	gaugeHadoopResourceManagerAllocatedVcores: true,
	gaugeHadoopResourceManagerAvailableVcores: true,
	gaugeJvmThreadsCount:                      true,
	gaugeLoadedClasses:                        true,
	invocations:                               true,
	jmxMemoryCommitted:                        true,
	jmxMemoryInit:                             true,
	jmxMemoryMax:                              true,
	jmxMemoryUsed:                             true,
	totalTimeInMsCollectionTime:               true,
}

var groupMetricsMap = map[string][]string{
	groupDataNode: {
		counterHadoopDatanodeBlocksRead,
		counterHadoopDatanodeBlocksWritten,
		counterHadoopDatanodeBytesRead,
		counterHadoopDatanodeBytesWritten,
		gaugeHadoopDatanodeFsCapacity,
		gaugeHadoopDatanodeFsDfsRemaining,
		gaugeHadoopDatanodeFsDfsUsed,
		gaugeHadoopDatanodeInfoXceiver,
		gaugeHadoopDatanodeJvmHeapUsed,
		gaugeHadoopDatanodeJvmNonHeapUsed,
		gaugeHadoopDatanodeRPCCallQueueLength,
		gaugeHadoopDatanodeRPCOpenConnections,
		gaugeHadoopDatanodeRPCProcessingAvg,
		gaugeHadoopDatanodeRPCQueueTimeAvg,
	},
	groupJvm: {
		gaugeJvmThreadsCount,
		gaugeLoadedClasses,
		invocations,
		jmxMemoryCommitted,
		jmxMemoryInit,
		jmxMemoryMax,
		jmxMemoryUsed,
		totalTimeInMsCollectionTime,
	},
	groupNameNode: {
		counterHadoopNamenodeFilesTotal,
		counterHadoopNamenodeGcCount,
		counterHadoopNamenodeGcTime,
		counterHadoopNamenodeRPCTotalCalls,
		counterHadoopNamenodeTotalLoad,
		counterHadoopNamenodeVolumeFailures,
		gaugeHadoopNamenodeBlocksWithCorruptReplicas,
		gaugeHadoopNamenodeCapacityRemaining,
		gaugeHadoopNamenodeCapacityTotal,
		gaugeHadoopNamenodeCapacityUsed,
		gaugeHadoopNamenodeCorruptBlocks,
		gaugeHadoopNamenodeCurrentHeapUsed,
		gaugeHadoopNamenodeDeadDatanodes,
		gaugeHadoopNamenodeDfsFree,
		gaugeHadoopNamenodeLiveDatanodes,
		gaugeHadoopNamenodeMaxHeap,
		gaugeHadoopNamenodeMissingBlocks,
		gaugeHadoopNamenodePercentDfsUsed,
		gaugeHadoopNamenodePercentRemaining,
		gaugeHadoopNamenodeRPCAvgProcessTime,
		gaugeHadoopNamenodeRPCAvgQueue,
		gaugeHadoopNamenodeStaleDatanodes,
		gaugeHadoopNamenodeUnderReplicatedBlocks,
	},
	groupNodeManager: {
		counterHadoopNodeManagerContainersFailed,
		counterHadoopNodeManagerContainersLaunched,
		gaugeHadoopNodeManagerAllocatedMemory,
		gaugeHadoopNodeManagerAllocatedVcores,
		gaugeHadoopNodeManagerAvailableMemory,
		gaugeHadoopNodeManagerAvailableVcores,
	},
	groupResourceManager: {
		gaugeHadoopResourceManagerActiveApps,
		gaugeHadoopResourceManagerActiveNms,
		gaugeHadoopResourceManagerActiveUsers,
		gaugeHadoopResourceManagerAllocatedContainers,
		gaugeHadoopResourceManagerAllocatedMemory,
		gaugeHadoopResourceManagerAllocatedVcores,
		gaugeHadoopResourceManagerAvailableMemory,
		gaugeHadoopResourceManagerAvailableVcores,
		gaugeHadoopResourceManagerHeapMax,
		gaugeHadoopResourceManagerHeapUsed,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/hadoopjmx",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     true,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
