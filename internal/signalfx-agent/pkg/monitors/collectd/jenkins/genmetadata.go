// Code generated by monitor-code-gen. DO NOT EDIT.

package jenkins

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/jenkins"

var groupSet = map[string]bool{}

const (
	gaugeJenkinsJobDuration              = "gauge.jenkins.job.duration"
	gaugeJenkinsNodeExecutorCountValue   = "gauge.jenkins.node.executor.count.value"
	gaugeJenkinsNodeExecutorInUseValue   = "gauge.jenkins.node.executor.in-use.value"
	gaugeJenkinsNodeHealthCheckScore     = "gauge.jenkins.node.health-check.score"
	gaugeJenkinsNodeHealthDiskSpace      = "gauge.jenkins.node.health.disk.space"
	gaugeJenkinsNodeHealthPlugins        = "gauge.jenkins.node.health.plugins"
	gaugeJenkinsNodeHealthTemporarySpace = "gauge.jenkins.node.health.temporary.space"
	gaugeJenkinsNodeHealthThreadDeadlock = "gauge.jenkins.node.health.thread-deadlock"
	gaugeJenkinsNodeOnlineStatus         = "gauge.jenkins.node.online.status"
	gaugeJenkinsNodeQueueSizeValue       = "gauge.jenkins.node.queue.size.value"
	gaugeJenkinsNodeSlaveOnlineStatus    = "gauge.jenkins.node.slave.online.status"
	gaugeJenkinsNodeVMMemoryHeapUsage    = "gauge.jenkins.node.vm.memory.heap.usage"
	gaugeJenkinsNodeVMMemoryNonHeapUsed  = "gauge.jenkins.node.vm.memory.non-heap.used"
	gaugeJenkinsNodeVMMemoryTotalUsed    = "gauge.jenkins.node.vm.memory.total.used"
)

var metricSet = map[string]monitors.MetricInfo{
	gaugeJenkinsJobDuration:              {Type: datapoint.Gauge},
	gaugeJenkinsNodeExecutorCountValue:   {Type: datapoint.Gauge},
	gaugeJenkinsNodeExecutorInUseValue:   {Type: datapoint.Gauge},
	gaugeJenkinsNodeHealthCheckScore:     {Type: datapoint.Gauge},
	gaugeJenkinsNodeHealthDiskSpace:      {Type: datapoint.Gauge},
	gaugeJenkinsNodeHealthPlugins:        {Type: datapoint.Gauge},
	gaugeJenkinsNodeHealthTemporarySpace: {Type: datapoint.Gauge},
	gaugeJenkinsNodeHealthThreadDeadlock: {Type: datapoint.Gauge},
	gaugeJenkinsNodeOnlineStatus:         {Type: datapoint.Gauge},
	gaugeJenkinsNodeQueueSizeValue:       {Type: datapoint.Gauge},
	gaugeJenkinsNodeSlaveOnlineStatus:    {Type: datapoint.Gauge},
	gaugeJenkinsNodeVMMemoryHeapUsage:    {Type: datapoint.Gauge},
	gaugeJenkinsNodeVMMemoryNonHeapUsed:  {Type: datapoint.Gauge},
	gaugeJenkinsNodeVMMemoryTotalUsed:    {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	gaugeJenkinsJobDuration:              true,
	gaugeJenkinsNodeExecutorCountValue:   true,
	gaugeJenkinsNodeExecutorInUseValue:   true,
	gaugeJenkinsNodeHealthCheckScore:     true,
	gaugeJenkinsNodeHealthDiskSpace:      true,
	gaugeJenkinsNodeHealthPlugins:        true,
	gaugeJenkinsNodeHealthTemporarySpace: true,
	gaugeJenkinsNodeHealthThreadDeadlock: true,
	gaugeJenkinsNodeOnlineStatus:         true,
	gaugeJenkinsNodeQueueSizeValue:       true,
	gaugeJenkinsNodeSlaveOnlineStatus:    true,
	gaugeJenkinsNodeVMMemoryHeapUsage:    true,
	gaugeJenkinsNodeVMMemoryNonHeapUsed:  true,
	gaugeJenkinsNodeVMMemoryTotalUsed:    true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/jenkins",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         true,
}
