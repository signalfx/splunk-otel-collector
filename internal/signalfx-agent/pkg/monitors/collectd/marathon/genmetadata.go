// Code generated by monitor-code-gen. DO NOT EDIT.

package marathon

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/marathon"

var groupSet = map[string]bool{}

const (
	gaugeServiceMesosphereMarathonAppCPUAllocated               = "gauge.service.mesosphere.marathon.app.cpu.allocated"
	gaugeServiceMesosphereMarathonAppCPUAllocatedPerInstance    = "gauge.service.mesosphere.marathon.app.cpu.allocated.per.instance"
	gaugeServiceMesosphereMarathonAppDelayed                    = "gauge.service.mesosphere.marathon.app.delayed"
	gaugeServiceMesosphereMarathonAppDeploymentsTotal           = "gauge.service.mesosphere.marathon.app.deployments.total"
	gaugeServiceMesosphereMarathonAppDiskAllocated              = "gauge.service.mesosphere.marathon.app.disk.allocated"
	gaugeServiceMesosphereMarathonAppDiskAllocatedPerInstance   = "gauge.service.mesosphere.marathon.app.disk.allocated.per.instance"
	gaugeServiceMesosphereMarathonAppGpuAllocated               = "gauge.service.mesosphere.marathon.app.gpu.allocated"
	gaugeServiceMesosphereMarathonAppGpuAllocatedPerInstance    = "gauge.service.mesosphere.marathon.app.gpu.allocated.per.instance"
	gaugeServiceMesosphereMarathonAppInstancesTotal             = "gauge.service.mesosphere.marathon.app.instances.total"
	gaugeServiceMesosphereMarathonAppMemoryAllocated            = "gauge.service.mesosphere.marathon.app.memory.allocated"
	gaugeServiceMesosphereMarathonAppMemoryAllocatedPerInstance = "gauge.service.mesosphere.marathon.app.memory.allocated.per.instance"
	gaugeServiceMesosphereMarathonAppTasksRunning               = "gauge.service.mesosphere.marathon.app.tasks.running"
	gaugeServiceMesosphereMarathonAppTasksStaged                = "gauge.service.mesosphere.marathon.app.tasks.staged"
	gaugeServiceMesosphereMarathonAppTasksUnhealthy             = "gauge.service.mesosphere.marathon.app.tasks.unhealthy"
	gaugeServiceMesosphereMarathonTaskHealthchecksFailingTotal  = "gauge.service.mesosphere.marathon.task.healthchecks.failing.total"
	gaugeServiceMesosphereMarathonTaskHealthchecksPassingTotal  = "gauge.service.mesosphere.marathon.task.healthchecks.passing.total"
	gaugeServiceMesosphereMarathonTaskStagedTimeElapsed         = "gauge.service.mesosphere.marathon.task.staged.time.elapsed"
	gaugeServiceMesosphereMarathonTaskStartTimeElapsed          = "gauge.service.mesosphere.marathon.task.start.time.elapsed"
)

var metricSet = map[string]monitors.MetricInfo{
	gaugeServiceMesosphereMarathonAppCPUAllocated:               {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppCPUAllocatedPerInstance:    {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppDelayed:                    {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppDeploymentsTotal:           {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppDiskAllocated:              {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppDiskAllocatedPerInstance:   {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppGpuAllocated:               {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppGpuAllocatedPerInstance:    {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppInstancesTotal:             {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppMemoryAllocated:            {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppMemoryAllocatedPerInstance: {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppTasksRunning:               {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppTasksStaged:                {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonAppTasksUnhealthy:             {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonTaskHealthchecksFailingTotal:  {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonTaskHealthchecksPassingTotal:  {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonTaskStagedTimeElapsed:         {Type: datapoint.Gauge},
	gaugeServiceMesosphereMarathonTaskStartTimeElapsed:          {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	gaugeServiceMesosphereMarathonAppCPUAllocated:               true,
	gaugeServiceMesosphereMarathonAppCPUAllocatedPerInstance:    true,
	gaugeServiceMesosphereMarathonAppDiskAllocated:              true,
	gaugeServiceMesosphereMarathonAppDiskAllocatedPerInstance:   true,
	gaugeServiceMesosphereMarathonAppInstancesTotal:             true,
	gaugeServiceMesosphereMarathonAppMemoryAllocated:            true,
	gaugeServiceMesosphereMarathonAppMemoryAllocatedPerInstance: true,
	gaugeServiceMesosphereMarathonAppTasksRunning:               true,
	gaugeServiceMesosphereMarathonAppTasksStaged:                true,
	gaugeServiceMesosphereMarathonAppTasksUnhealthy:             true,
	gaugeServiceMesosphereMarathonTaskHealthchecksFailingTotal:  true,
	gaugeServiceMesosphereMarathonTaskHealthchecksPassingTotal:  true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/marathon",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         true,
}
