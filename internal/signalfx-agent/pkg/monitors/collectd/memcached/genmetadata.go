// Code generated by monitor-code-gen. DO NOT EDIT.

package memcached

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/memcached"

var groupSet = map[string]bool{}

const (
	connectionsOpened           = "connections.opened"
	dfCacheFree                 = "df.cache.free"
	dfCacheUsed                 = "df.cache.used"
	memcachedCommandFlush       = "memcached_command.flush"
	memcachedCommandGet         = "memcached_command.get"
	memcachedCommandMeta        = "memcached_command.meta"
	memcachedCommandSet         = "memcached_command.set"
	memcachedCommandTouch       = "memcached_command.touch"
	memcachedConnectionsCurrent = "memcached_connections.current"
	memcachedItemsCurrent       = "memcached_items.current"
	memcachedOctetsRx           = "memcached_octets.rx"
	memcachedOctetsTx           = "memcached_octets.tx"
	memcachedOpsDecrHits        = "memcached_ops.decr_hits"
	memcachedOpsDecrMisses      = "memcached_ops.decr_misses"
	memcachedOpsDeleteHits      = "memcached_ops.delete_hits"
	memcachedOpsDeleteMisses    = "memcached_ops.delete_misses"
	memcachedOpsEvictions       = "memcached_ops.evictions"
	memcachedOpsHits            = "memcached_ops.hits"
	memcachedOpsIncrHits        = "memcached_ops.incr_hits"
	memcachedOpsIncrMisses      = "memcached_ops.incr_misses"
	memcachedOpsMisses          = "memcached_ops.misses"
	psCountThreads              = "ps_count.threads"
	psCputimeSyst               = "ps_cputime.syst"
	psCputimeUser               = "ps_cputime.user"
	totalEventsListenDisabled   = "total_events.listen_disabled"
)

var metricSet = map[string]monitors.MetricInfo{
	connectionsOpened:           {Type: datapoint.Counter},
	dfCacheFree:                 {Type: datapoint.Gauge},
	dfCacheUsed:                 {Type: datapoint.Gauge},
	memcachedCommandFlush:       {Type: datapoint.Counter},
	memcachedCommandGet:         {Type: datapoint.Counter},
	memcachedCommandMeta:        {Type: datapoint.Counter},
	memcachedCommandSet:         {Type: datapoint.Counter},
	memcachedCommandTouch:       {Type: datapoint.Counter},
	memcachedConnectionsCurrent: {Type: datapoint.Gauge},
	memcachedItemsCurrent:       {Type: datapoint.Gauge},
	memcachedOctetsRx:           {Type: datapoint.Counter},
	memcachedOctetsTx:           {Type: datapoint.Counter},
	memcachedOpsDecrHits:        {Type: datapoint.Counter},
	memcachedOpsDecrMisses:      {Type: datapoint.Counter},
	memcachedOpsDeleteHits:      {Type: datapoint.Counter},
	memcachedOpsDeleteMisses:    {Type: datapoint.Counter},
	memcachedOpsEvictions:       {Type: datapoint.Counter},
	memcachedOpsHits:            {Type: datapoint.Counter},
	memcachedOpsIncrHits:        {Type: datapoint.Counter},
	memcachedOpsIncrMisses:      {Type: datapoint.Counter},
	memcachedOpsMisses:          {Type: datapoint.Counter},
	psCountThreads:              {Type: datapoint.Gauge},
	psCputimeSyst:               {Type: datapoint.Counter},
	psCputimeUser:               {Type: datapoint.Counter},
	totalEventsListenDisabled:   {Type: datapoint.Counter},
}

var defaultMetrics = map[string]bool{
	dfCacheFree:                 true,
	dfCacheUsed:                 true,
	memcachedCommandGet:         true,
	memcachedCommandSet:         true,
	memcachedConnectionsCurrent: true,
	memcachedItemsCurrent:       true,
	memcachedOctetsRx:           true,
	memcachedOctetsTx:           true,
	memcachedOpsEvictions:       true,
	memcachedOpsHits:            true,
	memcachedOpsMisses:          true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/memcached",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
