// Code generated by monitor-code-gen. DO NOT EDIT.

package mongodb

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/mongodb"

const (
	groupCollection    = "collection"
	groupCollectionTop = "collection-top"
)

var groupSet = map[string]bool{
	groupCollection:    true,
	groupCollectionTop: true,
}

const (
	counterAssertsRegular                          = "counter.asserts.regular"
	counterAssertsWarning                          = "counter.asserts.warning"
	counterBackgroundFlushingFlushes               = "counter.backgroundFlushing.flushes"
	counterCollectionCommandsCount                 = "counter.collection.commandsCount"
	counterCollectionCommandsTime                  = "counter.collection.commandsTime"
	counterCollectionGetmoreCount                  = "counter.collection.getmoreCount"
	counterCollectionGetmoreTime                   = "counter.collection.getmoreTime"
	counterCollectionIndexAccessesOps              = "counter.collection.index.accesses.ops"
	counterCollectionInsertCount                   = "counter.collection.insertCount"
	counterCollectionInsertTime                    = "counter.collection.insertTime"
	counterCollectionQueriesCount                  = "counter.collection.queriesCount"
	counterCollectionQueriesTime                   = "counter.collection.queriesTime"
	counterCollectionReadLockCount                 = "counter.collection.readLockCount"
	counterCollectionReadLockTime                  = "counter.collection.readLockTime"
	counterCollectionRemoveCount                   = "counter.collection.removeCount"
	counterCollectionRemoveTime                    = "counter.collection.removeTime"
	counterCollectionTotalCount                    = "counter.collection.totalCount"
	counterCollectionTotalTime                     = "counter.collection.totalTime"
	counterCollectionUpdateCount                   = "counter.collection.updateCount"
	counterCollectionUpdateTime                    = "counter.collection.updateTime"
	counterCollectionWriteLockCount                = "counter.collection.writeLockCount"
	counterCollectionWriteLockTime                 = "counter.collection.writeLockTime"
	counterExtraInfoPageFaults                     = "counter.extra_info.page_faults"
	counterLockDatabaseAcquireCountIntentExclusive = "counter.lock.Database.acquireCount.intentExclusive"
	counterLockDatabaseAcquireCountIntentShared    = "counter.lock.Database.acquireCount.intentShared"
	counterLockDatabaseAcquireCountRead            = "counter.lock.Database.acquireCount.read"
	counterLockDatabaseAcquireCountWrite           = "counter.lock.Database.acquireCount.write"
	counterLockGlobalAcquireCountIntentExclusive   = "counter.lock.Global.acquireCount.intentExclusive"
	counterLockGlobalAcquireCountIntentShared      = "counter.lock.Global.acquireCount.intentShared"
	counterLockGlobalAcquireCountWrite             = "counter.lock.Global.acquireCount.write"
	counterNetworkBytesIn                          = "counter.network.bytesIn"
	counterNetworkBytesOut                         = "counter.network.bytesOut"
	counterNetworkNumRequests                      = "counter.network.numRequests"
	counterOpcountersCommand                       = "counter.opcounters.command"
	counterOpcountersDelete                        = "counter.opcounters.delete"
	counterOpcountersGetmore                       = "counter.opcounters.getmore"
	counterOpcountersInsert                        = "counter.opcounters.insert"
	counterOpcountersQuery                         = "counter.opcounters.query"
	counterOpcountersUpdate                        = "counter.opcounters.update"
	counterOpcountersReplCommand                   = "counter.opcountersRepl.command"
	counterOpcountersReplDelete                    = "counter.opcountersRepl.delete"
	counterOpcountersReplGetmore                   = "counter.opcountersRepl.getmore"
	counterOpcountersReplInsert                    = "counter.opcountersRepl.insert"
	counterOpcountersReplQuery                     = "counter.opcountersRepl.query"
	counterOpcountersReplUpdate                    = "counter.opcountersRepl.update"
	gaugeBackgroundFlushingAverageMs               = "gauge.backgroundFlushing.average_ms"
	gaugeBackgroundFlushingLastMs                  = "gauge.backgroundFlushing.last_ms"
	gaugeCollectionAvgObjSize                      = "gauge.collection.avgObjSize"
	gaugeCollectionCount                           = "gauge.collection.count"
	gaugeCollectionIndexSize                       = "gauge.collection.indexSize"
	gaugeCollectionMax                             = "gauge.collection.max"
	gaugeCollectionMaxSize                         = "gauge.collection.maxSize"
	gaugeCollectionSize                            = "gauge.collection.size"
	gaugeCollectionStorageSize                     = "gauge.collection.storageSize"
	gaugeCollections                               = "gauge.collections"
	gaugeConnectionsAvailable                      = "gauge.connections.available"
	gaugeConnectionsCurrent                        = "gauge.connections.current"
	gaugeConnectionsTotalCreated                   = "gauge.connections.totalCreated"
	gaugeDataSize                                  = "gauge.dataSize"
	gaugeExtraInfoHeapUsageBytes                   = "gauge.extra_info.heap_usage_bytes"
	gaugeGlobalLockActiveClientsReaders            = "gauge.globalLock.activeClients.readers"
	gaugeGlobalLockActiveClientsTotal              = "gauge.globalLock.activeClients.total"
	gaugeGlobalLockActiveClientsWriters            = "gauge.globalLock.activeClients.writers"
	gaugeGlobalLockCurrentQueueReaders             = "gauge.globalLock.currentQueue.readers"
	gaugeGlobalLockCurrentQueueTotal               = "gauge.globalLock.currentQueue.total"
	gaugeGlobalLockCurrentQueueWriters             = "gauge.globalLock.currentQueue.writers"
	gaugeIndexSize                                 = "gauge.indexSize"
	gaugeIndexes                                   = "gauge.indexes"
	gaugeMemMapped                                 = "gauge.mem.mapped"
	gaugeMemResident                               = "gauge.mem.resident"
	gaugeMemVirtual                                = "gauge.mem.virtual"
	gaugeNumExtents                                = "gauge.numExtents"
	gaugeObjects                                   = "gauge.objects"
	gaugeReplActiveNodes                           = "gauge.repl.active_nodes"
	gaugeReplIsPrimaryNode                         = "gauge.repl.is_primary_node"
	gaugeReplMaxLag                                = "gauge.repl.max_lag"
	gaugeStorageSize                               = "gauge.storageSize"
	gaugeTcmallocGenericHeapSize                   = "gauge.tcmalloc.generic.heap_size"
	gaugeUptime                                    = "gauge.uptime"
)

var metricSet = map[string]monitors.MetricInfo{
	counterAssertsRegular:                          {Type: datapoint.Counter},
	counterAssertsWarning:                          {Type: datapoint.Counter},
	counterBackgroundFlushingFlushes:               {Type: datapoint.Gauge},
	counterCollectionCommandsCount:                 {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionCommandsTime:                  {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionGetmoreCount:                  {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionGetmoreTime:                   {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionIndexAccessesOps:              {Type: datapoint.Count, Group: groupCollection},
	counterCollectionInsertCount:                   {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionInsertTime:                    {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionQueriesCount:                  {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionQueriesTime:                   {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionReadLockCount:                 {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionReadLockTime:                  {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionRemoveCount:                   {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionRemoveTime:                    {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionTotalCount:                    {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionTotalTime:                     {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionUpdateCount:                   {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionUpdateTime:                    {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionWriteLockCount:                {Type: datapoint.Count, Group: groupCollectionTop},
	counterCollectionWriteLockTime:                 {Type: datapoint.Count, Group: groupCollectionTop},
	counterExtraInfoPageFaults:                     {Type: datapoint.Gauge},
	counterLockDatabaseAcquireCountIntentExclusive: {Type: datapoint.Counter},
	counterLockDatabaseAcquireCountIntentShared:    {Type: datapoint.Counter},
	counterLockDatabaseAcquireCountRead:            {Type: datapoint.Counter},
	counterLockDatabaseAcquireCountWrite:           {Type: datapoint.Counter},
	counterLockGlobalAcquireCountIntentExclusive:   {Type: datapoint.Counter},
	counterLockGlobalAcquireCountIntentShared:      {Type: datapoint.Counter},
	counterLockGlobalAcquireCountWrite:             {Type: datapoint.Counter},
	counterNetworkBytesIn:                          {Type: datapoint.Gauge},
	counterNetworkBytesOut:                         {Type: datapoint.Gauge},
	counterNetworkNumRequests:                      {Type: datapoint.Counter},
	counterOpcountersCommand:                       {Type: datapoint.Counter},
	counterOpcountersDelete:                        {Type: datapoint.Counter},
	counterOpcountersGetmore:                       {Type: datapoint.Counter},
	counterOpcountersInsert:                        {Type: datapoint.Counter},
	counterOpcountersQuery:                         {Type: datapoint.Counter},
	counterOpcountersUpdate:                        {Type: datapoint.Counter},
	counterOpcountersReplCommand:                   {Type: datapoint.Counter},
	counterOpcountersReplDelete:                    {Type: datapoint.Counter},
	counterOpcountersReplGetmore:                   {Type: datapoint.Counter},
	counterOpcountersReplInsert:                    {Type: datapoint.Counter},
	counterOpcountersReplQuery:                     {Type: datapoint.Counter},
	counterOpcountersReplUpdate:                    {Type: datapoint.Counter},
	gaugeBackgroundFlushingAverageMs:               {Type: datapoint.Gauge},
	gaugeBackgroundFlushingLastMs:                  {Type: datapoint.Gauge},
	gaugeCollectionAvgObjSize:                      {Type: datapoint.Gauge, Group: groupCollection},
	gaugeCollectionCount:                           {Type: datapoint.Gauge, Group: groupCollection},
	gaugeCollectionIndexSize:                       {Type: datapoint.Gauge, Group: groupCollection},
	gaugeCollectionMax:                             {Type: datapoint.Gauge},
	gaugeCollectionMaxSize:                         {Type: datapoint.Gauge},
	gaugeCollectionSize:                            {Type: datapoint.Gauge, Group: groupCollection},
	gaugeCollectionStorageSize:                     {Type: datapoint.Gauge, Group: groupCollection},
	gaugeCollections:                               {Type: datapoint.Gauge},
	gaugeConnectionsAvailable:                      {Type: datapoint.Gauge},
	gaugeConnectionsCurrent:                        {Type: datapoint.Gauge},
	gaugeConnectionsTotalCreated:                   {Type: datapoint.Counter},
	gaugeDataSize:                                  {Type: datapoint.Gauge},
	gaugeExtraInfoHeapUsageBytes:                   {Type: datapoint.Gauge},
	gaugeGlobalLockActiveClientsReaders:            {Type: datapoint.Gauge},
	gaugeGlobalLockActiveClientsTotal:              {Type: datapoint.Gauge},
	gaugeGlobalLockActiveClientsWriters:            {Type: datapoint.Gauge},
	gaugeGlobalLockCurrentQueueReaders:             {Type: datapoint.Gauge},
	gaugeGlobalLockCurrentQueueTotal:               {Type: datapoint.Gauge},
	gaugeGlobalLockCurrentQueueWriters:             {Type: datapoint.Gauge},
	gaugeIndexSize:                                 {Type: datapoint.Gauge},
	gaugeIndexes:                                   {Type: datapoint.Gauge},
	gaugeMemMapped:                                 {Type: datapoint.Gauge},
	gaugeMemResident:                               {Type: datapoint.Gauge},
	gaugeMemVirtual:                                {Type: datapoint.Gauge},
	gaugeNumExtents:                                {Type: datapoint.Gauge},
	gaugeObjects:                                   {Type: datapoint.Gauge},
	gaugeReplActiveNodes:                           {Type: datapoint.Gauge},
	gaugeReplIsPrimaryNode:                         {Type: datapoint.Gauge},
	gaugeReplMaxLag:                                {Type: datapoint.Gauge},
	gaugeStorageSize:                               {Type: datapoint.Gauge},
	gaugeTcmallocGenericHeapSize:                   {Type: datapoint.Gauge},
	gaugeUptime:                                    {Type: datapoint.Count},
}

var defaultMetrics = map[string]bool{
	counterBackgroundFlushingFlushes:    true,
	counterExtraInfoPageFaults:          true,
	counterNetworkBytesIn:               true,
	counterNetworkBytesOut:              true,
	counterNetworkNumRequests:           true,
	counterOpcountersDelete:             true,
	counterOpcountersInsert:             true,
	counterOpcountersQuery:              true,
	counterOpcountersUpdate:             true,
	gaugeBackgroundFlushingAverageMs:    true,
	gaugeBackgroundFlushingLastMs:       true,
	gaugeConnectionsCurrent:             true,
	gaugeDataSize:                       true,
	gaugeExtraInfoHeapUsageBytes:        true,
	gaugeGlobalLockActiveClientsReaders: true,
	gaugeGlobalLockActiveClientsWriters: true,
	gaugeGlobalLockCurrentQueueReaders:  true,
	gaugeGlobalLockCurrentQueueWriters:  true,
	gaugeIndexSize:                      true,
	gaugeMemMapped:                      true,
	gaugeMemResident:                    true,
	gaugeMemVirtual:                     true,
	gaugeObjects:                        true,
	gaugeReplActiveNodes:                true,
	gaugeReplIsPrimaryNode:              true,
	gaugeReplMaxLag:                     true,
	gaugeStorageSize:                    true,
	gaugeTcmallocGenericHeapSize:        true,
	gaugeUptime:                         true,
}

var groupMetricsMap = map[string][]string{
	groupCollection: {
		counterCollectionIndexAccessesOps,
		gaugeCollectionAvgObjSize,
		gaugeCollectionCount,
		gaugeCollectionIndexSize,
		gaugeCollectionSize,
		gaugeCollectionStorageSize,
	},
	groupCollectionTop: {
		counterCollectionCommandsCount,
		counterCollectionCommandsTime,
		counterCollectionGetmoreCount,
		counterCollectionGetmoreTime,
		counterCollectionInsertCount,
		counterCollectionInsertTime,
		counterCollectionQueriesCount,
		counterCollectionQueriesTime,
		counterCollectionReadLockCount,
		counterCollectionReadLockTime,
		counterCollectionRemoveCount,
		counterCollectionRemoveTime,
		counterCollectionTotalCount,
		counterCollectionTotalTime,
		counterCollectionUpdateCount,
		counterCollectionUpdateTime,
		counterCollectionWriteLockCount,
		counterCollectionWriteLockTime,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/mongodb",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
