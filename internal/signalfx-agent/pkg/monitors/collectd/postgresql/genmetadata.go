// Code generated by monitor-code-gen. DO NOT EDIT.

package postgresql

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/postgresql"

var groupSet = map[string]bool{}

const (
	pgBlksHeapHit      = "pg_blks.heap_hit"
	pgBlksHeapRead     = "pg_blks.heap_read"
	pgBlksIdxHit       = "pg_blks.idx_hit"
	pgBlksIdxRead      = "pg_blks.idx_read"
	pgBlksTidxHit      = "pg_blks.tidx_hit"
	pgBlksTidxRead     = "pg_blks.tidx_read"
	pgBlksToastHit     = "pg_blks.toast_hit"
	pgBlksToastRead    = "pg_blks.toast_read"
	pgDbSize           = "pg_db_size"
	pgNTupCDel         = "pg_n_tup_c.del"
	pgNTupCHotUpd      = "pg_n_tup_c.hot_upd"
	pgNTupCIns         = "pg_n_tup_c.ins"
	pgNTupCUpd         = "pg_n_tup_c.upd"
	pgNTupGDead        = "pg_n_tup_g.dead"
	pgNTupGLive        = "pg_n_tup_g.live"
	pgNumbackends      = "pg_numbackends"
	pgScanIdx          = "pg_scan.idx"
	pgScanIdxTupFetch  = "pg_scan.idx_tup_fetch"
	pgScanSeq          = "pg_scan.seq"
	pgScanSeqTupRead   = "pg_scan.seq_tup_read"
	pgXactCommit       = "pg_xact.commit"
	pgXactNumDeadlocks = "pg_xact.num_deadlocks"
	pgXactRollback     = "pg_xact.rollback"
)

var metricSet = map[string]monitors.MetricInfo{
	pgBlksHeapHit:      {Type: datapoint.Gauge},
	pgBlksHeapRead:     {Type: datapoint.Gauge},
	pgBlksIdxHit:       {Type: datapoint.Gauge},
	pgBlksIdxRead:      {Type: datapoint.Gauge},
	pgBlksTidxHit:      {Type: datapoint.Gauge},
	pgBlksTidxRead:     {Type: datapoint.Gauge},
	pgBlksToastHit:     {Type: datapoint.Gauge},
	pgBlksToastRead:    {Type: datapoint.Gauge},
	pgDbSize:           {Type: datapoint.Gauge},
	pgNTupCDel:         {Type: datapoint.Gauge},
	pgNTupCHotUpd:      {Type: datapoint.Gauge},
	pgNTupCIns:         {Type: datapoint.Gauge},
	pgNTupCUpd:         {Type: datapoint.Gauge},
	pgNTupGDead:        {Type: datapoint.Gauge},
	pgNTupGLive:        {Type: datapoint.Gauge},
	pgNumbackends:      {Type: datapoint.Gauge},
	pgScanIdx:          {Type: datapoint.Gauge},
	pgScanIdxTupFetch:  {Type: datapoint.Gauge},
	pgScanSeq:          {Type: datapoint.Gauge},
	pgScanSeqTupRead:   {Type: datapoint.Gauge},
	pgXactCommit:       {Type: datapoint.Gauge},
	pgXactNumDeadlocks: {Type: datapoint.Gauge},
	pgXactRollback:     {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	pgBlksHeapHit:     true,
	pgBlksHeapRead:    true,
	pgBlksIdxHit:      true,
	pgBlksIdxRead:     true,
	pgDbSize:          true,
	pgNTupCDel:        true,
	pgNTupCIns:        true,
	pgNTupCUpd:        true,
	pgNTupGLive:       true,
	pgNumbackends:     true,
	pgScanIdx:         true,
	pgScanIdxTupFetch: true,
	pgScanSeq:         true,
	pgScanSeqTupRead:  true,
	pgXactCommit:      true,
	pgXactRollback:    true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/postgresql",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
