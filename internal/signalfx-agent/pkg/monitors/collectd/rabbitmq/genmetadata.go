// Code generated by monitor-code-gen. DO NOT EDIT.

package rabbitmq

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/rabbitmq"

const (
	groupChannel    = "channel"
	groupConnection = "connection"
	groupExchange   = "exchange"
	groupNode       = "node"
	groupQueue      = "queue"
)

var groupSet = map[string]bool{
	groupChannel:    true,
	groupConnection: true,
	groupExchange:   true,
	groupNode:       true,
	groupQueue:      true,
}

const (
	counterChannelMessageStatsAck                  = "counter.channel.message_stats.ack"
	counterChannelMessageStatsConfirm              = "counter.channel.message_stats.confirm"
	counterChannelMessageStatsDeliver              = "counter.channel.message_stats.deliver"
	counterChannelMessageStatsDeliverGet           = "counter.channel.message_stats.deliver_get"
	counterChannelMessageStatsPublish              = "counter.channel.message_stats.publish"
	counterConnectionChannelMax                    = "counter.connection.channel_max"
	counterConnectionRecvCnt                       = "counter.connection.recv_cnt"
	counterConnectionRecvOct                       = "counter.connection.recv_oct"
	counterConnectionSendCnt                       = "counter.connection.send_cnt"
	counterConnectionSendOct                       = "counter.connection.send_oct"
	counterExchangeMessageStatsConfirm             = "counter.exchange.message_stats.confirm"
	counterExchangeMessageStatsPublishIn           = "counter.exchange.message_stats.publish_in"
	counterExchangeMessageStatsPublishOut          = "counter.exchange.message_stats.publish_out"
	counterNodeIoReadBytes                         = "counter.node.io_read_bytes"
	counterNodeIoReadCount                         = "counter.node.io_read_count"
	counterNodeMnesiaDiskTxCount                   = "counter.node.mnesia_disk_tx_count"
	counterNodeMnesiaRAMTxCount                    = "counter.node.mnesia_ram_tx_count"
	counterQueueDiskReads                          = "counter.queue.disk_reads"
	counterQueueDiskWrites                         = "counter.queue.disk_writes"
	counterQueueMessageStatsAck                    = "counter.queue.message_stats.ack"
	counterQueueMessageStatsDeliver                = "counter.queue.message_stats.deliver"
	counterQueueMessageStatsDeliverGet             = "counter.queue.message_stats.deliver_get"
	counterQueueMessageStatsPublish                = "counter.queue.message_stats.publish"
	gaugeChannelConnectionDetailsPeerPort          = "gauge.channel.connection_details.peer_port"
	gaugeChannelConsumerCount                      = "gauge.channel.consumer_count"
	gaugeChannelGlobalPrefetchCount                = "gauge.channel.global_prefetch_count"
	gaugeChannelMessageStatsAckDetailsRate         = "gauge.channel.message_stats.ack_details.rate"
	gaugeChannelMessageStatsConfirmDetailsRate     = "gauge.channel.message_stats.confirm_details.rate"
	gaugeChannelMessageStatsDeliverDetailsRate     = "gauge.channel.message_stats.deliver_details.rate"
	gaugeChannelMessageStatsDeliverGetDetailsRate  = "gauge.channel.message_stats.deliver_get_details.rate"
	gaugeChannelMessageStatsPublishDetailsRate     = "gauge.channel.message_stats.publish_details.rate"
	gaugeChannelMessagesUnacknowledged             = "gauge.channel.messages_unacknowledged"
	gaugeChannelMessagesUncommitted                = "gauge.channel.messages_uncommitted"
	gaugeChannelMessagesUnconfirmed                = "gauge.channel.messages_unconfirmed"
	gaugeChannelNumber                             = "gauge.channel.number"
	gaugeChannelPrefetchCount                      = "gauge.channel.prefetch_count"
	gaugeConnectionChannels                        = "gauge.connection.channels"
	gaugeConnectionConnectedAt                     = "gauge.connection.connected_at"
	gaugeConnectionFrameMax                        = "gauge.connection.frame_max"
	gaugeConnectionPeerPort                        = "gauge.connection.peer_port"
	gaugeConnectionPort                            = "gauge.connection.port"
	gaugeConnectionRecvOctDetailsRate              = "gauge.connection.recv_oct_details.rate"
	gaugeConnectionSendOctDetailsRate              = "gauge.connection.send_oct_details.rate"
	gaugeConnectionSendPend                        = "gauge.connection.send_pend"
	gaugeConnectionTimeout                         = "gauge.connection.timeout"
	gaugeExchangeMessageStatsConfirmDetailsRate    = "gauge.exchange.message_stats.confirm_details.rate"
	gaugeExchangeMessageStatsPublishInDetailsRate  = "gauge.exchange.message_stats.publish_in_details.rate"
	gaugeExchangeMessageStatsPublishOutDetailsRate = "gauge.exchange.message_stats.publish_out_details.rate"
	gaugeNodeDiskFree                              = "gauge.node.disk_free"
	gaugeNodeDiskFreeDetailsRate                   = "gauge.node.disk_free_details.rate"
	gaugeNodeDiskFreeLimit                         = "gauge.node.disk_free_limit"
	gaugeNodeFdTotal                               = "gauge.node.fd_total"
	gaugeNodeFdUsed                                = "gauge.node.fd_used"
	gaugeNodeFdUsedDetailsRate                     = "gauge.node.fd_used_details.rate"
	gaugeNodeIoReadAvgTime                         = "gauge.node.io_read_avg_time"
	gaugeNodeIoReadAvgTimeDetailsRate              = "gauge.node.io_read_avg_time_details.rate"
	gaugeNodeIoReadBytesDetailsRate                = "gauge.node.io_read_bytes_details.rate"
	gaugeNodeIoReadCountDetailsRate                = "gauge.node.io_read_count_details.rate"
	gaugeNodeIoSyncAvgTime                         = "gauge.node.io_sync_avg_time"
	gaugeNodeIoSyncAvgTimeDetailsRate              = "gauge.node.io_sync_avg_time_details.rate"
	gaugeNodeIoWriteAvgTime                        = "gauge.node.io_write_avg_time"
	gaugeNodeIoWriteAvgTimeDetailsRate             = "gauge.node.io_write_avg_time_details.rate"
	gaugeNodeMemLimit                              = "gauge.node.mem_limit"
	gaugeNodeMemUsed                               = "gauge.node.mem_used"
	gaugeNodeMemUsedDetailsRate                    = "gauge.node.mem_used_details.rate"
	gaugeNodeMnesiaDiskTxCountDetailsRate          = "gauge.node.mnesia_disk_tx_count_details.rate"
	gaugeNodeMnesiaRAMTxCountDetailsRate           = "gauge.node.mnesia_ram_tx_count_details.rate"
	gaugeNodeNetTicktime                           = "gauge.node.net_ticktime"
	gaugeNodeProcTotal                             = "gauge.node.proc_total"
	gaugeNodeProcUsed                              = "gauge.node.proc_used"
	gaugeNodeProcUsedDetailsRate                   = "gauge.node.proc_used_details.rate"
	gaugeNodeProcessors                            = "gauge.node.processors"
	gaugeNodeRunQueue                              = "gauge.node.run_queue"
	gaugeNodeSocketsTotal                          = "gauge.node.sockets_total"
	gaugeNodeSocketsUsed                           = "gauge.node.sockets_used"
	gaugeNodeSocketsUsedDetailsRate                = "gauge.node.sockets_used_details.rate"
	gaugeNodeUptime                                = "gauge.node.uptime"
	gaugeQueueBackingQueueStatusAvgAckEgressRate   = "gauge.queue.backing_queue_status.avg_ack_egress_rate"
	gaugeQueueBackingQueueStatusAvgAckIngressRate  = "gauge.queue.backing_queue_status.avg_ack_ingress_rate"
	gaugeQueueBackingQueueStatusAvgEgressRate      = "gauge.queue.backing_queue_status.avg_egress_rate"
	gaugeQueueBackingQueueStatusAvgIngressRate     = "gauge.queue.backing_queue_status.avg_ingress_rate"
	gaugeQueueBackingQueueStatusLen                = "gauge.queue.backing_queue_status.len"
	gaugeQueueBackingQueueStatusNextSeqID          = "gauge.queue.backing_queue_status.next_seq_id"
	gaugeQueueBackingQueueStatusQ1                 = "gauge.queue.backing_queue_status.q1"
	gaugeQueueBackingQueueStatusQ2                 = "gauge.queue.backing_queue_status.q2"
	gaugeQueueBackingQueueStatusQ3                 = "gauge.queue.backing_queue_status.q3"
	gaugeQueueBackingQueueStatusQ4                 = "gauge.queue.backing_queue_status.q4"
	gaugeQueueConsumerUtilisation                  = "gauge.queue.consumer_utilisation"
	gaugeQueueConsumers                            = "gauge.queue.consumers"
	gaugeQueueMemory                               = "gauge.queue.memory"
	gaugeQueueMessageBytes                         = "gauge.queue.message_bytes"
	gaugeQueueMessageBytesPersistent               = "gauge.queue.message_bytes_persistent"
	gaugeQueueMessageBytesRAM                      = "gauge.queue.message_bytes_ram"
	gaugeQueueMessageBytesReady                    = "gauge.queue.message_bytes_ready"
	gaugeQueueMessageBytesUnacknowledged           = "gauge.queue.message_bytes_unacknowledged"
	gaugeQueueMessageStatsAckDetailsRate           = "gauge.queue.message_stats.ack_details.rate"
	gaugeQueueMessageStatsDeliverDetailsRate       = "gauge.queue.message_stats.deliver_details.rate"
	gaugeQueueMessageStatsDeliverGetDetailsRate    = "gauge.queue.message_stats.deliver_get_details.rate"
	gaugeQueueMessageStatsPublishDetailsRate       = "gauge.queue.message_stats.publish_details.rate"
	gaugeQueueMessages                             = "gauge.queue.messages"
	gaugeQueueMessagesDetailsRate                  = "gauge.queue.messages_details.rate"
	gaugeQueueMessagesPersistent                   = "gauge.queue.messages_persistent"
	gaugeQueueMessagesRAM                          = "gauge.queue.messages_ram"
	gaugeQueueMessagesReady                        = "gauge.queue.messages_ready"
	gaugeQueueMessagesReadyDetailsRate             = "gauge.queue.messages_ready_details.rate"
	gaugeQueueMessagesReadyRAM                     = "gauge.queue.messages_ready_ram"
	gaugeQueueMessagesUnacknowledged               = "gauge.queue.messages_unacknowledged"
	gaugeQueueMessagesUnacknowledgedDetailsRate    = "gauge.queue.messages_unacknowledged_details.rate"
	gaugeQueueMessagesUnacknowledgedRAM            = "gauge.queue.messages_unacknowledged_ram"
)

var metricSet = map[string]monitors.MetricInfo{
	counterChannelMessageStatsAck:                  {Type: datapoint.Count, Group: groupChannel},
	counterChannelMessageStatsConfirm:              {Type: datapoint.Count, Group: groupChannel},
	counterChannelMessageStatsDeliver:              {Type: datapoint.Count, Group: groupChannel},
	counterChannelMessageStatsDeliverGet:           {Type: datapoint.Count, Group: groupChannel},
	counterChannelMessageStatsPublish:              {Type: datapoint.Count, Group: groupChannel},
	counterConnectionChannelMax:                    {Type: datapoint.Count, Group: groupConnection},
	counterConnectionRecvCnt:                       {Type: datapoint.Count, Group: groupConnection},
	counterConnectionRecvOct:                       {Type: datapoint.Count, Group: groupConnection},
	counterConnectionSendCnt:                       {Type: datapoint.Count, Group: groupConnection},
	counterConnectionSendOct:                       {Type: datapoint.Count, Group: groupConnection},
	counterExchangeMessageStatsConfirm:             {Type: datapoint.Count, Group: groupExchange},
	counterExchangeMessageStatsPublishIn:           {Type: datapoint.Count, Group: groupExchange},
	counterExchangeMessageStatsPublishOut:          {Type: datapoint.Count, Group: groupExchange},
	counterNodeIoReadBytes:                         {Type: datapoint.Count, Group: groupNode},
	counterNodeIoReadCount:                         {Type: datapoint.Count, Group: groupNode},
	counterNodeMnesiaDiskTxCount:                   {Type: datapoint.Count, Group: groupNode},
	counterNodeMnesiaRAMTxCount:                    {Type: datapoint.Count, Group: groupNode},
	counterQueueDiskReads:                          {Type: datapoint.Count, Group: groupQueue},
	counterQueueDiskWrites:                         {Type: datapoint.Count, Group: groupQueue},
	counterQueueMessageStatsAck:                    {Type: datapoint.Count, Group: groupQueue},
	counterQueueMessageStatsDeliver:                {Type: datapoint.Count, Group: groupQueue},
	counterQueueMessageStatsDeliverGet:             {Type: datapoint.Count, Group: groupQueue},
	counterQueueMessageStatsPublish:                {Type: datapoint.Count, Group: groupQueue},
	gaugeChannelConnectionDetailsPeerPort:          {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelConsumerCount:                      {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelGlobalPrefetchCount:                {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessageStatsAckDetailsRate:         {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessageStatsConfirmDetailsRate:     {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessageStatsDeliverDetailsRate:     {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessageStatsDeliverGetDetailsRate:  {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessageStatsPublishDetailsRate:     {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessagesUnacknowledged:             {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessagesUncommitted:                {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelMessagesUnconfirmed:                {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelNumber:                             {Type: datapoint.Gauge, Group: groupChannel},
	gaugeChannelPrefetchCount:                      {Type: datapoint.Gauge, Group: groupChannel},
	gaugeConnectionChannels:                        {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionConnectedAt:                     {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionFrameMax:                        {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionPeerPort:                        {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionPort:                            {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionRecvOctDetailsRate:              {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionSendOctDetailsRate:              {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionSendPend:                        {Type: datapoint.Gauge, Group: groupConnection},
	gaugeConnectionTimeout:                         {Type: datapoint.Gauge, Group: groupConnection},
	gaugeExchangeMessageStatsConfirmDetailsRate:    {Type: datapoint.Gauge, Group: groupExchange},
	gaugeExchangeMessageStatsPublishInDetailsRate:  {Type: datapoint.Gauge, Group: groupExchange},
	gaugeExchangeMessageStatsPublishOutDetailsRate: {Type: datapoint.Gauge, Group: groupExchange},
	gaugeNodeDiskFree:                              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeDiskFreeDetailsRate:                   {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeDiskFreeLimit:                         {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeFdTotal:                               {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeFdUsed:                                {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeFdUsedDetailsRate:                     {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoReadAvgTime:                         {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoReadAvgTimeDetailsRate:              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoReadBytesDetailsRate:                {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoReadCountDetailsRate:                {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoSyncAvgTime:                         {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoSyncAvgTimeDetailsRate:              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoWriteAvgTime:                        {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeIoWriteAvgTimeDetailsRate:             {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeMemLimit:                              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeMemUsed:                               {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeMemUsedDetailsRate:                    {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeMnesiaDiskTxCountDetailsRate:          {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeMnesiaRAMTxCountDetailsRate:           {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeNetTicktime:                           {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeProcTotal:                             {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeProcUsed:                              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeProcUsedDetailsRate:                   {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeProcessors:                            {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeRunQueue:                              {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeSocketsTotal:                          {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeSocketsUsed:                           {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeSocketsUsedDetailsRate:                {Type: datapoint.Gauge, Group: groupNode},
	gaugeNodeUptime:                                {Type: datapoint.Gauge, Group: groupNode},
	gaugeQueueBackingQueueStatusAvgAckEgressRate:   {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusAvgAckIngressRate:  {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusAvgEgressRate:      {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusAvgIngressRate:     {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusLen:                {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusNextSeqID:          {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusQ1:                 {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusQ2:                 {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusQ3:                 {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueBackingQueueStatusQ4:                 {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueConsumerUtilisation:                  {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueConsumers:                            {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMemory:                               {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageBytes:                         {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageBytesPersistent:               {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageBytesRAM:                      {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageBytesReady:                    {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageBytesUnacknowledged:           {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageStatsAckDetailsRate:           {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageStatsDeliverDetailsRate:       {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageStatsDeliverGetDetailsRate:    {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessageStatsPublishDetailsRate:       {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessages:                             {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesDetailsRate:                  {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesPersistent:                   {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesRAM:                          {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesReady:                        {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesReadyDetailsRate:             {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesReadyRAM:                     {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesUnacknowledged:               {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesUnacknowledgedDetailsRate:    {Type: datapoint.Gauge, Group: groupQueue},
	gaugeQueueMessagesUnacknowledgedRAM:            {Type: datapoint.Gauge, Group: groupQueue},
}

var defaultMetrics = map[string]bool{
	counterExchangeMessageStatsPublishIn: true,
	counterQueueMessageStatsDeliver:      true,
	gaugeChannelNumber:                   true,
	gaugeNodeDiskFree:                    true,
	gaugeNodeDiskFreeLimit:               true,
	gaugeNodeFdTotal:                     true,
	gaugeNodeFdUsed:                      true,
	gaugeNodeIoReadAvgTime:               true,
	gaugeNodeIoSyncAvgTime:               true,
	gaugeNodeIoWriteAvgTime:              true,
	gaugeNodeMemLimit:                    true,
	gaugeNodeMemUsed:                     true,
	gaugeNodeUptime:                      true,
	gaugeQueueConsumers:                  true,
	gaugeQueueMemory:                     true,
	gaugeQueueMessagesReady:              true,
}

var groupMetricsMap = map[string][]string{
	groupChannel: {
		counterChannelMessageStatsAck,
		counterChannelMessageStatsConfirm,
		counterChannelMessageStatsDeliver,
		counterChannelMessageStatsDeliverGet,
		counterChannelMessageStatsPublish,
		gaugeChannelConnectionDetailsPeerPort,
		gaugeChannelConsumerCount,
		gaugeChannelGlobalPrefetchCount,
		gaugeChannelMessageStatsAckDetailsRate,
		gaugeChannelMessageStatsConfirmDetailsRate,
		gaugeChannelMessageStatsDeliverDetailsRate,
		gaugeChannelMessageStatsDeliverGetDetailsRate,
		gaugeChannelMessageStatsPublishDetailsRate,
		gaugeChannelMessagesUnacknowledged,
		gaugeChannelMessagesUncommitted,
		gaugeChannelMessagesUnconfirmed,
		gaugeChannelNumber,
		gaugeChannelPrefetchCount,
	},
	groupConnection: {
		counterConnectionChannelMax,
		counterConnectionRecvCnt,
		counterConnectionRecvOct,
		counterConnectionSendCnt,
		counterConnectionSendOct,
		gaugeConnectionChannels,
		gaugeConnectionConnectedAt,
		gaugeConnectionFrameMax,
		gaugeConnectionPeerPort,
		gaugeConnectionPort,
		gaugeConnectionRecvOctDetailsRate,
		gaugeConnectionSendOctDetailsRate,
		gaugeConnectionSendPend,
		gaugeConnectionTimeout,
	},
	groupExchange: {
		counterExchangeMessageStatsConfirm,
		counterExchangeMessageStatsPublishIn,
		counterExchangeMessageStatsPublishOut,
		gaugeExchangeMessageStatsConfirmDetailsRate,
		gaugeExchangeMessageStatsPublishInDetailsRate,
		gaugeExchangeMessageStatsPublishOutDetailsRate,
	},
	groupNode: {
		counterNodeIoReadBytes,
		counterNodeIoReadCount,
		counterNodeMnesiaDiskTxCount,
		counterNodeMnesiaRAMTxCount,
		gaugeNodeDiskFree,
		gaugeNodeDiskFreeDetailsRate,
		gaugeNodeDiskFreeLimit,
		gaugeNodeFdTotal,
		gaugeNodeFdUsed,
		gaugeNodeFdUsedDetailsRate,
		gaugeNodeIoReadAvgTime,
		gaugeNodeIoReadAvgTimeDetailsRate,
		gaugeNodeIoReadBytesDetailsRate,
		gaugeNodeIoReadCountDetailsRate,
		gaugeNodeIoSyncAvgTime,
		gaugeNodeIoSyncAvgTimeDetailsRate,
		gaugeNodeIoWriteAvgTime,
		gaugeNodeIoWriteAvgTimeDetailsRate,
		gaugeNodeMemLimit,
		gaugeNodeMemUsed,
		gaugeNodeMemUsedDetailsRate,
		gaugeNodeMnesiaDiskTxCountDetailsRate,
		gaugeNodeMnesiaRAMTxCountDetailsRate,
		gaugeNodeNetTicktime,
		gaugeNodeProcTotal,
		gaugeNodeProcUsed,
		gaugeNodeProcUsedDetailsRate,
		gaugeNodeProcessors,
		gaugeNodeRunQueue,
		gaugeNodeSocketsTotal,
		gaugeNodeSocketsUsed,
		gaugeNodeSocketsUsedDetailsRate,
		gaugeNodeUptime,
	},
	groupQueue: {
		counterQueueDiskReads,
		counterQueueDiskWrites,
		counterQueueMessageStatsAck,
		counterQueueMessageStatsDeliver,
		counterQueueMessageStatsDeliverGet,
		counterQueueMessageStatsPublish,
		gaugeQueueBackingQueueStatusAvgAckEgressRate,
		gaugeQueueBackingQueueStatusAvgAckIngressRate,
		gaugeQueueBackingQueueStatusAvgEgressRate,
		gaugeQueueBackingQueueStatusAvgIngressRate,
		gaugeQueueBackingQueueStatusLen,
		gaugeQueueBackingQueueStatusNextSeqID,
		gaugeQueueBackingQueueStatusQ1,
		gaugeQueueBackingQueueStatusQ2,
		gaugeQueueBackingQueueStatusQ3,
		gaugeQueueBackingQueueStatusQ4,
		gaugeQueueConsumerUtilisation,
		gaugeQueueConsumers,
		gaugeQueueMemory,
		gaugeQueueMessageBytes,
		gaugeQueueMessageBytesPersistent,
		gaugeQueueMessageBytesRAM,
		gaugeQueueMessageBytesReady,
		gaugeQueueMessageBytesUnacknowledged,
		gaugeQueueMessageStatsAckDetailsRate,
		gaugeQueueMessageStatsDeliverDetailsRate,
		gaugeQueueMessageStatsDeliverGetDetailsRate,
		gaugeQueueMessageStatsPublishDetailsRate,
		gaugeQueueMessages,
		gaugeQueueMessagesDetailsRate,
		gaugeQueueMessagesPersistent,
		gaugeQueueMessagesRAM,
		gaugeQueueMessagesReady,
		gaugeQueueMessagesReadyDetailsRate,
		gaugeQueueMessagesReadyRAM,
		gaugeQueueMessagesUnacknowledged,
		gaugeQueueMessagesUnacknowledgedDetailsRate,
		gaugeQueueMessagesUnacknowledgedRAM,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/rabbitmq",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
