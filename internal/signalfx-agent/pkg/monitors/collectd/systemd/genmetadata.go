// Code generated by monitor-code-gen. DO NOT EDIT.

package systemd

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/systemd"

const (
	groupActiveState = "ActiveState"
	groupLoadState   = "LoadState"
	groupSubState    = "SubState"
)

var groupSet = map[string]bool{
	groupActiveState: true,
	groupLoadState:   true,
	groupSubState:    true,
}

const (
	gaugeActiveStateActivating   = "gauge.active_state.activating"
	gaugeActiveStateActive       = "gauge.active_state.active"
	gaugeActiveStateDeactivating = "gauge.active_state.deactivating"
	gaugeActiveStateFailed       = "gauge.active_state.failed"
	gaugeActiveStateInactive     = "gauge.active_state.inactive"
	gaugeActiveStateReloading    = "gauge.active_state.reloading"
	gaugeLoadStateError          = "gauge.load_state.error"
	gaugeLoadStateLoaded         = "gauge.load_state.loaded"
	gaugeLoadStateMasked         = "gauge.load_state.masked"
	gaugeLoadStateNotFound       = "gauge.load_state.not-found"
	gaugeSubstateDead            = "gauge.substate.dead"
	gaugeSubstateExited          = "gauge.substate.exited"
	gaugeSubstateFailed          = "gauge.substate.failed"
	gaugeSubstateRunning         = "gauge.substate.running"
)

var metricSet = map[string]monitors.MetricInfo{
	gaugeActiveStateActivating:   {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeActiveStateActive:       {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeActiveStateDeactivating: {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeActiveStateFailed:       {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeActiveStateInactive:     {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeActiveStateReloading:    {Type: datapoint.Gauge, Group: groupActiveState},
	gaugeLoadStateError:          {Type: datapoint.Gauge, Group: groupLoadState},
	gaugeLoadStateLoaded:         {Type: datapoint.Gauge, Group: groupLoadState},
	gaugeLoadStateMasked:         {Type: datapoint.Gauge, Group: groupLoadState},
	gaugeLoadStateNotFound:       {Type: datapoint.Gauge, Group: groupLoadState},
	gaugeSubstateDead:            {Type: datapoint.Gauge, Group: groupSubState},
	gaugeSubstateExited:          {Type: datapoint.Gauge, Group: groupSubState},
	gaugeSubstateFailed:          {Type: datapoint.Gauge, Group: groupSubState},
	gaugeSubstateRunning:         {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	gaugeSubstateRunning: true,
}

var groupMetricsMap = map[string][]string{
	groupActiveState: {
		gaugeActiveStateActivating,
		gaugeActiveStateActive,
		gaugeActiveStateDeactivating,
		gaugeActiveStateFailed,
		gaugeActiveStateInactive,
		gaugeActiveStateReloading,
	},
	groupLoadState: {
		gaugeLoadStateError,
		gaugeLoadStateLoaded,
		gaugeLoadStateMasked,
		gaugeLoadStateNotFound,
	},
	groupSubState: {
		gaugeSubstateDead,
		gaugeSubstateExited,
		gaugeSubstateFailed,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/systemd",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
