// Code generated by monitor-code-gen. DO NOT EDIT.

package tomcat

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/tomcat"

const (
	groupJvm = "jvm"
)

var groupSet = map[string]bool{
	groupJvm: true,
}

const (
	counterTomcatGlobalRequestProcessorBytesReceived  = "counter.tomcat.GlobalRequestProcessor.bytesReceived"
	counterTomcatGlobalRequestProcessorBytesSent      = "counter.tomcat.GlobalRequestProcessor.bytesSent"
	counterTomcatGlobalRequestProcessorErrorCount     = "counter.tomcat.GlobalRequestProcessor.errorCount"
	counterTomcatGlobalRequestProcessorProcessingTime = "counter.tomcat.GlobalRequestProcessor.processingTime"
	counterTomcatGlobalRequestProcessorRequestCount   = "counter.tomcat.GlobalRequestProcessor.requestCount"
	gaugeJvmThreadsCount                              = "gauge.jvm.threads.count"
	gaugeLoadedClasses                                = "gauge.loaded_classes"
	gaugeTomcatGlobalRequestProcessorMaxTime          = "gauge.tomcat.GlobalRequestProcessor.maxTime"
	gaugeTomcatThreadPoolCurrentThreadsBusy           = "gauge.tomcat.ThreadPool.currentThreadsBusy"
	gaugeTomcatThreadPoolMaxThreads                   = "gauge.tomcat.ThreadPool.maxThreads"
	gaugeTomcatUtilityExecutorActiveCount             = "gauge.tomcat.UtilityExecutor.activeCount"
	gaugeTomcatUtilityExecutorMaximumPoolSize         = "gauge.tomcat.UtilityExecutor.maximumPoolSize"
	invocations                                       = "invocations"
	jmxMemoryCommitted                                = "jmx_memory.committed"
	jmxMemoryInit                                     = "jmx_memory.init"
	jmxMemoryMax                                      = "jmx_memory.max"
	jmxMemoryUsed                                     = "jmx_memory.used"
	totalTimeInMsCollectionTime                       = "total_time_in_ms.collection_time"
)

var metricSet = map[string]monitors.MetricInfo{
	counterTomcatGlobalRequestProcessorBytesReceived:  {Type: datapoint.Counter},
	counterTomcatGlobalRequestProcessorBytesSent:      {Type: datapoint.Counter},
	counterTomcatGlobalRequestProcessorErrorCount:     {Type: datapoint.Counter},
	counterTomcatGlobalRequestProcessorProcessingTime: {Type: datapoint.Counter},
	counterTomcatGlobalRequestProcessorRequestCount:   {Type: datapoint.Counter},
	gaugeJvmThreadsCount:                              {Type: datapoint.Gauge, Group: groupJvm},
	gaugeLoadedClasses:                                {Type: datapoint.Gauge, Group: groupJvm},
	gaugeTomcatGlobalRequestProcessorMaxTime:          {Type: datapoint.Gauge},
	gaugeTomcatThreadPoolCurrentThreadsBusy:           {Type: datapoint.Gauge},
	gaugeTomcatThreadPoolMaxThreads:                   {Type: datapoint.Gauge},
	gaugeTomcatUtilityExecutorActiveCount:             {Type: datapoint.Gauge},
	gaugeTomcatUtilityExecutorMaximumPoolSize:         {Type: datapoint.Gauge},
	invocations:                 {Type: datapoint.Counter, Group: groupJvm},
	jmxMemoryCommitted:          {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryInit:               {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryMax:                {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryUsed:               {Type: datapoint.Gauge, Group: groupJvm},
	totalTimeInMsCollectionTime: {Type: datapoint.Counter, Group: groupJvm},
}

var defaultMetrics = map[string]bool{
	counterTomcatGlobalRequestProcessorBytesReceived:  true,
	counterTomcatGlobalRequestProcessorBytesSent:      true,
	counterTomcatGlobalRequestProcessorErrorCount:     true,
	counterTomcatGlobalRequestProcessorProcessingTime: true,
	counterTomcatGlobalRequestProcessorRequestCount:   true,
	gaugeJvmThreadsCount:                              true,
	gaugeLoadedClasses:                                true,
	gaugeTomcatGlobalRequestProcessorMaxTime:          true,
	gaugeTomcatThreadPoolCurrentThreadsBusy:           true,
	gaugeTomcatThreadPoolMaxThreads:                   true,
	invocations:                                       true,
	jmxMemoryCommitted:                                true,
	jmxMemoryInit:                                     true,
	jmxMemoryMax:                                      true,
	jmxMemoryUsed:                                     true,
	totalTimeInMsCollectionTime:                       true,
}

var groupMetricsMap = map[string][]string{
	groupJvm: {
		gaugeJvmThreadsCount,
		gaugeLoadedClasses,
		invocations,
		jmxMemoryCommitted,
		jmxMemoryInit,
		jmxMemoryMax,
		jmxMemoryUsed,
		totalTimeInMsCollectionTime,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/tomcat",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     true,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
