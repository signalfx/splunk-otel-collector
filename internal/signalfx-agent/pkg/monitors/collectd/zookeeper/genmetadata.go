// Code generated by monitor-code-gen. DO NOT EDIT.

package zookeeper

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/zookeeper"

const (
	groupLeader = "leader"
)

var groupSet = map[string]bool{
	groupLeader: true,
}

const (
	counterZkFsyncThresholdExceedCount = "counter.zk_fsync_threshold_exceed_count"
	counterZkPacketsReceived           = "counter.zk_packets_received"
	counterZkPacketsSent               = "counter.zk_packets_sent"
	gaugeZkApproximateDataSize         = "gauge.zk_approximate_data_size"
	gaugeZkAvgLatency                  = "gauge.zk_avg_latency"
	gaugeZkEphemeralsCount             = "gauge.zk_ephemerals_count"
	gaugeZkFollowers                   = "gauge.zk_followers"
	gaugeZkIsLeader                    = "gauge.zk_is_leader"
	gaugeZkMaxFileDescriptorCount      = "gauge.zk_max_file_descriptor_count"
	gaugeZkMaxLatency                  = "gauge.zk_max_latency"
	gaugeZkMinLatency                  = "gauge.zk_min_latency"
	gaugeZkNumAliveConnections         = "gauge.zk_num_alive_connections"
	gaugeZkOpenFileDescriptorCount     = "gauge.zk_open_file_descriptor_count"
	gaugeZkOutstandingRequests         = "gauge.zk_outstanding_requests"
	gaugeZkPendingSyncs                = "gauge.zk_pending_syncs"
	gaugeZkServiceHealth               = "gauge.zk_service_health"
	gaugeZkSyncedFollowers             = "gauge.zk_synced_followers"
	gaugeZkWatchCount                  = "gauge.zk_watch_count"
	gaugeZkZnodeCount                  = "gauge.zk_znode_count"
)

var metricSet = map[string]monitors.MetricInfo{
	counterZkFsyncThresholdExceedCount: {Type: datapoint.Counter},
	counterZkPacketsReceived:           {Type: datapoint.Counter},
	counterZkPacketsSent:               {Type: datapoint.Counter},
	gaugeZkApproximateDataSize:         {Type: datapoint.Gauge},
	gaugeZkAvgLatency:                  {Type: datapoint.Gauge},
	gaugeZkEphemeralsCount:             {Type: datapoint.Gauge},
	gaugeZkFollowers:                   {Type: datapoint.Gauge, Group: groupLeader},
	gaugeZkIsLeader:                    {Type: datapoint.Gauge},
	gaugeZkMaxFileDescriptorCount:      {Type: datapoint.Gauge},
	gaugeZkMaxLatency:                  {Type: datapoint.Gauge},
	gaugeZkMinLatency:                  {Type: datapoint.Gauge},
	gaugeZkNumAliveConnections:         {Type: datapoint.Gauge},
	gaugeZkOpenFileDescriptorCount:     {Type: datapoint.Gauge},
	gaugeZkOutstandingRequests:         {Type: datapoint.Gauge},
	gaugeZkPendingSyncs:                {Type: datapoint.Gauge, Group: groupLeader},
	gaugeZkServiceHealth:               {Type: datapoint.Gauge},
	gaugeZkSyncedFollowers:             {Type: datapoint.Gauge, Group: groupLeader},
	gaugeZkWatchCount:                  {Type: datapoint.Gauge},
	gaugeZkZnodeCount:                  {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	counterZkPacketsReceived:       true,
	counterZkPacketsSent:           true,
	gaugeZkApproximateDataSize:     true,
	gaugeZkAvgLatency:              true,
	gaugeZkEphemeralsCount:         true,
	gaugeZkMaxFileDescriptorCount:  true,
	gaugeZkNumAliveConnections:     true,
	gaugeZkOpenFileDescriptorCount: true,
	gaugeZkWatchCount:              true,
	gaugeZkZnodeCount:              true,
}

var groupMetricsMap = map[string][]string{
	groupLeader: {
		gaugeZkFollowers,
		gaugeZkPendingSyncs,
		gaugeZkSyncedFollowers,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/zookeeper",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
