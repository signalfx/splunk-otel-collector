// Code generated by monitor-code-gen. DO NOT EDIT.

package procstat

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "telegraf/procstat"

var groupSet = map[string]bool{}

const (
	procstatCPUTime                    = "procstat.cpu_time"
	procstatCPUUsage                   = "procstat.cpu_usage"
	procstatInvoluntaryContextSwitches = "procstat.involuntary_context_switches"
	procstatMemoryData                 = "procstat.memory_data"
	procstatMemoryLocked               = "procstat.memory_locked"
	procstatMemoryRss                  = "procstat.memory_rss"
	procstatMemoryStack                = "procstat.memory_stack"
	procstatMemorySwap                 = "procstat.memory_swap"
	procstatMemoryUsage                = "procstat.memory_usage"
	procstatMemoryVms                  = "procstat.memory_vms"
	procstatNicePriority               = "procstat.nice_priority"
	procstatNumFds                     = "procstat.num_fds"
	procstatNumThreads                 = "procstat.num_threads"
	procstatReadBytes                  = "procstat.read_bytes"
	procstatReadCount                  = "procstat.read_count"
	procstatRealtimePriority           = "procstat.realtime_priority"
	procstatRlimitCPUTimeHard          = "procstat.rlimit_cpu_time_hard"
	procstatRlimitCPUTimeSoft          = "procstat.rlimit_cpu_time_soft"
	procstatRlimitFileLocksHard        = "procstat.rlimit_file_locks_hard"
	procstatRlimitFileLocksSoft        = "procstat.rlimit_file_locks_soft"
	procstatRlimitMemoryDataHard       = "procstat.rlimit_memory_data_hard"
	procstatRlimitMemoryDataSoft       = "procstat.rlimit_memory_data_soft"
	procstatRlimitMemoryLockedHard     = "procstat.rlimit_memory_locked_hard"
	procstatRlimitMemoryLockedSoft     = "procstat.rlimit_memory_locked_soft"
	procstatRlimitMemoryRssHard        = "procstat.rlimit_memory_rss_hard"
	procstatRlimitMemoryRssSoft        = "procstat.rlimit_memory_rss_soft"
	procstatRlimitMemoryStackHard      = "procstat.rlimit_memory_stack_hard"
	procstatRlimitMemoryStackSoft      = "procstat.rlimit_memory_stack_soft"
	procstatRlimitMemoryVmsHard        = "procstat.rlimit_memory_vms_hard"
	procstatRlimitMemoryVmsSoft        = "procstat.rlimit_memory_vms_soft"
	procstatRlimitNicePriorityHard     = "procstat.rlimit_nice_priority_hard"
	procstatRlimitNicePrioritySoft     = "procstat.rlimit_nice_priority_soft"
	procstatRlimitNumFdsHard           = "procstat.rlimit_num_fds_hard"
	procstatRlimitNumFdsSoft           = "procstat.rlimit_num_fds_soft"
	procstatRlimitRealtimePriorityHard = "procstat.rlimit_realtime_priority_hard"
	procstatRlimitRealtimePrioritySoft = "procstat.rlimit_realtime_priority_soft"
	procstatRlimitSignalsPendingHard   = "procstat.rlimit_signals_pending_hard"
	procstatRlimitSignalsPendingSoft   = "procstat.rlimit_signals_pending_soft"
	procstatSignalsPending             = "procstat.signals_pending"
	procstatWriteBytes                 = "procstat.write_bytes"
	procstatWriteCount                 = "procstat.write_count"
	procstatLookupPidCount             = "procstat_lookup.pid_count"
)

var metricSet = map[string]monitors.MetricInfo{
	procstatCPUTime:                    {Type: datapoint.Gauge},
	procstatCPUUsage:                   {Type: datapoint.Gauge},
	procstatInvoluntaryContextSwitches: {Type: datapoint.Gauge},
	procstatMemoryData:                 {Type: datapoint.Gauge},
	procstatMemoryLocked:               {Type: datapoint.Gauge},
	procstatMemoryRss:                  {Type: datapoint.Gauge},
	procstatMemoryStack:                {Type: datapoint.Gauge},
	procstatMemorySwap:                 {Type: datapoint.Gauge},
	procstatMemoryUsage:                {Type: datapoint.Gauge},
	procstatMemoryVms:                  {Type: datapoint.Gauge},
	procstatNicePriority:               {Type: datapoint.Gauge},
	procstatNumFds:                     {Type: datapoint.Gauge},
	procstatNumThreads:                 {Type: datapoint.Gauge},
	procstatReadBytes:                  {Type: datapoint.Gauge},
	procstatReadCount:                  {Type: datapoint.Gauge},
	procstatRealtimePriority:           {Type: datapoint.Gauge},
	procstatRlimitCPUTimeHard:          {Type: datapoint.Gauge},
	procstatRlimitCPUTimeSoft:          {Type: datapoint.Gauge},
	procstatRlimitFileLocksHard:        {Type: datapoint.Gauge},
	procstatRlimitFileLocksSoft:        {Type: datapoint.Gauge},
	procstatRlimitMemoryDataHard:       {Type: datapoint.Gauge},
	procstatRlimitMemoryDataSoft:       {Type: datapoint.Gauge},
	procstatRlimitMemoryLockedHard:     {Type: datapoint.Gauge},
	procstatRlimitMemoryLockedSoft:     {Type: datapoint.Gauge},
	procstatRlimitMemoryRssHard:        {Type: datapoint.Gauge},
	procstatRlimitMemoryRssSoft:        {Type: datapoint.Gauge},
	procstatRlimitMemoryStackHard:      {Type: datapoint.Gauge},
	procstatRlimitMemoryStackSoft:      {Type: datapoint.Gauge},
	procstatRlimitMemoryVmsHard:        {Type: datapoint.Gauge},
	procstatRlimitMemoryVmsSoft:        {Type: datapoint.Gauge},
	procstatRlimitNicePriorityHard:     {Type: datapoint.Gauge},
	procstatRlimitNicePrioritySoft:     {Type: datapoint.Gauge},
	procstatRlimitNumFdsHard:           {Type: datapoint.Gauge},
	procstatRlimitNumFdsSoft:           {Type: datapoint.Gauge},
	procstatRlimitRealtimePriorityHard: {Type: datapoint.Gauge},
	procstatRlimitRealtimePrioritySoft: {Type: datapoint.Gauge},
	procstatRlimitSignalsPendingHard:   {Type: datapoint.Gauge},
	procstatRlimitSignalsPendingSoft:   {Type: datapoint.Gauge},
	procstatSignalsPending:             {Type: datapoint.Gauge},
	procstatWriteBytes:                 {Type: datapoint.Gauge},
	procstatWriteCount:                 {Type: datapoint.Gauge},
	procstatLookupPidCount:             {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "telegraf/procstat",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         true,
}
