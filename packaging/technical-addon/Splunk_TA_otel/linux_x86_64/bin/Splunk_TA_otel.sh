#!/bin/bash


# script args related vars
splunk_TA_otel_num_args="$#"
splunk_TA_otel_args=("$@")
# script location and splunk app location
splunk_TA_otel_script_file=$(realpath "$0")
splunk_TA_otel_script_directory=$(dirname "${splunk_TA_otel_script_file}")
if [ -z "$SPLUNK_OTEL_TA_PLATFORM_HOME" ]; then
    SPLUNK_OTEL_TA_PLATFORM_HOME="$(realpath "$splunk_TA_otel_script_directory/../")"
fi
if [ -z "$SPLUNK_OTEL_TA_HOME" ]; then
    SPLUNK_OTEL_TA_HOME="$(realpath "$SPLUNK_OTEL_TA_PLATFORM_HOME/../")"
fi
if [ -z "$SPLUNK_HOME" ]; then
    SPLUNK_HOME="$(realpath "$SPLUNK_OTEL_TA_HOME/../../../")"
fi


# Begin autogenerated code
gomemlimit_name="gomemlimit"
gomemlimit_value=""
splunk_api_url_name="splunk_api_url"
splunk_api_url_value=""
splunk_bundle_dir_name="splunk_bundle_dir"
splunk_bundle_dir_value=""
splunk_config_name="splunk_config"
splunk_config_value=""
splunk_config_dir_name="splunk_config_dir"
splunk_config_dir_value=""
splunk_collectd_dir_name="splunk_collectd_dir"
splunk_collectd_dir_value=""
splunk_debug_config_server_name="splunk_debug_config_server"
splunk_debug_config_server_value=""
splunk_config_yaml_name="splunk_config_yaml"
splunk_config_yaml_value=""
splunk_gateway_url_name="splunk_gateway_url"
splunk_gateway_url_value=""
splunk_hec_url_name="splunk_hec_url"
splunk_hec_url_value=""
splunk_listen_interface_name="splunk_listen_interface"
splunk_listen_interface_value=""
splunk_memory_limit_mib_name="splunk_memory_limit_mib"
splunk_memory_limit_mib_value=""
splunk_memory_total_mib_name="splunk_memory_total_mib"
splunk_memory_total_mib_value=""
splunk_otel_log_file_name="splunk_otel_log_file"
splunk_otel_log_file_value=""
splunk_ingest_url_name="splunk_ingest_url"
splunk_ingest_url_value=""
splunk_realm_name="splunk_realm"
splunk_realm_value=""
splunk_access_token_file_name="splunk_access_token_file"
splunk_access_token_file_value=""
# End autogenerated code


# otel agent related vars
splunk_otel_process_name="otelcol_linux_amd64"
splunk_TA_otel_pid=""
if [ -z "$SPLUNK_ACCESS_TOKEN" ]; then 
    SPLUNK_ACCESS_TOKEN=""
fi

splunk_TA_otel_configure_traps() {
    trap splunk_TA_otel_exit_func INT TERM
}

splunk_TA_otel_exit_func() {
    # called when this script is asked to exit
    if [ "$splunk_TA_otel_pid" ] ;  then
        log_message="Stopping otel agent"
        splunk_TA_otel_log_msg "INFO" "$log_message"
    	kill "$splunk_TA_otel_pid"
    fi
}

Splunk_TA_otel_expand_config_param() {
    # Start with longest matching string and move down to least substring.
    param="$1"
    if [ "$(echo "$param" | grep "SPLUNK_OTEL_TA_PLATFORM_HOME")" ]; then
       param="${param//\$SPLUNK_OTEL_TA_PLATFORM_HOME/$SPLUNK_OTEL_TA_PLATFORM_HOME}"
    fi
    if [ "$(echo "$param" | grep "SPLUNK_OTEL_TA_HOME")" ]; then
       param="${param//\$SPLUNK_OTEL_TA_HOME/$SPLUNK_OTEL_TA_HOME}"
    fi
    if [ "$(echo "$param" | grep "SPLUNK_HOME")" ]; then
       param="${param//\$SPLUNK_HOME/$SPLUNK_HOME}"
    fi

    echo "$param"

    if [ "$param" ] ; then
       if [ -f "$param" ] ; then
          return 0
       else
          return 1
       fi
    fi
    return 1
}


splunk_TA_otel_read_configs() {
    # reads configs form inputs.conf
    # inputs.conf is actually rendered as a xml file here, so actually we grab everything in between tags
    # inputs.conf is passed via stdin
    splunk_TA_otel_log_msg "INFO" "reading config from .conf..."
    while read line
    do
        splunk_TA_otel_log_msg "DEBUG" "line: $line"

        # Begin autogenerated code
        has_gomemlimit="$(echo "$line" | grep "$gomemlimit_name")"
        if [ "$has_gomemlimit" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $gomemlimit_name from line $has_gomemlimit"
            gomemlimit_value="$(echo "$has_gomemlimit" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "DEBUG" "Set $gomemlimit_name to $gomemlimit_value"
        fi

        has_splunk_api_url="$(echo "$line" | grep "$splunk_api_url_name")"
        if [ "$has_splunk_api_url" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_api_url_name from line $has_splunk_api_url"
            splunk_api_url_value="$(echo "$has_splunk_api_url" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_api_url_name to $splunk_api_url_value"
        fi

        has_splunk_bundle_dir="$(echo "$line" | grep "$splunk_bundle_dir_name")"
        if [ "$has_splunk_bundle_dir" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_bundle_dir_name from line $has_splunk_bundle_dir"
            splunk_bundle_dir_value="$(echo "$has_splunk_bundle_dir" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_bundle_dir_name to $splunk_bundle_dir_value"
        fi

        has_splunk_config="$(echo "$line" | grep "$splunk_config_name")"
        if [ "$has_splunk_config" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_config_name from line $has_splunk_config"
            splunk_config_value="$(echo "$has_splunk_config" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_config_name to $splunk_config_value"
        fi

        has_splunk_config_dir="$(echo "$line" | grep "$splunk_config_dir_name")"
        if [ "$has_splunk_config_dir" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_config_dir_name from line $has_splunk_config_dir"
            splunk_config_dir_value="$(echo "$has_splunk_config_dir" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_config_dir_name to $splunk_config_dir_value"
        fi

        has_splunk_collectd_dir="$(echo "$line" | grep "$splunk_collectd_dir_name")"
        if [ "$has_splunk_collectd_dir" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_collectd_dir_name from line $has_splunk_collectd_dir"
            splunk_collectd_dir_value="$(echo "$has_splunk_collectd_dir" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_collectd_dir_name to $splunk_collectd_dir_value"
        fi

        has_splunk_debug_config_server="$(echo "$line" | grep "$splunk_debug_config_server_name")"
        if [ "$has_splunk_debug_config_server" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_debug_config_server_name from line $has_splunk_debug_config_server"
            splunk_debug_config_server_value="$(echo "$has_splunk_debug_config_server" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_debug_config_server_name to $splunk_debug_config_server_value"
        fi

        has_splunk_config_yaml="$(echo "$line" | grep "$splunk_config_yaml_name")"
        if [ "$has_splunk_config_yaml" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_config_yaml_name from line $has_splunk_config_yaml"
            splunk_config_yaml_value="$(echo "$has_splunk_config_yaml" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_config_yaml_name to $splunk_config_yaml_value"
        fi

        has_splunk_gateway_url="$(echo "$line" | grep "$splunk_gateway_url_name")"
        if [ "$has_splunk_gateway_url" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_gateway_url_name from line $has_splunk_gateway_url"
            splunk_gateway_url_value="$(echo "$has_splunk_gateway_url" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "DEBUG" "Set $splunk_gateway_url_name to $splunk_gateway_url_value"
        fi

        has_splunk_hec_url="$(echo "$line" | grep "$splunk_hec_url_name")"
        if [ "$has_splunk_hec_url" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_hec_url_name from line $has_splunk_hec_url"
            splunk_hec_url_value="$(echo "$has_splunk_hec_url" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_hec_url_name to $splunk_hec_url_value"
        fi

        has_splunk_listen_interface="$(echo "$line" | grep "$splunk_listen_interface_name")"
        if [ "$has_splunk_listen_interface" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_listen_interface_name from line $has_splunk_listen_interface"
            splunk_listen_interface_value="$(echo "$has_splunk_listen_interface" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_listen_interface_name to $splunk_listen_interface_value"
        fi

        has_splunk_memory_limit_mib="$(echo "$line" | grep "$splunk_memory_limit_mib_name")"
        if [ "$has_splunk_memory_limit_mib" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_memory_limit_mib_name from line $has_splunk_memory_limit_mib"
            splunk_memory_limit_mib_value="$(echo "$has_splunk_memory_limit_mib" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_memory_limit_mib_name to $splunk_memory_limit_mib_value"
        fi

        has_splunk_memory_total_mib="$(echo "$line" | grep "$splunk_memory_total_mib_name")"
        if [ "$has_splunk_memory_total_mib" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_memory_total_mib_name from line $has_splunk_memory_total_mib"
            splunk_memory_total_mib_value="$(echo "$has_splunk_memory_total_mib" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "DEBUG" "Set $splunk_memory_total_mib_name to $splunk_memory_total_mib_value"
        fi

        has_splunk_otel_log_file_name="$(echo "$line" | grep "$splunk_otel_log_file_name")"
        if [ "$has_splunk_otel_log_file_name" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_otel_log_file_name from line $has_splunk_otel_log_file_name"
            splunk_otel_log_file_value="$(echo "$has_splunk_otel_log_file_name" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_otel_log_file_name to $splunk_otel_log_file_value"
        fi

        has_splunk_ingest_url="$(echo "$line" | grep "$splunk_ingest_url_name")"
        if [ "$has_splunk_ingest_url" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_ingest_url_name from line $has_splunk_ingest_url"
            splunk_ingest_url_value="$(echo "$has_splunk_ingest_url" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_ingest_url_name to $splunk_ingest_url_value"
        fi

        has_splunk_realm="$(echo "$line" | grep "$splunk_realm_name")"
        if [ "$has_splunk_realm" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_realm_name from line $has_splunk_realm"
            splunk_realm_value="$(echo "$has_splunk_realm" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_realm_name to $splunk_realm_value"
        fi
        # End autogenerated code

        # Secrets and management
        has_splunk_access_token_file="$(echo "$line" | grep "$splunk_access_token_file_name")"
        if [ "$has_splunk_access_token_file" ] ; then
            splunk_TA_otel_log_msg "DEBUG" "reading $splunk_access_token_file_name from line $has_splunk_access_token_file"
            splunk_access_token_file_value="$(echo "$has_splunk_access_token_file" | grep -Eo ">(.*?)<" | sed 's/^>\(.*\)<$/\1/')"
            splunk_TA_otel_log_msg "INFO" "Set $splunk_access_token_file_name to $splunk_access_token_file_value"
        fi
    done < /dev/stdin
}

is_splunk_TA_otel_agent_running() {
    # checks if the otel agent is running - if running, returns 0 else returns 1
    pid="$1"
    if ps -p "$pid" > /dev/null 2>&1
    then
        return 0
    fi
    return 1
}

get_access_token() {
    if [ "$SPLUNK_ACCESS_TOKEN" ] ; then
        splunk_TA_otel_log_msg "INFO" "Using access token in SPLUNK_ACCESS_TOKEN environment variable."
        return 0
    fi
    SPLUNK_ACCESS_TOKEN="$(cat "$splunk_access_token_file_value")"
    if [ -n "$SPLUNK_ACCESS_TOKEN" ] ; then
        splunk_TA_otel_log_msg "INFO" "Using access token from $splunk_access_token_file_value."
        return 0
    else
        return 1
    fi
}

splunk_TA_otel_run_agent() {
    splunk_TA_otel_log_msg "INFO" "starting agent.."

    #1 Read configs
    splunk_TA_otel_read_configs
    
    #2 Validate configs
    ## 2a expand shell variables for SPLUNK_HOME (and anything else)
    
    splunk_bundle_dir_value="$(Splunk_TA_otel_expand_config_param "$splunk_bundle_dir_value")"
    splunk_config_value="$(Splunk_TA_otel_expand_config_param "$splunk_config_value")"
    splunk_config_yaml_value="$(Splunk_TA_otel_expand_config_param "$splunk_config_yaml_value")"
    splunk_collectd_dir_value="$(Splunk_TA_otel_expand_config_param "$splunk_collectd_dir_value")"
    splunk_otel_log_file_value="$(Splunk_TA_otel_expand_config_param "$splunk_otel_log_file_value")"
    splunk_access_token_file_value="$(Splunk_TA_otel_expand_config_param "$splunk_access_token_file_value")"

    get_access_token
    if [[ $? == 1 ]] ; then
        log_msg="Failed to get access token."
        splunk_TA_otel_log_error "$log_msg"
    fi

    #3 Control start/stop of otel agent
    splunk_TA_otel_configure_traps

    log_message="Starting otel agent from $(dirname "${splunk_TA_otel_script_directory}") with configuration file $splunk_config_value and log file $splunk_otel_log_file_value"
    splunk_TA_otel_log_msg "INFO" "$log_message"
    
    #4 Start the agent
    otel_path="$splunk_TA_otel_script_directory/$splunk_otel_process_name"
    if ! [ -f "$otel_path" ] ; then
        splunk_TA_otel_log_error "Otel binary not found: $otel_path"
        exit 1
    fi

    # Begin autogenerated code
    if [ "$splunk_api_url_value" ] ; then
      export SPLUNK_API_URL="$splunk_api_url_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_api_url_name"
    fi
    if [ "$splunk_bundle_dir_value" ] ; then
      export SPLUNK_BUNDLE_DIR="$splunk_bundle_dir_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_bundle_dir_name"
    fi
    if [ "$splunk_config_value" ] ; then
      export SPLUNK_CONFIG="$splunk_config_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_config_name"
    fi
    if [ "$splunk_config_dir_value" ] ; then
      export SPLUNK_CONFIG_DIR="$splunk_config_dir_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_config_dir_name"
    fi
    if [ "$splunk_collectd_dir_value" ] ; then
      export SPLUNK_COLLECTD_DIR="$splunk_collectd_dir_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_collectd_dir_name"
    fi
    if [ "$splunk_debug_config_server_value" ] ; then
      export SPLUNK_DEBUG_CONFIG_SERVER="$splunk_debug_config_server_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_debug_config_server_name"
    fi
    if [ "$splunk_config_yaml_value" ] ; then
      export SPLUNK_CONFIG_YAML="$splunk_config_yaml_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_config_yaml_name"
    fi
    if [ "$splunk_gateway_url_value" ] ; then
      export SPLUNK_GATEWAY_URL="$splunk_gateway_url_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_gateway_url_name"
    fi
    if [ "$splunk_hec_url_value" ] ; then
      export SPLUNK_HEC_URL="$splunk_hec_url_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_hec_url_name"
    fi
    if [ "$splunk_listen_interface_value" ] ; then
      export SPLUNK_LISTEN_INTERFACE="$splunk_listen_interface_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_listen_interface_name"
    fi
    if [ "$splunk_memory_limit_mib_value" ] ; then
      export SPLUNK_MEMORY_LIMIT_MIB="$splunk_memory_limit_mib_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_memory_limit_mib_name"
    fi
    if [ "$splunk_memory_total_mib_value" ] ; then
      export SPLUNK_MEMORY_TOTAL_MIB="$splunk_memory_total_mib_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_memory_total_mib_name"
    fi
    if [ "$splunk_otel_log_file_value" ] ; then
      export SPLUNK_OTEL_LOG_FILE_NAME="$splunk_otel_log_file_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_otel_log_file_name"
    fi
    if [ "$splunk_ingest_url_value" ] ; then
      export SPLUNK_INGEST_URL="$splunk_ingest_url_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_ingest_url_name"
    fi
    if [ "$splunk_realm_value" ] ; then
      export SPLUNK_REALM="$splunk_realm_value"
    else
      splunk_TA_otel_log_msg "DEBUG" "NOT SET: $splunk_realm_name"
    fi
    if [ "$splunk_access_token_file_value" ] ; then
      export SPLUNK_ACCESS_TOKEN_FILE="$splunk_access_token_file_value"
    else
      splunk_TA_otel_log_msg "INFO" "NOT SET: $splunk_access_token_file_name"
    fi
    # End autogenerated code

    splunk_TA_otel_log_msg "INFO" "Running as user $(whoami)"
    splunk_TA_otel_log_msg "INFO" "platform home: $SPLUNK_OTEL_TA_PLATFORM_HOME"

    # Set path based on properties of set variables
    if [ "$splunk_bundle_dir_value" ] ; then
        # extract the agent bundle (if configured)
        extract_bundle
        splunk_TA_otel_log_msg "INFO" "DETECTED AGENT BUNDLE CONFIGURED, patching path (orginal: $PATH )"
        PATH="$PATH:$splunk_bundle_dir_value/bin/:$splunk_bundle_dir_value/jre/bin"
        splunk_TA_otel_log_msg "INFO" "DETECTED AGENT BUNDLE CONFIGURED, patched path: $PATH"
        splunk_TA_otel_log_msg "DEBUG" "above is output of  $SPLUNK_OTEL_TA_PLATFORM_HOME/bin/agent-bundle/bin/collectd"
        # Splunkd sets LD_PRELOAD & LD_LIBRARY_PATH env vars, but they conflict
        # with what the agent-bundle sets, so unset them only for this script.
        LD_PRELOAD=""
        LD_LIBRARY_PATH=""
    fi


    # don't export any secrets, instead do in-line
    splunk_TA_otel_log_msg "INFO" "splunk_TA_otel_script_file=$splunk_TA_otel_script_file"
    splunk_TA_otel_log_msg "INFO" "splunk_TA_otel_script_directory=$splunk_TA_otel_script_directory"
    splunk_TA_otel_log_msg "INFO" "SPLUNK_OTEL_TA_PLATFORM_HOME=$SPLUNK_OTEL_TA_PLATFORM_HOME"
    splunk_TA_otel_log_msg "INFO" "SPLUNK_OTEL_TA_HOME=$SPLUNK_OTEL_TA_HOME"
    splunk_TA_otel_log_msg "INFO" "SPLUNK_HOME=$SPLUNK_HOME"


    SPLUNK_ACCESS_TOKEN="$SPLUNK_ACCESS_TOKEN" \
    SPLUNK_HOME="$SPLUNK_HOME" \
    SPLUNK_OTEL_TA_HOME="$SPLUNK_OTEL_TA_HOME" \
    PATH="$PATH" \
    LD_PRELOAD="$LD_PRELOAD" \
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH" \
    SPLUNK_OTEL_TA_PLATFORM_HOME="$SPLUNK_OTEL_TA_PLATFORM_HOME" \
        "$otel_path" > "$splunk_otel_log_file_value" 2>&1 &
    splunk_TA_otel_pid="$!"
    is_splunk_TA_otel_agent_running "$splunk_TA_otel_pid"
    if [[ $? == 1 ]] ; then
        log_message="Failed to start otel agent"
        splunk_TA_otel_log_error "$log_message"
    else
        log_message="Otel agent running"
        splunk_TA_otel_log_msg "INFO" "$log_message"
        wait $splunk_TA_otel_pid
        trap - TERM INT
        wait $splunk_TA_otel_pid
    fi

    log_message="Otel agent stopped"
    splunk_TA_otel_log_msg "INFO" "$log_message"
}

splunk_TA_otel_scheme() {
    exit 0
}

splunk_TA_otel_validate_args() {
    exit 0
}

splunk_TA_otel_log_msg() {
    log_type=$1
    log_msg=$2
    log_date="$(date  +'%m-%d-%Y %H:%M:%S %z')"
    if [[ "$log_type" != "DEBUG" ]]  || [ -n "$SPLUNK_OTEL_TA_DEBUG" ] ; then
      echo "$log_date" "$log_type" "$log_msg" >> "$SPLUNK_HOME/var/log/splunk/Splunk_TA_otel.log"
    fi
}

splunk_TA_otel_log_error() {
    message=$1
    splunk_TA_otel_log_msg "ERROR" "$message"
}

splunk_TA_otel_perform_actions() {

    if  [[ "$splunk_TA_otel_num_args" -eq "0" ]] ; then
        splunk_TA_otel_run_agent
    elif [[ "${splunk_TA_otel_args[0]}" == "--scheme" ]] ; then
        splunk_TA_otel_scheme
    elif [[ "${splunk_TA_otel_args[0]}" == "--validate-arguments" ]] ; then
        splunk_TA_otel_validate_arg
    else
        splunk_TA_otel_log_error "Splunk_TA_Otel received an unsupported argument"
    fi
}

extract_bundle() {
    if [ -d "$SPLUNK_BUNDLE_DIR" ]; then
        splunk_TA_otel_log_msg "INFO" "Agent bundle path exists on filesystem -- not attempting to extract nor patch interpreter.  May still patch PATH env var."
        return 0
    else
        splunk_TA_otel_log_msg "INFO" "Extracting agent bundle to $SPLUNK_BUNDLE_DIR"
    fi
    SMART_AGENT_BUNDLE="agent-bundle_linux_amd64.tar.gz"
    BUNDLE_PARENT="$(realpath --canonicalize-missing "$SPLUNK_BUNDLE_DIR/../")"
    splunk_TA_otel_log_msg "DEBUG" "will cd to $BUNDLE_PARENT"
    tar -C "$BUNDLE_PARENT" -xzf "$splunk_TA_otel_script_directory/$SMART_AGENT_BUNDLE" || splunk_TA_otel_log_error "failed to extract $splunk_TA_otel_script_directory/$SMART_AGENT_BUNDLE to $SPLUNK_BUNDLE_DIR"
    splunk_TA_otel_log_msg "INFO" "agent bundle extracted to $SPLUNK_BUNDLE_DIR"

    # Patch everything in agent-bundle/bin to use our provided .so
    root_path="$(readlink -f "$splunk_bundle_dir_value")"
    "$root_path"/bin/patch-interpreter "$root_path"

}

echo "Starting Splunk TA Otel."

splunk_TA_otel_perform_actions
exit 0
