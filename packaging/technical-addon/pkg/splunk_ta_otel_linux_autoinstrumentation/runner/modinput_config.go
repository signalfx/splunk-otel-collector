// Code generated by modinput_config_generator; DO NOT EDIT.
package main

import (
	"github.com/splunk/splunk-technical-addon/internal/modularinput"
)

const SchemaName = "Splunk_TA_otel_linux_autoinstrumentation";

type SplunkTAOtelLinuxAutoinstrumentationModInput struct {
	Value string
	Name string
}

type SplunkTAOtelLinuxAutoinstrumentationModularInputs struct {
	AutoinstrumentationPath SplunkTAOtelLinuxAutoinstrumentationModInput
	AutoinstrumentationPreloadPath SplunkTAOtelLinuxAutoinstrumentationModInput
	Backup SplunkTAOtelLinuxAutoinstrumentationModInput
	DeploymentEnvironment SplunkTAOtelLinuxAutoinstrumentationModInput
	Force SplunkTAOtelLinuxAutoinstrumentationModInput
	LogsEnabled SplunkTAOtelLinuxAutoinstrumentationModInput
	MetricsEnabled SplunkTAOtelLinuxAutoinstrumentationModInput
	OtelExporterOtlpEndpoint SplunkTAOtelLinuxAutoinstrumentationModInput
	OtelExporterOtlpProtocol SplunkTAOtelLinuxAutoinstrumentationModInput
	OtelLogsExporter SplunkTAOtelLinuxAutoinstrumentationModInput
	OtelMetricsExporter SplunkTAOtelLinuxAutoinstrumentationModInput
	OtelServiceName SplunkTAOtelLinuxAutoinstrumentationModInput
	ProfilerEnabled SplunkTAOtelLinuxAutoinstrumentationModInput
	ProfilerMemoryEnabled SplunkTAOtelLinuxAutoinstrumentationModInput
	Remove SplunkTAOtelLinuxAutoinstrumentationModInput
	ResourceAttributes SplunkTAOtelLinuxAutoinstrumentationModInput
	SplunkOtelAutoinstrumentationNodejsPath SplunkTAOtelLinuxAutoinstrumentationModInput
	SplunkOtelJavaAutoinstrumentationJarPath SplunkTAOtelLinuxAutoinstrumentationModInput
	SplunkOtelLogFile SplunkTAOtelLinuxAutoinstrumentationModInput
	ZeroconfigPath SplunkTAOtelLinuxAutoinstrumentationModInput
}

func GetSplunkTAOtelLinuxAutoinstrumentationModularInputs(mip *modularinput.ModinputProcessor) *SplunkTAOtelLinuxAutoinstrumentationModularInputs {
	return &SplunkTAOtelLinuxAutoinstrumentationModularInputs{
		AutoinstrumentationPath: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["autoinstrumentation_path"].Value,
			Name: "autoinstrumentation_path",
		},
		AutoinstrumentationPreloadPath: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["autoinstrumentation_preload_path"].Value,
			Name: "autoinstrumentation_preload_path",
		},
		Backup: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["backup"].Value,
			Name: "backup",
		},
		DeploymentEnvironment: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["deployment_environment"].Value,
			Name: "deployment_environment",
		},
		Force: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["force"].Value,
			Name: "force",
		},
		LogsEnabled: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["logs_enabled"].Value,
			Name: "logs_enabled",
		},
		MetricsEnabled: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["metrics_enabled"].Value,
			Name: "metrics_enabled",
		},
		OtelExporterOtlpEndpoint: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["otel_exporter_otlp_endpoint"].Value,
			Name: "otel_exporter_otlp_endpoint",
		},
		OtelExporterOtlpProtocol: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["otel_exporter_otlp_protocol"].Value,
			Name: "otel_exporter_otlp_protocol",
		},
		OtelLogsExporter: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["otel_logs_exporter"].Value,
			Name: "otel_logs_exporter",
		},
		OtelMetricsExporter: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["otel_metrics_exporter"].Value,
			Name: "otel_metrics_exporter",
		},
		OtelServiceName: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["otel_service_name"].Value,
			Name: "otel_service_name",
		},
		ProfilerEnabled: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["profiler_enabled"].Value,
			Name: "profiler_enabled",
		},
		ProfilerMemoryEnabled: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["profiler_memory_enabled"].Value,
			Name: "profiler_memory_enabled",
		},
		Remove: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["remove"].Value,
			Name: "remove",
		},
		ResourceAttributes: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["resource_attributes"].Value,
			Name: "resource_attributes",
		},
		SplunkOtelAutoinstrumentationNodejsPath: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["splunk_otel_autoinstrumentation_nodejs_path"].Value,
			Name: "splunk_otel_autoinstrumentation_nodejs_path",
		},
		SplunkOtelJavaAutoinstrumentationJarPath: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["splunk_otel_java_autoinstrumentation_jar_path"].Value,
			Name: "splunk_otel_java_autoinstrumentation_jar_path",
		},
		SplunkOtelLogFile: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["splunk_otel_log_file"].Value,
			Name: "splunk_otel_log_file",
		},
		ZeroconfigPath: SplunkTAOtelLinuxAutoinstrumentationModInput{
			Value: mip.ModularInputs["zeroconfig_path"].Value,
			Name: "zeroconfig_path",
		},
	}
}

// GetDefaultSplunkTAOtelLinuxAutoinstrumentationModularInputs returns the embedded modular input configuration
func GetDefaultSplunkTAOtelLinuxAutoinstrumentationModularInputs() modularinput.GenericModularInput {
	return modularinput.GenericModularInput{
		SchemaName: "Splunk_TA_otel_linux_autoinstrumentation",
		ModularInputs: map[string]*modularinput.ModInput{
			"autoinstrumentation_path": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Path for .so", Default:"$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/libsplunk_amd64.so", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Value: "$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/libsplunk_amd64.so",
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"autoinstrumentation_preload_path": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Path to add preload configuration to.", Default:"/etc/ld.so.preload", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Value: "/etc/ld.so.preload",
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"backup": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Backup files before writing to them or deleting them.  Backup files are not deleted by this addon.", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"deployment_environment": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Same as --deployment environment", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"force": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"whether to force installation ", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"logs_enabled": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Enables logs exporting of autoinstrumented.", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"metrics_enabled": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Enabled metrics exporting of autoinstrumented.", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"otel_exporter_otlp_endpoint": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"The endpoint for OTLP exporter.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"otel_exporter_otlp_protocol": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"The protocol for OTLP exporter.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"otel_logs_exporter": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"The exporter to use for logs.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"otel_metrics_exporter": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"The exporter to use for metrics.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"otel_service_name": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"The service name to use for telemetry data.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"profiler_enabled": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Enables system wide java cpu profiler in autoinstrumentation.", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"profiler_memory_enabled": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Enables system wide java memory profiler in autoinstrumentation.", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"remove": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"If true, removes the installation", Default:"false", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Value: "false",
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"resource_attributes": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"String representing the OTEL_RESOURCE_ATTRIBUTES.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:false},
				Transformers: []modularinput.TransformerFunc{
				},
			},
			"splunk_otel_autoinstrumentation_nodejs_path": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Path for nodejs autoinstrumentation", Default:"$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/splunk-otel-nodejs.tgz", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Value: "$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/splunk-otel-nodejs.tgz",
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"splunk_otel_java_autoinstrumentation_jar_path": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Path for the java jar used in autoinstumentation.", Default:"$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/splunk-otel-javaagent.jar", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Value: "$SPLUNK_OTEL_TA_PLATFORM_HOME/bin/splunk-otel-javaagent.jar",
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"splunk_otel_log_file": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Log file for otel collector.", Default:"", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
			"zeroconfig_path": &modularinput.ModInput{
				Config: modularinput.ModInputConfig{Description:"Path for zeroconfig", Default:"$SPLUNK_OTEL_TA_HOME/config/zero.conf", Flag:modularinput.Flag{Name:"", IsUnary:false}, Required:false, PassthroughEnvVar:false, ReplaceableEnvVar:true},
				Value: "$SPLUNK_OTEL_TA_HOME/config/zero.conf",
				Transformers: []modularinput.TransformerFunc{
					modularinput.DefaultReplaceEnvVarTransformer,
				},
			},
		},
	}
}
