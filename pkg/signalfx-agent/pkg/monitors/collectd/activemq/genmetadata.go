// Code generated by monitor-code-gen. DO NOT EDIT.

package activemq

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/activemq"

const (
	groupJvm = "jvm"
)

var groupSet = map[string]bool{
	groupJvm: true,
}

const (
	counterAmqTotalConnectionsCount = "counter.amq.TotalConnectionsCount"
	gaugeAmqTotalConsumerCount      = "gauge.amq.TotalConsumerCount"
	gaugeAmqTotalDequeueCount       = "gauge.amq.TotalDequeueCount"
	gaugeAmqTotalEnqueueCount       = "gauge.amq.TotalEnqueueCount"
	gaugeAmqTotalMessageCount       = "gauge.amq.TotalMessageCount"
	gaugeAmqTotalProducerCount      = "gauge.amq.TotalProducerCount"
	gaugeAmqQueueAverageBlockedTime = "gauge.amq.queue.AverageBlockedTime"
	gaugeAmqQueueAverageEnqueueTime = "gauge.amq.queue.AverageEnqueueTime"
	gaugeAmqQueueAverageMessageSize = "gauge.amq.queue.AverageMessageSize"
	gaugeAmqQueueBlockedSends       = "gauge.amq.queue.BlockedSends"
	gaugeAmqQueueConsumerCount      = "gauge.amq.queue.ConsumerCount"
	gaugeAmqQueueDequeueCount       = "gauge.amq.queue.DequeueCount"
	gaugeAmqQueueEnqueueCount       = "gauge.amq.queue.EnqueueCount"
	gaugeAmqQueueExpiredCount       = "gauge.amq.queue.ExpiredCount"
	gaugeAmqQueueForwardCount       = "gauge.amq.queue.ForwardCount"
	gaugeAmqQueueInFlightCount      = "gauge.amq.queue.InFlightCount"
	gaugeAmqQueueProducerCount      = "gauge.amq.queue.ProducerCount"
	gaugeAmqQueueQueueSize          = "gauge.amq.queue.QueueSize"
	gaugeAmqQueueTotalBlockedTime   = "gauge.amq.queue.TotalBlockedTime"
	gaugeAmqTopicAverageBlockedTime = "gauge.amq.topic.AverageBlockedTime"
	gaugeAmqTopicAverageEnqueueTime = "gauge.amq.topic.AverageEnqueueTime"
	gaugeAmqTopicAverageMessageSize = "gauge.amq.topic.AverageMessageSize"
	gaugeAmqTopicBlockedSends       = "gauge.amq.topic.BlockedSends"
	gaugeAmqTopicConsumerCount      = "gauge.amq.topic.ConsumerCount"
	gaugeAmqTopicDequeueCount       = "gauge.amq.topic.DequeueCount"
	gaugeAmqTopicEnqueueCount       = "gauge.amq.topic.EnqueueCount"
	gaugeAmqTopicExpiredCount       = "gauge.amq.topic.ExpiredCount"
	gaugeAmqTopicForwardCount       = "gauge.amq.topic.ForwardCount"
	gaugeAmqTopicInFlightCount      = "gauge.amq.topic.InFlightCount"
	gaugeAmqTopicProducerCount      = "gauge.amq.topic.ProducerCount"
	gaugeAmqTopicQueueSize          = "gauge.amq.topic.QueueSize"
	gaugeAmqTopicTotalBlockedTime   = "gauge.amq.topic.TotalBlockedTime"
	gaugeJvmThreadsCount            = "gauge.jvm.threads.count"
	gaugeLoadedClasses              = "gauge.loaded_classes"
	invocations                     = "invocations"
	jmxMemoryCommitted              = "jmx_memory.committed"
	jmxMemoryInit                   = "jmx_memory.init"
	jmxMemoryMax                    = "jmx_memory.max"
	jmxMemoryUsed                   = "jmx_memory.used"
	totalTimeInMsCollectionTime     = "total_time_in_ms.collection_time"
)

var metricSet = map[string]monitors.MetricInfo{
	counterAmqTotalConnectionsCount: {Type: datapoint.Count},
	gaugeAmqTotalConsumerCount:      {Type: datapoint.Gauge},
	gaugeAmqTotalDequeueCount:       {Type: datapoint.Gauge},
	gaugeAmqTotalEnqueueCount:       {Type: datapoint.Gauge},
	gaugeAmqTotalMessageCount:       {Type: datapoint.Gauge},
	gaugeAmqTotalProducerCount:      {Type: datapoint.Gauge},
	gaugeAmqQueueAverageBlockedTime: {Type: datapoint.Gauge},
	gaugeAmqQueueAverageEnqueueTime: {Type: datapoint.Gauge},
	gaugeAmqQueueAverageMessageSize: {Type: datapoint.Gauge},
	gaugeAmqQueueBlockedSends:       {Type: datapoint.Gauge},
	gaugeAmqQueueConsumerCount:      {Type: datapoint.Gauge},
	gaugeAmqQueueDequeueCount:       {Type: datapoint.Gauge},
	gaugeAmqQueueEnqueueCount:       {Type: datapoint.Gauge},
	gaugeAmqQueueExpiredCount:       {Type: datapoint.Gauge},
	gaugeAmqQueueForwardCount:       {Type: datapoint.Gauge},
	gaugeAmqQueueInFlightCount:      {Type: datapoint.Gauge},
	gaugeAmqQueueProducerCount:      {Type: datapoint.Gauge},
	gaugeAmqQueueQueueSize:          {Type: datapoint.Gauge},
	gaugeAmqQueueTotalBlockedTime:   {Type: datapoint.Gauge},
	gaugeAmqTopicAverageBlockedTime: {Type: datapoint.Gauge},
	gaugeAmqTopicAverageEnqueueTime: {Type: datapoint.Gauge},
	gaugeAmqTopicAverageMessageSize: {Type: datapoint.Gauge},
	gaugeAmqTopicBlockedSends:       {Type: datapoint.Gauge},
	gaugeAmqTopicConsumerCount:      {Type: datapoint.Gauge},
	gaugeAmqTopicDequeueCount:       {Type: datapoint.Gauge},
	gaugeAmqTopicEnqueueCount:       {Type: datapoint.Gauge},
	gaugeAmqTopicExpiredCount:       {Type: datapoint.Gauge},
	gaugeAmqTopicForwardCount:       {Type: datapoint.Gauge},
	gaugeAmqTopicInFlightCount:      {Type: datapoint.Gauge},
	gaugeAmqTopicProducerCount:      {Type: datapoint.Gauge},
	gaugeAmqTopicQueueSize:          {Type: datapoint.Gauge},
	gaugeAmqTopicTotalBlockedTime:   {Type: datapoint.Gauge},
	gaugeJvmThreadsCount:            {Type: datapoint.Gauge, Group: groupJvm},
	gaugeLoadedClasses:              {Type: datapoint.Gauge, Group: groupJvm},
	invocations:                     {Type: datapoint.Counter, Group: groupJvm},
	jmxMemoryCommitted:              {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryInit:                   {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryMax:                    {Type: datapoint.Gauge, Group: groupJvm},
	jmxMemoryUsed:                   {Type: datapoint.Gauge, Group: groupJvm},
	totalTimeInMsCollectionTime:     {Type: datapoint.Counter, Group: groupJvm},
}

var defaultMetrics = map[string]bool{
	counterAmqTotalConnectionsCount: true,
	gaugeAmqTotalConsumerCount:      true,
	gaugeAmqTotalEnqueueCount:       true,
	gaugeAmqTotalMessageCount:       true,
	gaugeAmqTotalProducerCount:      true,
	gaugeAmqQueueAverageEnqueueTime: true,
	gaugeAmqQueueConsumerCount:      true,
	gaugeAmqQueueDequeueCount:       true,
	gaugeAmqQueueEnqueueCount:       true,
	gaugeAmqQueueExpiredCount:       true,
	gaugeAmqQueueInFlightCount:      true,
	gaugeAmqQueueProducerCount:      true,
	gaugeAmqQueueQueueSize:          true,
	gaugeAmqTopicAverageEnqueueTime: true,
	gaugeAmqTopicConsumerCount:      true,
	gaugeAmqTopicEnqueueCount:       true,
	gaugeAmqTopicExpiredCount:       true,
	gaugeAmqTopicInFlightCount:      true,
	gaugeAmqTopicProducerCount:      true,
	gaugeAmqTopicQueueSize:          true,
	gaugeJvmThreadsCount:            true,
	gaugeLoadedClasses:              true,
	invocations:                     true,
	jmxMemoryCommitted:              true,
	jmxMemoryInit:                   true,
	jmxMemoryMax:                    true,
	jmxMemoryUsed:                   true,
	totalTimeInMsCollectionTime:     true,
}

var groupMetricsMap = map[string][]string{
	groupJvm: {
		gaugeJvmThreadsCount,
		gaugeLoadedClasses,
		invocations,
		jmxMemoryCommitted,
		jmxMemoryInit,
		jmxMemoryMax,
		jmxMemoryUsed,
		totalTimeInMsCollectionTime,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/activemq",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     true,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
