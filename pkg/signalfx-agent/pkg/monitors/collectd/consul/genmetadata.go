// Code generated by monitor-code-gen. DO NOT EDIT.

package consul

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/consul"

var groupSet = map[string]bool{}

const (
	consulDNSStaleQueries                              = "consul.dns.stale_queries"
	consulMemberlistMsgSuspect                         = "consul.memberlist.msg.suspect"
	consulSerfMemberFlap                               = "consul.serf.member.flap"
	gaugeConsulCatalogNodesTotal                       = "gauge.consul.catalog.nodes.total"
	gaugeConsulCatalogNodesByService                   = "gauge.consul.catalog.nodes_by_service"
	gaugeConsulCatalogServicesTotal                    = "gauge.consul.catalog.services.total"
	gaugeConsulCatalogServicesByNode                   = "gauge.consul.catalog.services_by_node"
	gaugeConsulConsulDNSDomainQueryAGENTAvg            = "gauge.consul.consul.dns.domain_query.AGENT.avg"
	gaugeConsulConsulDNSDomainQueryAGENTMax            = "gauge.consul.consul.dns.domain_query.AGENT.max"
	gaugeConsulConsulDNSDomainQueryAGENTMin            = "gauge.consul.consul.dns.domain_query.AGENT.min"
	gaugeConsulConsulDNSPtrQueryAGENTAvg               = "gauge.consul.consul.dns.ptr_query.AGENT.avg"
	gaugeConsulConsulDNSPtrQueryAGENTMax               = "gauge.consul.consul.dns.ptr_query.AGENT.max"
	gaugeConsulConsulDNSPtrQueryAGENTMin               = "gauge.consul.consul.dns.ptr_query.AGENT.min"
	gaugeConsulConsulLeaderReconcileAvg                = "gauge.consul.consul.leader.reconcile.avg"
	gaugeConsulConsulRPCQuery                          = "gauge.consul.consul.rpc.query"
	gaugeConsulHealthNodesCritical                     = "gauge.consul.health.nodes.critical"
	gaugeConsulHealthNodesPassing                      = "gauge.consul.health.nodes.passing"
	gaugeConsulHealthNodesWarning                      = "gauge.consul.health.nodes.warning"
	gaugeConsulHealthServicesCritical                  = "gauge.consul.health.services.critical"
	gaugeConsulHealthServicesPassing                   = "gauge.consul.health.services.passing"
	gaugeConsulHealthServicesWarning                   = "gauge.consul.health.services.warning"
	gaugeConsulIsLeader                                = "gauge.consul.is_leader"
	gaugeConsulNetworkDcLatencyAvg                     = "gauge.consul.network.dc.latency.avg"
	gaugeConsulNetworkDcLatencyMax                     = "gauge.consul.network.dc.latency.max"
	gaugeConsulNetworkDcLatencyMin                     = "gauge.consul.network.dc.latency.min"
	gaugeConsulNetworkNodeLatencyAvg                   = "gauge.consul.network.node.latency.avg"
	gaugeConsulNetworkNodeLatencyMax                   = "gauge.consul.network.node.latency.max"
	gaugeConsulNetworkNodeLatencyMin                   = "gauge.consul.network.node.latency.min"
	gaugeConsulPeers                                   = "gauge.consul.peers"
	gaugeConsulRaftApply                               = "gauge.consul.raft.apply"
	gaugeConsulRaftCommitTimeAvg                       = "gauge.consul.raft.commitTime.avg"
	gaugeConsulRaftCommitTimeMax                       = "gauge.consul.raft.commitTime.max"
	gaugeConsulRaftCommitTimeMin                       = "gauge.consul.raft.commitTime.min"
	gaugeConsulRaftLeaderDispatchLogAvg                = "gauge.consul.raft.leader.dispatchLog.avg"
	gaugeConsulRaftLeaderDispatchLogMax                = "gauge.consul.raft.leader.dispatchLog.max"
	gaugeConsulRaftLeaderDispatchLogMin                = "gauge.consul.raft.leader.dispatchLog.min"
	gaugeConsulRaftLeaderLastContactAvg                = "gauge.consul.raft.leader.lastContact.avg"
	gaugeConsulRaftLeaderLastContactMax                = "gauge.consul.raft.leader.lastContact.max"
	gaugeConsulRaftLeaderLastContactMin                = "gauge.consul.raft.leader.lastContact.min"
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTAvg = "gauge.consul.raft.replication.appendEntries.rpc.AGENT.avg"
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTMax = "gauge.consul.raft.replication.appendEntries.rpc.AGENT.max"
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTMin = "gauge.consul.raft.replication.appendEntries.rpc.AGENT.min"
	gaugeConsulRaftStateCandidate                      = "gauge.consul.raft.state.candidate"
	gaugeConsulRaftStateLeader                         = "gauge.consul.raft.state.leader"
	gaugeConsulRPCQuery                                = "gauge.consul.rpc.query"
	gaugeConsulRuntimeAllocBytes                       = "gauge.consul.runtime.alloc_bytes"
	gaugeConsulRuntimeHeapObjects                      = "gauge.consul.runtime.heap_objects"
	gaugeConsulRuntimeNumGoroutines                    = "gauge.consul.runtime.num_goroutines"
	gaugeConsulSerfEvents                              = "gauge.consul.serf.events"
	gaugeConsulSerfEventsConsulNewLeader               = "gauge.consul.serf.events.consul:new-leader"
	gaugeConsulSerfMemberJoin                          = "gauge.consul.serf.member.join"
	gaugeConsulSerfMemberLeft                          = "gauge.consul.serf.member.left"
	gaugeConsulSerfQueueEventAvg                       = "gauge.consul.serf.queue.Event.avg"
	gaugeConsulSerfQueueEventMax                       = "gauge.consul.serf.queue.Event.max"
	gaugeConsulSerfQueueEventMin                       = "gauge.consul.serf.queue.Event.min"
	gaugeConsulSerfQueueQueryAvg                       = "gauge.consul.serf.queue.Query.avg"
	gaugeConsulSerfQueueQueryMax                       = "gauge.consul.serf.queue.Query.max"
	gaugeConsulSerfQueueQueryMin                       = "gauge.consul.serf.queue.Query.min"
)

var metricSet = map[string]monitors.MetricInfo{
	consulDNSStaleQueries:                              {Type: datapoint.Gauge},
	consulMemberlistMsgSuspect:                         {Type: datapoint.Gauge},
	consulSerfMemberFlap:                               {Type: datapoint.Gauge},
	gaugeConsulCatalogNodesTotal:                       {Type: datapoint.Gauge},
	gaugeConsulCatalogNodesByService:                   {Type: datapoint.Gauge},
	gaugeConsulCatalogServicesTotal:                    {Type: datapoint.Gauge},
	gaugeConsulCatalogServicesByNode:                   {Type: datapoint.Gauge},
	gaugeConsulConsulDNSDomainQueryAGENTAvg:            {Type: datapoint.Gauge},
	gaugeConsulConsulDNSDomainQueryAGENTMax:            {Type: datapoint.Gauge},
	gaugeConsulConsulDNSDomainQueryAGENTMin:            {Type: datapoint.Gauge},
	gaugeConsulConsulDNSPtrQueryAGENTAvg:               {Type: datapoint.Gauge},
	gaugeConsulConsulDNSPtrQueryAGENTMax:               {Type: datapoint.Gauge},
	gaugeConsulConsulDNSPtrQueryAGENTMin:               {Type: datapoint.Gauge},
	gaugeConsulConsulLeaderReconcileAvg:                {Type: datapoint.Gauge},
	gaugeConsulConsulRPCQuery:                          {Type: datapoint.Gauge},
	gaugeConsulHealthNodesCritical:                     {Type: datapoint.Gauge},
	gaugeConsulHealthNodesPassing:                      {Type: datapoint.Gauge},
	gaugeConsulHealthNodesWarning:                      {Type: datapoint.Gauge},
	gaugeConsulHealthServicesCritical:                  {Type: datapoint.Gauge},
	gaugeConsulHealthServicesPassing:                   {Type: datapoint.Gauge},
	gaugeConsulHealthServicesWarning:                   {Type: datapoint.Gauge},
	gaugeConsulIsLeader:                                {Type: datapoint.Gauge},
	gaugeConsulNetworkDcLatencyAvg:                     {Type: datapoint.Gauge},
	gaugeConsulNetworkDcLatencyMax:                     {Type: datapoint.Gauge},
	gaugeConsulNetworkDcLatencyMin:                     {Type: datapoint.Gauge},
	gaugeConsulNetworkNodeLatencyAvg:                   {Type: datapoint.Gauge},
	gaugeConsulNetworkNodeLatencyMax:                   {Type: datapoint.Gauge},
	gaugeConsulNetworkNodeLatencyMin:                   {Type: datapoint.Gauge},
	gaugeConsulPeers:                                   {Type: datapoint.Gauge},
	gaugeConsulRaftApply:                               {Type: datapoint.Gauge},
	gaugeConsulRaftCommitTimeAvg:                       {Type: datapoint.Gauge},
	gaugeConsulRaftCommitTimeMax:                       {Type: datapoint.Gauge},
	gaugeConsulRaftCommitTimeMin:                       {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderDispatchLogAvg:                {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderDispatchLogMax:                {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderDispatchLogMin:                {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderLastContactAvg:                {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderLastContactMax:                {Type: datapoint.Gauge},
	gaugeConsulRaftLeaderLastContactMin:                {Type: datapoint.Gauge},
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTAvg: {Type: datapoint.Gauge},
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTMax: {Type: datapoint.Gauge},
	gaugeConsulRaftReplicationAppendEntriesRPCAGENTMin: {Type: datapoint.Gauge},
	gaugeConsulRaftStateCandidate:                      {Type: datapoint.Gauge},
	gaugeConsulRaftStateLeader:                         {Type: datapoint.Gauge},
	gaugeConsulRPCQuery:                                {Type: datapoint.Gauge},
	gaugeConsulRuntimeAllocBytes:                       {Type: datapoint.Gauge},
	gaugeConsulRuntimeHeapObjects:                      {Type: datapoint.Gauge},
	gaugeConsulRuntimeNumGoroutines:                    {Type: datapoint.Gauge},
	gaugeConsulSerfEvents:                              {Type: datapoint.Gauge},
	gaugeConsulSerfEventsConsulNewLeader:               {Type: datapoint.Gauge},
	gaugeConsulSerfMemberJoin:                          {Type: datapoint.Gauge},
	gaugeConsulSerfMemberLeft:                          {Type: datapoint.Gauge},
	gaugeConsulSerfQueueEventAvg:                       {Type: datapoint.Gauge},
	gaugeConsulSerfQueueEventMax:                       {Type: datapoint.Gauge},
	gaugeConsulSerfQueueEventMin:                       {Type: datapoint.Gauge},
	gaugeConsulSerfQueueQueryAvg:                       {Type: datapoint.Gauge},
	gaugeConsulSerfQueueQueryMax:                       {Type: datapoint.Gauge},
	gaugeConsulSerfQueueQueryMin:                       {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	gaugeConsulCatalogNodesTotal:        true,
	gaugeConsulCatalogNodesByService:    true,
	gaugeConsulCatalogServicesTotal:     true,
	gaugeConsulCatalogServicesByNode:    true,
	gaugeConsulConsulLeaderReconcileAvg: true,
	gaugeConsulHealthNodesCritical:      true,
	gaugeConsulHealthNodesPassing:       true,
	gaugeConsulHealthNodesWarning:       true,
	gaugeConsulHealthServicesCritical:   true,
	gaugeConsulHealthServicesPassing:    true,
	gaugeConsulHealthServicesWarning:    true,
	gaugeConsulIsLeader:                 true,
	gaugeConsulNetworkDcLatencyAvg:      true,
	gaugeConsulNetworkNodeLatencyAvg:    true,
	gaugeConsulNetworkNodeLatencyMax:    true,
	gaugeConsulNetworkNodeLatencyMin:    true,
	gaugeConsulPeers:                    true,
	gaugeConsulRaftApply:                true,
	gaugeConsulRaftCommitTimeAvg:        true,
	gaugeConsulRaftCommitTimeMax:        true,
	gaugeConsulRaftCommitTimeMin:        true,
	gaugeConsulRaftLeaderDispatchLogAvg: true,
	gaugeConsulRaftLeaderDispatchLogMax: true,
	gaugeConsulRaftLeaderDispatchLogMin: true,
	gaugeConsulRaftLeaderLastContactAvg: true,
	gaugeConsulRaftLeaderLastContactMax: true,
	gaugeConsulRaftLeaderLastContactMin: true,
	gaugeConsulRaftStateCandidate:       true,
	gaugeConsulRaftStateLeader:          true,
	gaugeConsulSerfEvents:               true,
	gaugeConsulSerfMemberJoin:           true,
	gaugeConsulSerfMemberLeft:           true,
	gaugeConsulSerfQueueEventAvg:        true,
	gaugeConsulSerfQueueEventMax:        true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/consul",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
