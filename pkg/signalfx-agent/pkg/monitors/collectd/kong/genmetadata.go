// Code generated by monitor-code-gen. DO NOT EDIT.

package kong

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/kong"

var groupSet = map[string]bool{}

const (
	counterKongConnectionsAccepted = "counter.kong.connections.accepted"
	counterKongConnectionsHandled  = "counter.kong.connections.handled"
	counterKongKongLatency         = "counter.kong.kong.latency"
	counterKongRequestsCount       = "counter.kong.requests.count"
	counterKongRequestsLatency     = "counter.kong.requests.latency"
	counterKongRequestsSize        = "counter.kong.requests.size"
	counterKongResponsesCount      = "counter.kong.responses.count"
	counterKongResponsesSize       = "counter.kong.responses.size"
	counterKongUpstreamLatency     = "counter.kong.upstream.latency"
	gaugeKongConnectionsActive     = "gauge.kong.connections.active"
	gaugeKongConnectionsReading    = "gauge.kong.connections.reading"
	gaugeKongConnectionsWaiting    = "gauge.kong.connections.waiting"
	gaugeKongConnectionsWriting    = "gauge.kong.connections.writing"
	gaugeKongDatabaseReachable     = "gauge.kong.database.reachable"
)

var metricSet = map[string]monitors.MetricInfo{
	counterKongConnectionsAccepted: {Type: datapoint.Counter},
	counterKongConnectionsHandled:  {Type: datapoint.Counter},
	counterKongKongLatency:         {Type: datapoint.Counter},
	counterKongRequestsCount:       {Type: datapoint.Counter},
	counterKongRequestsLatency:     {Type: datapoint.Counter},
	counterKongRequestsSize:        {Type: datapoint.Counter},
	counterKongResponsesCount:      {Type: datapoint.Counter},
	counterKongResponsesSize:       {Type: datapoint.Counter},
	counterKongUpstreamLatency:     {Type: datapoint.Counter},
	gaugeKongConnectionsActive:     {Type: datapoint.Gauge},
	gaugeKongConnectionsReading:    {Type: datapoint.Gauge},
	gaugeKongConnectionsWaiting:    {Type: datapoint.Gauge},
	gaugeKongConnectionsWriting:    {Type: datapoint.Gauge},
	gaugeKongDatabaseReachable:     {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	counterKongKongLatency:      true,
	counterKongRequestsCount:    true,
	counterKongRequestsLatency:  true,
	counterKongRequestsSize:     true,
	counterKongResponsesCount:   true,
	counterKongResponsesSize:    true,
	counterKongUpstreamLatency:  true,
	gaugeKongConnectionsActive:  true,
	gaugeKongConnectionsReading: true,
	gaugeKongConnectionsWaiting: true,
	gaugeKongConnectionsWriting: true,
	gaugeKongDatabaseReachable:  true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/kong",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
