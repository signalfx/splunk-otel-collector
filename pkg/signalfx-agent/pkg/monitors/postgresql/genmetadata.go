// Code generated by monitor-code-gen. DO NOT EDIT.

package postgresql

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "postgresql"

const (
	groupQueries     = "queries"
	groupReplication = "replication"
)

var groupSet = map[string]bool{
	groupQueries:     true,
	groupReplication: true,
}

const (
	postgresBlockHitRatio      = "postgres_block_hit_ratio"
	postgresConflicts          = "postgres_conflicts"
	postgresDatabaseSize       = "postgres_database_size"
	postgresDeadlocks          = "postgres_deadlocks"
	postgresIndexScans         = "postgres_index_scans"
	postgresLiveRows           = "postgres_live_rows"
	postgresLocks              = "postgres_locks"
	postgresPctConnections     = "postgres_pct_connections"
	postgresQueriesAverageTime = "postgres_queries_average_time"
	postgresQueriesCalls       = "postgres_queries_calls"
	postgresQueriesTotalTime   = "postgres_queries_total_time"
	postgresQueryCount         = "postgres_query_count"
	postgresQueryTime          = "postgres_query_time"
	postgresReplicationLag     = "postgres_replication_lag"
	postgresReplicationState   = "postgres_replication_state"
	postgresRowsDeleted        = "postgres_rows_deleted"
	postgresRowsInserted       = "postgres_rows_inserted"
	postgresRowsUpdated        = "postgres_rows_updated"
	postgresSequentialScans    = "postgres_sequential_scans"
	postgresSessions           = "postgres_sessions"
	postgresTableSize          = "postgres_table_size"
	postgresXactCommits        = "postgres_xact_commits"
	postgresXactRollbacks      = "postgres_xact_rollbacks"
)

var metricSet = map[string]monitors.MetricInfo{
	postgresBlockHitRatio:      {Type: datapoint.Gauge},
	postgresConflicts:          {Type: datapoint.Counter},
	postgresDatabaseSize:       {Type: datapoint.Gauge},
	postgresDeadlocks:          {Type: datapoint.Counter},
	postgresIndexScans:         {Type: datapoint.Counter},
	postgresLiveRows:           {Type: datapoint.Gauge},
	postgresLocks:              {Type: datapoint.Gauge},
	postgresPctConnections:     {Type: datapoint.Gauge},
	postgresQueriesAverageTime: {Type: datapoint.Counter, Group: groupQueries},
	postgresQueriesCalls:       {Type: datapoint.Counter, Group: groupQueries},
	postgresQueriesTotalTime:   {Type: datapoint.Counter, Group: groupQueries},
	postgresQueryCount:         {Type: datapoint.Counter},
	postgresQueryTime:          {Type: datapoint.Counter},
	postgresReplicationLag:     {Type: datapoint.Gauge, Group: groupReplication},
	postgresReplicationState:   {Type: datapoint.Gauge, Group: groupReplication},
	postgresRowsDeleted:        {Type: datapoint.Counter},
	postgresRowsInserted:       {Type: datapoint.Counter},
	postgresRowsUpdated:        {Type: datapoint.Counter},
	postgresSequentialScans:    {Type: datapoint.Counter},
	postgresSessions:           {Type: datapoint.Gauge},
	postgresTableSize:          {Type: datapoint.Gauge},
	postgresXactCommits:        {Type: datapoint.Counter},
	postgresXactRollbacks:      {Type: datapoint.Counter},
}

var defaultMetrics = map[string]bool{
	postgresBlockHitRatio:   true,
	postgresDatabaseSize:    true,
	postgresDeadlocks:       true,
	postgresIndexScans:      true,
	postgresLiveRows:        true,
	postgresQueryCount:      true,
	postgresQueryTime:       true,
	postgresRowsDeleted:     true,
	postgresRowsInserted:    true,
	postgresRowsUpdated:     true,
	postgresSequentialScans: true,
	postgresSessions:        true,
	postgresTableSize:       true,
}

var groupMetricsMap = map[string][]string{
	groupQueries: {
		postgresQueriesAverageTime,
		postgresQueriesCalls,
		postgresQueriesTotalTime,
	},
	groupReplication: {
		postgresReplicationLag,
		postgresReplicationState,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "postgresql",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
