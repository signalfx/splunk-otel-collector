monitors:
- dimensions:
  doc: |
    This monitor reads metrics from a [Prometheus
    exporter](https://prometheus.io/docs/instrumenting/exporters/) endpoint.

    All metric types are supported.  See
    [Metric Types](https://prometheus.io/docs/concepts/metric_types/) for a
    description of the Prometheus metric types.  The conversion happens as
    follows:

     - Gauges are converted directly to SignalFx gauges
     - Counters are converted directly to SignalFx cumulative counters
     - Untyped metrics are converted directly to SignalFx gauges
     - Summary metrics are converted to three distinct metrics, where
       `<basename>` is the root name of the metric:
       - The total count gets converted to a cumulative counter called `<basename>_count`
       - The total sum gets converted to a cumulative counter called `<basename>`
       - Each quantile value is converted to a gauge called
         `<basename>_quantile` and will include a dimension called `quantile` that
         specifies the quantile.
     - Histogram metrics are converted to three distinct metrics, where
       `<basename>` is the root name of the metric:
       - The total count gets converted to a cumulative counter called `<basename>_count`
       - The total sum gets converted to a cumulative counter called `<basename>`
       - Each histogram bucket is converted to a cumulative counter called
         `<basename>_bucket` and will include a dimension called `upper_bound` that
         specifies the maximum value in that bucket.  This metric specifies the
         number of events with a value that is less than or equal to the upper
         bound.

    All Prometheus labels will be converted directly to SignalFx dimensions.

    This supports service discovery so you can set a discovery rule such as:

    `port >= 9100 && port <= 9500 && containerImage =~ "exporter"`

    assuming you are running exporters in container images that have the word
    "exporter" in them and fall within the standard exporter port range.  In
    K8s, you could also try matching on the container port name as defined in
    the pod spec, which is the `name` variable in discovery rules for the
    `k8s-api` observer.

    Filtering can be very useful here since exporters tend to be fairly verbose.

    Sample YAML configuration:

    ```
    monitors:
     - type: prometheus-exporter
       discoveryRule: port >= 9100 && port <= 9500 && container_image =~ "exporter"
       extraDimensions:
         metric_source: prometheus
    ```

    ## Authentication
    For basic HTTP authentication use the `username` and `password` options.

    On Kubernetes if the monitored service requires authentication use the `useServiceAccount`
    option to use the service account of the agent when connecting. Make sure that the
    SignalFx Agent service account has sufficient permissions for the monitored service.

    ## Troubleshooting
    * Log contains the error `net/http: HTTP/1.x transport connection broken: malformed HTTP response`

        **Solution**: enable HTTPS with `useHTTPS`.

    * Log contains the error `forbidden: User \"system:anonymous\" cannot get path \"/metrics\"`

        **Solution**: enable `useServiceAccount` and make sure the service account SignalFx agent
        is running with has the necessary permissions.
  metrics:
  sendAll: true
  monitorType: prometheus-exporter
  properties:
