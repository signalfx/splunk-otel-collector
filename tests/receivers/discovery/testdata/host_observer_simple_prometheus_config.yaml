extensions:
  host_observer:
  host_observer/with_name:
  host_observer/with/another/name:

receivers:
  # set up otlp receiver to use its endpoints as assertion material
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318
  discovery:
    embed_receiver_config: true
    receivers:
      prometheus_simple:
        rule: type == "hostport" and command contains "otelcol"
        resource_attributes:
          one.key: one.value
          two.key: two.value
        status:
          metrics:
            - status: successful
              regexp: ^otelcol_process_uptime$
              message: Successfully connected to prometheus server
          statements:
            # Only the first matching statement match will be applied
            - status: failed
              strict: Failed to scrape Prometheus endpoint
              message: (strict) Port appears to not be serving prometheus metrics
            - status: failed
              regexp: '"message":"Failed to scrape Prometheus endpoint"'
              message: (regexp) Port appears to not be serving prometheus metrics
            - status: failed
              expr: message == 'Failed to scrape Prometheus endpoint' && attributes["target_labels"] contains 'up'
              message: (expr) Port appears to not be serving prometheus metrics

    watch_observers:
      - host_observer
      - host_observer/with_name
      - host_observer/with/another/name

exporters:
  otlp:
    endpoint: "${OTLP_ENDPOINT}"
    tls:
      insecure: true

service:
  telemetry:
    logs:
      level: debug
  extensions:
    - host_observer
    - host_observer/with_name
    - host_observer/with/another/name
  pipelines:
    metrics:
      receivers: [otlp]
      exporters: [otlp]
    logs:
      receivers: [discovery]
      exporters: [otlp]
